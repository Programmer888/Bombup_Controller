
bombup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000262c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080026ec  080026ec  000126ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800279c  0800279c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800279c  0800279c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800279c  0800279c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800279c  0800279c  0001279c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027a0  080027a0  000127a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080027a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000070  08002814  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08002814  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000078cd  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021c8  00000000  00000000  00027965  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007c8  00000000  00000000  00029b30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006a0  00000000  00000000  0002a2f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000de95  00000000  00000000  0002a998  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000723f  00000000  00000000  0003882d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000447dd  00000000  00000000  0003fa6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00084249  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c00  00000000  00000000  000842c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080026d4 	.word	0x080026d4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080026d4 	.word	0x080026d4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <_ZN10ControllerC1Ev>:
 *      Author: youri
 */

#include "Controller.h"

Controller::Controller() {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	4a03      	ldr	r2, [pc, #12]	; (8000238 <_ZN10ControllerC1Ev+0x18>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	0018      	movs	r0, r3
 8000232:	46bd      	mov	sp, r7
 8000234:	b002      	add	sp, #8
 8000236:	bd80      	pop	{r7, pc}
 8000238:	08002724 	.word	0x08002724

0800023c <_ZN10ControllerD1Ev>:

Controller::~Controller() {
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	4a03      	ldr	r2, [pc, #12]	; (8000254 <_ZN10ControllerD1Ev+0x18>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	0018      	movs	r0, r3
 800024e:	46bd      	mov	sp, r7
 8000250:	b002      	add	sp, #8
 8000252:	bd80      	pop	{r7, pc}
 8000254:	08002724 	.word	0x08002724

08000258 <_ZN10ControllerD0Ev>:
Controller::~Controller() {
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
}
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	0018      	movs	r0, r3
 8000264:	f7ff ffea 	bl	800023c <_ZN10ControllerD1Ev>
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2108      	movs	r1, #8
 800026c:	0018      	movs	r0, r3
 800026e:	f002 f8bd 	bl	80023ec <_ZdlPvj>
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	0018      	movs	r0, r3
 8000276:	46bd      	mov	sp, r7
 8000278:	b002      	add	sp, #8
 800027a:	bd80      	pop	{r7, pc}

0800027c <_ZN10Controller16setButtonPressedE6Button>:

void Controller::setButtonPressed(Button btn)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
 8000284:	6039      	str	r1, [r7, #0]
	this->btn = btn;
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	683a      	ldr	r2, [r7, #0]
 800028a:	605a      	str	r2, [r3, #4]
}
 800028c:	46c0      	nop			; (mov r8, r8)
 800028e:	46bd      	mov	sp, r7
 8000290:	b002      	add	sp, #8
 8000292:	bd80      	pop	{r7, pc}

08000294 <_ZN10Controller16getButtonPressedEv>:

Button Controller::getButtonPressed()
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
	return this->btn;
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	685b      	ldr	r3, [r3, #4]
}
 80002a0:	0018      	movs	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	b002      	add	sp, #8
 80002a6:	bd80      	pop	{r7, pc}

080002a8 <_ZN6EntityC1Ev>:

#include "Entity.h"

//Values to add to the x and y coordinates

Entity::Entity() {
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	4a03      	ldr	r2, [pc, #12]	; (80002c0 <_ZN6EntityC1Ev+0x18>)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	0018      	movs	r0, r3
 80002ba:	46bd      	mov	sp, r7
 80002bc:	b002      	add	sp, #8
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	08002734 	.word	0x08002734

080002c4 <_ZN6EntityC1Eii>:

Entity::Entity(int x, int y) {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	60f8      	str	r0, [r7, #12]
 80002cc:	60b9      	str	r1, [r7, #8]
 80002ce:	607a      	str	r2, [r7, #4]
 80002d0:	4a06      	ldr	r2, [pc, #24]	; (80002ec <_ZN6EntityC1Eii+0x28>)
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	601a      	str	r2, [r3, #0]
	this->x = x;
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	68ba      	ldr	r2, [r7, #8]
 80002da:	605a      	str	r2, [r3, #4]
	this->y = y;
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	687a      	ldr	r2, [r7, #4]
 80002e0:	609a      	str	r2, [r3, #8]
}
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	0018      	movs	r0, r3
 80002e6:	46bd      	mov	sp, r7
 80002e8:	b004      	add	sp, #16
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	08002734 	.word	0x08002734

080002f0 <_ZN6EntityD1Ev>:

Entity::~Entity() {
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	4a03      	ldr	r2, [pc, #12]	; (8000308 <_ZN6EntityD1Ev+0x18>)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	0018      	movs	r0, r3
 8000302:	46bd      	mov	sp, r7
 8000304:	b002      	add	sp, #8
 8000306:	bd80      	pop	{r7, pc}
 8000308:	08002734 	.word	0x08002734

0800030c <_ZN6EntityD0Ev>:
Entity::~Entity() {
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
}
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	0018      	movs	r0, r3
 8000318:	f7ff ffea 	bl	80002f0 <_ZN6EntityD1Ev>
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	210c      	movs	r1, #12
 8000320:	0018      	movs	r0, r3
 8000322:	f002 f863 	bl	80023ec <_ZdlPvj>
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	0018      	movs	r0, r3
 800032a:	46bd      	mov	sp, r7
 800032c:	b002      	add	sp, #8
 800032e:	bd80      	pop	{r7, pc}

08000330 <_ZN6Entity4getXEv>:

int Entity::getX()
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
	return this->x;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	685b      	ldr	r3, [r3, #4]
}
 800033c:	0018      	movs	r0, r3
 800033e:	46bd      	mov	sp, r7
 8000340:	b002      	add	sp, #8
 8000342:	bd80      	pop	{r7, pc}

08000344 <_ZN6Entity4moveE9Direction>:
{
	return this->y;
}

void Entity::move(Direction dir)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
 800034c:	6039      	str	r1, [r7, #0]
	int distance = 1;
 800034e:	2301      	movs	r3, #1
 8000350:	60fb      	str	r3, [r7, #12]
	switch(dir)
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	2b01      	cmp	r3, #1
 8000356:	d00f      	beq.n	8000378 <_ZN6Entity4moveE9Direction+0x34>
 8000358:	dc02      	bgt.n	8000360 <_ZN6Entity4moveE9Direction+0x1c>
 800035a:	2b00      	cmp	r3, #0
 800035c:	d005      	beq.n	800036a <_ZN6Entity4moveE9Direction+0x26>
			this->x += distance;
			break;
	}
	//this->x += dir[0];
	//this->y += dir[1];
}
 800035e:	e020      	b.n	80003a2 <_ZN6Entity4moveE9Direction+0x5e>
	switch(dir)
 8000360:	2b02      	cmp	r3, #2
 8000362:	d010      	beq.n	8000386 <_ZN6Entity4moveE9Direction+0x42>
 8000364:	2b03      	cmp	r3, #3
 8000366:	d015      	beq.n	8000394 <_ZN6Entity4moveE9Direction+0x50>
}
 8000368:	e01b      	b.n	80003a2 <_ZN6Entity4moveE9Direction+0x5e>
			this->y -= distance;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	689a      	ldr	r2, [r3, #8]
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	1ad2      	subs	r2, r2, r3
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	609a      	str	r2, [r3, #8]
			break;
 8000376:	e014      	b.n	80003a2 <_ZN6Entity4moveE9Direction+0x5e>
			this->y += distance;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	689a      	ldr	r2, [r3, #8]
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	18d2      	adds	r2, r2, r3
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	609a      	str	r2, [r3, #8]
			break;
 8000384:	e00d      	b.n	80003a2 <_ZN6Entity4moveE9Direction+0x5e>
			this->x -= distance;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	685a      	ldr	r2, [r3, #4]
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	1ad2      	subs	r2, r2, r3
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	605a      	str	r2, [r3, #4]
			break;
 8000392:	e006      	b.n	80003a2 <_ZN6Entity4moveE9Direction+0x5e>
			this->x += distance;
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	685a      	ldr	r2, [r3, #4]
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	18d2      	adds	r2, r2, r3
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	605a      	str	r2, [r3, #4]
			break;
 80003a0:	46c0      	nop			; (mov r8, r8)
}
 80003a2:	46c0      	nop			; (mov r8, r8)
 80003a4:	46bd      	mov	sp, r7
 80003a6:	b004      	add	sp, #16
 80003a8:	bd80      	pop	{r7, pc}
	...

080003ac <_ZN4GameC1Ev>:

#define WIDTH 8
#define HEIGHT 8
#define PLAYER_COUNT 1

Game::Game() {
 80003ac:	b590      	push	{r4, r7, lr}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
 80003b4:	4a0b      	ldr	r2, [pc, #44]	; (80003e4 <_ZN4GameC1Ev+0x38>)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	this->lvl = new Level(WIDTH, HEIGHT, PLAYER_COUNT);
 80003ba:	23c9      	movs	r3, #201	; 0xc9
 80003bc:	00db      	lsls	r3, r3, #3
 80003be:	0018      	movs	r0, r3
 80003c0:	f002 f818 	bl	80023f4 <_Znwj>
 80003c4:	0003      	movs	r3, r0
 80003c6:	001c      	movs	r4, r3
 80003c8:	2301      	movs	r3, #1
 80003ca:	2208      	movs	r2, #8
 80003cc:	2108      	movs	r1, #8
 80003ce:	0020      	movs	r0, r4
 80003d0:	f000 f854 	bl	800047c <_ZN5LevelC1Eiii>
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	60dc      	str	r4, [r3, #12]
}
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	0018      	movs	r0, r3
 80003dc:	46bd      	mov	sp, r7
 80003de:	b003      	add	sp, #12
 80003e0:	bd90      	pop	{r4, r7, pc}
 80003e2:	46c0      	nop			; (mov r8, r8)
 80003e4:	08002744 	.word	0x08002744

080003e8 <_ZN4GameD1Ev>:

Game::~Game() {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	4a03      	ldr	r2, [pc, #12]	; (8000400 <_ZN4GameD1Ev+0x18>)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	0018      	movs	r0, r3
 80003fa:	46bd      	mov	sp, r7
 80003fc:	b002      	add	sp, #8
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	08002744 	.word	0x08002744

08000404 <_ZN4GameD0Ev>:
Game::~Game() {
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
}
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	0018      	movs	r0, r3
 8000410:	f7ff ffea 	bl	80003e8 <_ZN4GameD1Ev>
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	2110      	movs	r1, #16
 8000418:	0018      	movs	r0, r3
 800041a:	f001 ffe7 	bl	80023ec <_ZdlPvj>
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	0018      	movs	r0, r3
 8000422:	46bd      	mov	sp, r7
 8000424:	b002      	add	sp, #8
 8000426:	bd80      	pop	{r7, pc}

08000428 <_ZN4Game6updateEv>:

void Game::update()
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
	this->lvl->update(this->controller1, this->controller2);
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	68d8      	ldr	r0, [r3, #12]
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	6859      	ldr	r1, [r3, #4]
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	689b      	ldr	r3, [r3, #8]
 800043c:	001a      	movs	r2, r3
 800043e:	f000 f8d7 	bl	80005f0 <_ZN5Level6updateEP10ControllerS1_>
		this->lvl->update(this->controller1, this->controller2);
		//if fpga ready pin = HIGH then
		//lvl.draw();
	}*/

}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	46bd      	mov	sp, r7
 8000446:	b002      	add	sp, #8
 8000448:	bd80      	pop	{r7, pc}

0800044a <_ZN4Game14setController1EP10Controller>:

void Game::setController1(Controller *controller)
{
 800044a:	b580      	push	{r7, lr}
 800044c:	b082      	sub	sp, #8
 800044e:	af00      	add	r7, sp, #0
 8000450:	6078      	str	r0, [r7, #4]
 8000452:	6039      	str	r1, [r7, #0]
	this->controller1 = controller;
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	683a      	ldr	r2, [r7, #0]
 8000458:	605a      	str	r2, [r3, #4]
}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	46bd      	mov	sp, r7
 800045e:	b002      	add	sp, #8
 8000460:	bd80      	pop	{r7, pc}

08000462 <_ZN4Game14setController2EP10Controller>:

void Game::setController2(Controller *controller)
{
 8000462:	b580      	push	{r7, lr}
 8000464:	b082      	sub	sp, #8
 8000466:	af00      	add	r7, sp, #0
 8000468:	6078      	str	r0, [r7, #4]
 800046a:	6039      	str	r1, [r7, #0]
	this->controller2 = controller;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	683a      	ldr	r2, [r7, #0]
 8000470:	609a      	str	r2, [r3, #8]
}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	46bd      	mov	sp, r7
 8000476:	b002      	add	sp, #8
 8000478:	bd80      	pop	{r7, pc}
	...

0800047c <_ZN5LevelC1Eiii>:
 */

#include "Level.h"
#include "Player.h"

Level::Level(int width, int height, int player_count)
 800047c:	b5b0      	push	{r4, r5, r7, lr}
 800047e:	b084      	sub	sp, #16
 8000480:	af00      	add	r7, sp, #0
 8000482:	60f8      	str	r0, [r7, #12]
 8000484:	60b9      	str	r1, [r7, #8]
 8000486:	607a      	str	r2, [r7, #4]
 8000488:	603b      	str	r3, [r7, #0]
 800048a:	4a2a      	ldr	r2, [pc, #168]	; (8000534 <_ZN5LevelC1Eiii+0xb8>)
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	3304      	adds	r3, #4
 8000494:	2462      	movs	r4, #98	; 0x62
 8000496:	001d      	movs	r5, r3
 8000498:	2c00      	cmp	r4, #0
 800049a:	db05      	blt.n	80004a8 <_ZN5LevelC1Eiii+0x2c>
 800049c:	0028      	movs	r0, r5
 800049e:	f7ff ff03 	bl	80002a8 <_ZN6EntityC1Ev>
 80004a2:	350c      	adds	r5, #12
 80004a4:	3c01      	subs	r4, #1
 80004a6:	e7f7      	b.n	8000498 <_ZN5LevelC1Eiii+0x1c>
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	2295      	movs	r2, #149	; 0x95
 80004ac:	00d2      	lsls	r2, r2, #3
 80004ae:	4694      	mov	ip, r2
 80004b0:	4463      	add	r3, ip
 80004b2:	2462      	movs	r4, #98	; 0x62
 80004b4:	001d      	movs	r5, r3
 80004b6:	2c00      	cmp	r4, #0
 80004b8:	db05      	blt.n	80004c6 <_ZN5LevelC1Eiii+0x4a>
 80004ba:	0028      	movs	r0, r5
 80004bc:	f000 f91a 	bl	80006f4 <_ZN6ObjectC1Ev>
 80004c0:	3504      	adds	r5, #4
 80004c2:	3c01      	subs	r4, #1
 80004c4:	e7f7      	b.n	80004b6 <_ZN5LevelC1Eiii+0x3a>
{
	this->entityCount = 0;
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	4a1b      	ldr	r2, [pc, #108]	; (8000538 <_ZN5LevelC1Eiii+0xbc>)
 80004ca:	2100      	movs	r1, #0
 80004cc:	5099      	str	r1, [r3, r2]
	this->staticObjectCount = 0;
 80004ce:	68fa      	ldr	r2, [r7, #12]
 80004d0:	23c7      	movs	r3, #199	; 0xc7
 80004d2:	00db      	lsls	r3, r3, #3
 80004d4:	2100      	movs	r1, #0
 80004d6:	50d1      	str	r1, [r2, r3]

	this->player1 = new Player("player1", 200, 200);
 80004d8:	2010      	movs	r0, #16
 80004da:	f001 ff8b 	bl	80023f4 <_Znwj>
 80004de:	0003      	movs	r3, r0
 80004e0:	001c      	movs	r4, r3
 80004e2:	4916      	ldr	r1, [pc, #88]	; (800053c <_ZN5LevelC1Eiii+0xc0>)
 80004e4:	23c8      	movs	r3, #200	; 0xc8
 80004e6:	22c8      	movs	r2, #200	; 0xc8
 80004e8:	0020      	movs	r0, r4
 80004ea:	f000 f931 	bl	8000750 <_ZN6PlayerC1EPcii>
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	4a13      	ldr	r2, [pc, #76]	; (8000540 <_ZN5LevelC1Eiii+0xc4>)
 80004f2:	509c      	str	r4, [r3, r2]
	//this->player1->move();
	this->player2 = new Player("player2", 0 ,0);
 80004f4:	2010      	movs	r0, #16
 80004f6:	f001 ff7d 	bl	80023f4 <_Znwj>
 80004fa:	0003      	movs	r3, r0
 80004fc:	001c      	movs	r4, r3
 80004fe:	4911      	ldr	r1, [pc, #68]	; (8000544 <_ZN5LevelC1Eiii+0xc8>)
 8000500:	2300      	movs	r3, #0
 8000502:	2200      	movs	r2, #0
 8000504:	0020      	movs	r0, r4
 8000506:	f000 f923 	bl	8000750 <_ZN6PlayerC1EPcii>
 800050a:	68fa      	ldr	r2, [r7, #12]
 800050c:	23c8      	movs	r3, #200	; 0xc8
 800050e:	00db      	lsls	r3, r3, #3
 8000510:	50d4      	str	r4, [r2, r3]
	//this->player2->move(0,0);
	this->spi_instance = new SPIConnect();
 8000512:	2004      	movs	r0, #4
 8000514:	f001 ff6e 	bl	80023f4 <_Znwj>
 8000518:	0003      	movs	r3, r0
 800051a:	001c      	movs	r4, r3
 800051c:	0020      	movs	r0, r4
 800051e:	f000 f99d 	bl	800085c <_ZN10SPIConnectC1Ev>
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	4a08      	ldr	r2, [pc, #32]	; (8000548 <_ZN5LevelC1Eiii+0xcc>)
 8000526:	509c      	str	r4, [r3, r2]

}
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	0018      	movs	r0, r3
 800052c:	46bd      	mov	sp, r7
 800052e:	b004      	add	sp, #16
 8000530:	bdb0      	pop	{r4, r5, r7, pc}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	08002754 	.word	0x08002754
 8000538:	00000634 	.word	0x00000634
 800053c:	080026ec 	.word	0x080026ec
 8000540:	0000063c 	.word	0x0000063c
 8000544:	080026f4 	.word	0x080026f4
 8000548:	00000644 	.word	0x00000644

0800054c <_ZN5LevelD1Ev>:

Level::~Level()
 800054c:	b590      	push	{r4, r7, lr}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	4a1a      	ldr	r2, [pc, #104]	; (80005c0 <_ZN5LevelD1Ev+0x74>)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2295      	movs	r2, #149	; 0x95
 800055e:	00d2      	lsls	r2, r2, #3
 8000560:	4694      	mov	ip, r2
 8000562:	4463      	add	r3, ip
 8000564:	2b00      	cmp	r3, #0
 8000566:	d014      	beq.n	8000592 <_ZN5LevelD1Ev+0x46>
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2295      	movs	r2, #149	; 0x95
 800056c:	00d2      	lsls	r2, r2, #3
 800056e:	4694      	mov	ip, r2
 8000570:	4463      	add	r3, ip
 8000572:	338d      	adds	r3, #141	; 0x8d
 8000574:	33ff      	adds	r3, #255	; 0xff
 8000576:	001c      	movs	r4, r3
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2295      	movs	r2, #149	; 0x95
 800057c:	00d2      	lsls	r2, r2, #3
 800057e:	4694      	mov	ip, r2
 8000580:	4463      	add	r3, ip
 8000582:	429c      	cmp	r4, r3
 8000584:	d005      	beq.n	8000592 <_ZN5LevelD1Ev+0x46>
 8000586:	3c04      	subs	r4, #4
 8000588:	6823      	ldr	r3, [r4, #0]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	0020      	movs	r0, r4
 800058e:	4798      	blx	r3
 8000590:	e7f2      	b.n	8000578 <_ZN5LevelD1Ev+0x2c>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	3304      	adds	r3, #4
 8000596:	2b00      	cmp	r3, #0
 8000598:	d00d      	beq.n	80005b6 <_ZN5LevelD1Ev+0x6a>
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	3304      	adds	r3, #4
 800059e:	4a09      	ldr	r2, [pc, #36]	; (80005c4 <_ZN5LevelD1Ev+0x78>)
 80005a0:	189c      	adds	r4, r3, r2
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	3304      	adds	r3, #4
 80005a6:	429c      	cmp	r4, r3
 80005a8:	d005      	beq.n	80005b6 <_ZN5LevelD1Ev+0x6a>
 80005aa:	3c0c      	subs	r4, #12
 80005ac:	6823      	ldr	r3, [r4, #0]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	0020      	movs	r0, r4
 80005b2:	4798      	blx	r3
 80005b4:	e7f5      	b.n	80005a2 <_ZN5LevelD1Ev+0x56>
{
	// TODO Auto-generated destructor stub
}
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	0018      	movs	r0, r3
 80005ba:	46bd      	mov	sp, r7
 80005bc:	b003      	add	sp, #12
 80005be:	bd90      	pop	{r4, r7, pc}
 80005c0:	08002754 	.word	0x08002754
 80005c4:	000004a4 	.word	0x000004a4

080005c8 <_ZN5LevelD0Ev>:
Level::~Level()
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
}
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	0018      	movs	r0, r3
 80005d4:	f7ff ffba 	bl	800054c <_ZN5LevelD1Ev>
 80005d8:	23c9      	movs	r3, #201	; 0xc9
 80005da:	00da      	lsls	r2, r3, #3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	0011      	movs	r1, r2
 80005e0:	0018      	movs	r0, r3
 80005e2:	f001 ff03 	bl	80023ec <_ZdlPvj>
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	0018      	movs	r0, r3
 80005ea:	46bd      	mov	sp, r7
 80005ec:	b002      	add	sp, #8
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <_ZN5Level6updateEP10ControllerS1_>:

void Level::update(Controller *controller1, Controller *controller2)
{
 80005f0:	b590      	push	{r4, r7, lr}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
	switch(controller1->getButtonPressed())
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	0018      	movs	r0, r3
 8000600:	f7ff fe48 	bl	8000294 <_ZN10Controller16getButtonPressedEv>
 8000604:	0003      	movs	r3, r0
 8000606:	2b01      	cmp	r3, #1
 8000608:	d010      	beq.n	800062c <_ZN5Level6updateEP10ControllerS1_+0x3c>
 800060a:	dc02      	bgt.n	8000612 <_ZN5Level6updateEP10ControllerS1_+0x22>
 800060c:	2b00      	cmp	r3, #0
 800060e:	d005      	beq.n	800061c <_ZN5Level6updateEP10ControllerS1_+0x2c>
 8000610:	e024      	b.n	800065c <_ZN5Level6updateEP10ControllerS1_+0x6c>
 8000612:	2b02      	cmp	r3, #2
 8000614:	d012      	beq.n	800063c <_ZN5Level6updateEP10ControllerS1_+0x4c>
 8000616:	2b03      	cmp	r3, #3
 8000618:	d018      	beq.n	800064c <_ZN5Level6updateEP10ControllerS1_+0x5c>
 800061a:	e01f      	b.n	800065c <_ZN5Level6updateEP10ControllerS1_+0x6c>
	{
		case Button::Up:
			this->player1->move(Direction::Up);
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	4a33      	ldr	r2, [pc, #204]	; (80006ec <_ZN5Level6updateEP10ControllerS1_+0xfc>)
 8000620:	589b      	ldr	r3, [r3, r2]
 8000622:	2100      	movs	r1, #0
 8000624:	0018      	movs	r0, r3
 8000626:	f7ff fe8d 	bl	8000344 <_ZN6Entity4moveE9Direction>
		break;
 800062a:	e017      	b.n	800065c <_ZN5Level6updateEP10ControllerS1_+0x6c>
		case Button::Down:
			this->player1->move(Direction::Down);
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	4a2f      	ldr	r2, [pc, #188]	; (80006ec <_ZN5Level6updateEP10ControllerS1_+0xfc>)
 8000630:	589b      	ldr	r3, [r3, r2]
 8000632:	2101      	movs	r1, #1
 8000634:	0018      	movs	r0, r3
 8000636:	f7ff fe85 	bl	8000344 <_ZN6Entity4moveE9Direction>
		break;
 800063a:	e00f      	b.n	800065c <_ZN5Level6updateEP10ControllerS1_+0x6c>
		case Button::Left:
			this->player1->move(Direction::Left);
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	4a2b      	ldr	r2, [pc, #172]	; (80006ec <_ZN5Level6updateEP10ControllerS1_+0xfc>)
 8000640:	589b      	ldr	r3, [r3, r2]
 8000642:	2102      	movs	r1, #2
 8000644:	0018      	movs	r0, r3
 8000646:	f7ff fe7d 	bl	8000344 <_ZN6Entity4moveE9Direction>
		break;
 800064a:	e007      	b.n	800065c <_ZN5Level6updateEP10ControllerS1_+0x6c>
		case Button::Right:
			this->player1->move(Direction::Right);
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	4a27      	ldr	r2, [pc, #156]	; (80006ec <_ZN5Level6updateEP10ControllerS1_+0xfc>)
 8000650:	589b      	ldr	r3, [r3, r2]
 8000652:	2103      	movs	r1, #3
 8000654:	0018      	movs	r0, r3
 8000656:	f7ff fe75 	bl	8000344 <_ZN6Entity4moveE9Direction>
		break;
 800065a:	46c0      	nop			; (mov r8, r8)
	}

	switch(controller1->getButtonPressed())
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	0018      	movs	r0, r3
 8000660:	f7ff fe18 	bl	8000294 <_ZN10Controller16getButtonPressedEv>
 8000664:	0003      	movs	r3, r0
 8000666:	2b01      	cmp	r3, #1
 8000668:	d011      	beq.n	800068e <_ZN5Level6updateEP10ControllerS1_+0x9e>
 800066a:	dc02      	bgt.n	8000672 <_ZN5Level6updateEP10ControllerS1_+0x82>
 800066c:	2b00      	cmp	r3, #0
 800066e:	d005      	beq.n	800067c <_ZN5Level6updateEP10ControllerS1_+0x8c>
 8000670:	e028      	b.n	80006c4 <_ZN5Level6updateEP10ControllerS1_+0xd4>
 8000672:	2b02      	cmp	r3, #2
 8000674:	d014      	beq.n	80006a0 <_ZN5Level6updateEP10ControllerS1_+0xb0>
 8000676:	2b03      	cmp	r3, #3
 8000678:	d01b      	beq.n	80006b2 <_ZN5Level6updateEP10ControllerS1_+0xc2>
 800067a:	e023      	b.n	80006c4 <_ZN5Level6updateEP10ControllerS1_+0xd4>
		{
			case Button::Up:
				this->player2->move(Direction::Up);
 800067c:	68fa      	ldr	r2, [r7, #12]
 800067e:	23c8      	movs	r3, #200	; 0xc8
 8000680:	00db      	lsls	r3, r3, #3
 8000682:	58d3      	ldr	r3, [r2, r3]
 8000684:	2100      	movs	r1, #0
 8000686:	0018      	movs	r0, r3
 8000688:	f7ff fe5c 	bl	8000344 <_ZN6Entity4moveE9Direction>
			break;
 800068c:	e01a      	b.n	80006c4 <_ZN5Level6updateEP10ControllerS1_+0xd4>
			case Button::Down:
				this->player2->move(Direction::Down);
 800068e:	68fa      	ldr	r2, [r7, #12]
 8000690:	23c8      	movs	r3, #200	; 0xc8
 8000692:	00db      	lsls	r3, r3, #3
 8000694:	58d3      	ldr	r3, [r2, r3]
 8000696:	2101      	movs	r1, #1
 8000698:	0018      	movs	r0, r3
 800069a:	f7ff fe53 	bl	8000344 <_ZN6Entity4moveE9Direction>
			break;
 800069e:	e011      	b.n	80006c4 <_ZN5Level6updateEP10ControllerS1_+0xd4>
			case Button::Left:
				this->player2->move(Direction::Left);
 80006a0:	68fa      	ldr	r2, [r7, #12]
 80006a2:	23c8      	movs	r3, #200	; 0xc8
 80006a4:	00db      	lsls	r3, r3, #3
 80006a6:	58d3      	ldr	r3, [r2, r3]
 80006a8:	2102      	movs	r1, #2
 80006aa:	0018      	movs	r0, r3
 80006ac:	f7ff fe4a 	bl	8000344 <_ZN6Entity4moveE9Direction>
			break;
 80006b0:	e008      	b.n	80006c4 <_ZN5Level6updateEP10ControllerS1_+0xd4>
			case Button::Right:
				this->player2->move(Direction::Right);
 80006b2:	68fa      	ldr	r2, [r7, #12]
 80006b4:	23c8      	movs	r3, #200	; 0xc8
 80006b6:	00db      	lsls	r3, r3, #3
 80006b8:	58d3      	ldr	r3, [r2, r3]
 80006ba:	2103      	movs	r1, #3
 80006bc:	0018      	movs	r0, r3
 80006be:	f7ff fe41 	bl	8000344 <_ZN6Entity4moveE9Direction>
			break;
 80006c2:	46c0      	nop			; (mov r8, r8)
	for(int i = 0; i < this->staticObjectCount; i++)
	{

	}*/
	//spi_write(9);
	spi_instance->write(0, this->player1->getX());
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	4a0a      	ldr	r2, [pc, #40]	; (80006f0 <_ZN5Level6updateEP10ControllerS1_+0x100>)
 80006c8:	589c      	ldr	r4, [r3, r2]
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	4a07      	ldr	r2, [pc, #28]	; (80006ec <_ZN5Level6updateEP10ControllerS1_+0xfc>)
 80006ce:	589b      	ldr	r3, [r3, r2]
 80006d0:	0018      	movs	r0, r3
 80006d2:	f7ff fe2d 	bl	8000330 <_ZN6Entity4getXEv>
 80006d6:	0003      	movs	r3, r0
 80006d8:	b29b      	uxth	r3, r3
 80006da:	001a      	movs	r2, r3
 80006dc:	2100      	movs	r1, #0
 80006de:	0020      	movs	r0, r4
 80006e0:	f000 f8ec 	bl	80008bc <_ZN10SPIConnect5writeEht>
	//spi_instance->write(7, this->player1->getY());
}
 80006e4:	46c0      	nop			; (mov r8, r8)
 80006e6:	46bd      	mov	sp, r7
 80006e8:	b005      	add	sp, #20
 80006ea:	bd90      	pop	{r4, r7, pc}
 80006ec:	0000063c 	.word	0x0000063c
 80006f0:	00000644 	.word	0x00000644

080006f4 <_ZN6ObjectC1Ev>:
 *      Author: youri
 */

#include "Object.h"

Object::Object() {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	4a03      	ldr	r2, [pc, #12]	; (800070c <_ZN6ObjectC1Ev+0x18>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	0018      	movs	r0, r3
 8000706:	46bd      	mov	sp, r7
 8000708:	b002      	add	sp, #8
 800070a:	bd80      	pop	{r7, pc}
 800070c:	08002764 	.word	0x08002764

08000710 <_ZN6ObjectD1Ev>:

Object::~Object() {
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	4a03      	ldr	r2, [pc, #12]	; (8000728 <_ZN6ObjectD1Ev+0x18>)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	0018      	movs	r0, r3
 8000722:	46bd      	mov	sp, r7
 8000724:	b002      	add	sp, #8
 8000726:	bd80      	pop	{r7, pc}
 8000728:	08002764 	.word	0x08002764

0800072c <_ZN6ObjectD0Ev>:
Object::~Object() {
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
}
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	0018      	movs	r0, r3
 8000738:	f7ff ffea 	bl	8000710 <_ZN6ObjectD1Ev>
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2104      	movs	r1, #4
 8000740:	0018      	movs	r0, r3
 8000742:	f001 fe53 	bl	80023ec <_ZdlPvj>
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	0018      	movs	r0, r3
 800074a:	46bd      	mov	sp, r7
 800074c:	b002      	add	sp, #8
 800074e:	bd80      	pop	{r7, pc}

08000750 <_ZN6PlayerC1EPcii>:
 *      Author: youri
 */

#include "Player.h"

Player::Player(char *name, int x, int y)
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
 800075c:	603b      	str	r3, [r7, #0]
: Entity(x,y) {
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	683a      	ldr	r2, [r7, #0]
 8000762:	6879      	ldr	r1, [r7, #4]
 8000764:	0018      	movs	r0, r3
 8000766:	f7ff fdad 	bl	80002c4 <_ZN6EntityC1Eii>
 800076a:	4a05      	ldr	r2, [pc, #20]	; (8000780 <_ZN6PlayerC1EPcii+0x30>)
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	this->name = name;
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	68ba      	ldr	r2, [r7, #8]
 8000774:	60da      	str	r2, [r3, #12]
}
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	0018      	movs	r0, r3
 800077a:	46bd      	mov	sp, r7
 800077c:	b004      	add	sp, #16
 800077e:	bd80      	pop	{r7, pc}
 8000780:	08002774 	.word	0x08002774

08000784 <_ZN6PlayerD1Ev>:

Player::~Player() {
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	4a05      	ldr	r2, [pc, #20]	; (80007a4 <_ZN6PlayerD1Ev+0x20>)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	0018      	movs	r0, r3
 8000796:	f7ff fdab 	bl	80002f0 <_ZN6EntityD1Ev>
	// TODO Auto-generated destructor stub
}
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	0018      	movs	r0, r3
 800079e:	46bd      	mov	sp, r7
 80007a0:	b002      	add	sp, #8
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	08002774 	.word	0x08002774

080007a8 <_ZN6PlayerD0Ev>:
Player::~Player() {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
}
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	0018      	movs	r0, r3
 80007b4:	f7ff ffe6 	bl	8000784 <_ZN6PlayerD1Ev>
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2110      	movs	r1, #16
 80007bc:	0018      	movs	r0, r3
 80007be:	f001 fe15 	bl	80023ec <_ZdlPvj>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	0018      	movs	r0, r3
 80007c6:	46bd      	mov	sp, r7
 80007c8:	b002      	add	sp, #8
 80007ca:	bd80      	pop	{r7, pc}

080007cc <_Z13Error_Handlerv>:

SPI_HandleTypeDef hspi2;


void Error_Handler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007d0:	46c0      	nop			; (mov r8, r8)
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <_ZL12MX_SPI2_Initv>:

static void MX_SPI2_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007dc:	4b1d      	ldr	r3, [pc, #116]	; (8000854 <_ZL12MX_SPI2_Initv+0x7c>)
 80007de:	4a1e      	ldr	r2, [pc, #120]	; (8000858 <_ZL12MX_SPI2_Initv+0x80>)
 80007e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007e2:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <_ZL12MX_SPI2_Initv+0x7c>)
 80007e4:	2282      	movs	r2, #130	; 0x82
 80007e6:	0052      	lsls	r2, r2, #1
 80007e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007ea:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <_ZL12MX_SPI2_Initv+0x7c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80007f0:	4b18      	ldr	r3, [pc, #96]	; (8000854 <_ZL12MX_SPI2_Initv+0x7c>)
 80007f2:	22f0      	movs	r2, #240	; 0xf0
 80007f4:	0112      	lsls	r2, r2, #4
 80007f6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007f8:	4b16      	ldr	r3, [pc, #88]	; (8000854 <_ZL12MX_SPI2_Initv+0x7c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <_ZL12MX_SPI2_Initv+0x7c>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000804:	4b13      	ldr	r3, [pc, #76]	; (8000854 <_ZL12MX_SPI2_Initv+0x7c>)
 8000806:	2280      	movs	r2, #128	; 0x80
 8000808:	02d2      	lsls	r2, r2, #11
 800080a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <_ZL12MX_SPI2_Initv+0x7c>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <_ZL12MX_SPI2_Initv+0x7c>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000818:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <_ZL12MX_SPI2_Initv+0x7c>)
 800081a:	2200      	movs	r2, #0
 800081c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800081e:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <_ZL12MX_SPI2_Initv+0x7c>)
 8000820:	2200      	movs	r2, #0
 8000822:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000824:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <_ZL12MX_SPI2_Initv+0x7c>)
 8000826:	2207      	movs	r2, #7
 8000828:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800082a:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <_ZL12MX_SPI2_Initv+0x7c>)
 800082c:	2200      	movs	r2, #0
 800082e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000830:	4b08      	ldr	r3, [pc, #32]	; (8000854 <_ZL12MX_SPI2_Initv+0x7c>)
 8000832:	2208      	movs	r2, #8
 8000834:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000836:	4b07      	ldr	r3, [pc, #28]	; (8000854 <_ZL12MX_SPI2_Initv+0x7c>)
 8000838:	0018      	movs	r0, r3
 800083a:	f001 fa91 	bl	8001d60 <HAL_SPI_Init>
 800083e:	0003      	movs	r3, r0
 8000840:	1e5a      	subs	r2, r3, #1
 8000842:	4193      	sbcs	r3, r2
 8000844:	b2db      	uxtb	r3, r3
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <_ZL12MX_SPI2_Initv+0x76>
  {
    Error_Handler();
 800084a:	f7ff ffbf 	bl	80007cc <_Z13Error_Handlerv>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	2000008c 	.word	0x2000008c
 8000858:	40003800 	.word	0x40003800

0800085c <_ZN10SPIConnectC1Ev>:



SPIConnect::SPIConnect() {
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	4a04      	ldr	r2, [pc, #16]	; (8000878 <_ZN10SPIConnectC1Ev+0x1c>)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	MX_SPI2_Init();
 800086a:	f7ff ffb5 	bl	80007d8 <_ZL12MX_SPI2_Initv>
}
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	0018      	movs	r0, r3
 8000872:	46bd      	mov	sp, r7
 8000874:	b002      	add	sp, #8
 8000876:	bd80      	pop	{r7, pc}
 8000878:	08002784 	.word	0x08002784

0800087c <_ZN10SPIConnectD1Ev>:

SPIConnect::~SPIConnect() {
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	4a03      	ldr	r2, [pc, #12]	; (8000894 <_ZN10SPIConnectD1Ev+0x18>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	0018      	movs	r0, r3
 800088e:	46bd      	mov	sp, r7
 8000890:	b002      	add	sp, #8
 8000892:	bd80      	pop	{r7, pc}
 8000894:	08002784 	.word	0x08002784

08000898 <_ZN10SPIConnectD0Ev>:
SPIConnect::~SPIConnect() {
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
}
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	0018      	movs	r0, r3
 80008a4:	f7ff ffea 	bl	800087c <_ZN10SPIConnectD1Ev>
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2104      	movs	r1, #4
 80008ac:	0018      	movs	r0, r3
 80008ae:	f001 fd9d 	bl	80023ec <_ZdlPvj>
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	0018      	movs	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b002      	add	sp, #8
 80008ba:	bd80      	pop	{r7, pc}

080008bc <_ZN10SPIConnect5writeEht>:

void SPIConnect::write (uint8_t address, uint16_t value)
{
 80008bc:	b590      	push	{r4, r7, lr}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	0008      	movs	r0, r1
 80008c6:	0011      	movs	r1, r2
 80008c8:	1cfb      	adds	r3, r7, #3
 80008ca:	1c02      	adds	r2, r0, #0
 80008cc:	701a      	strb	r2, [r3, #0]
 80008ce:	003b      	movs	r3, r7
 80008d0:	1c0a      	adds	r2, r1, #0
 80008d2:	801a      	strh	r2, [r3, #0]
	uint16_t d1 = 200;
 80008d4:	230e      	movs	r3, #14
 80008d6:	18fb      	adds	r3, r7, r3
 80008d8:	22c8      	movs	r2, #200	; 0xc8
 80008da:	801a      	strh	r2, [r3, #0]
	//d1 |= (0x1 << 12);
	uint16_t data = value | (address << 13);
 80008dc:	1cfb      	adds	r3, r7, #3
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	035b      	lsls	r3, r3, #13
 80008e2:	b21a      	sxth	r2, r3
 80008e4:	003b      	movs	r3, r7
 80008e6:	2100      	movs	r1, #0
 80008e8:	5e5b      	ldrsh	r3, [r3, r1]
 80008ea:	4313      	orrs	r3, r2
 80008ec:	b21b      	sxth	r3, r3
 80008ee:	b29a      	uxth	r2, r3
 80008f0:	240c      	movs	r4, #12
 80008f2:	193b      	adds	r3, r7, r4
 80008f4:	801a      	strh	r2, [r3, #0]
	//uint16_t data = 200;

	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);  // pull the cs pin low
 80008f6:	2380      	movs	r3, #128	; 0x80
 80008f8:	015b      	lsls	r3, r3, #5
 80008fa:	480b      	ldr	r0, [pc, #44]	; (8000928 <_ZN10SPIConnect5writeEht+0x6c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	0019      	movs	r1, r3
 8000900:	f000 fdc3 	bl	800148a <HAL_GPIO_WritePin>

	HAL_SPI_Transmit (&hspi2, (uint8_t*)&data, sizeof(uint8_t), 100);  // write data to register
 8000904:	1939      	adds	r1, r7, r4
 8000906:	4809      	ldr	r0, [pc, #36]	; (800092c <_ZN10SPIConnect5writeEht+0x70>)
 8000908:	2364      	movs	r3, #100	; 0x64
 800090a:	2201      	movs	r2, #1
 800090c:	f001 fac2 	bl	8001e94 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_12, GPIO_PIN_SET);  // pull the cs pin high
 8000910:	2380      	movs	r3, #128	; 0x80
 8000912:	015b      	lsls	r3, r3, #5
 8000914:	4804      	ldr	r0, [pc, #16]	; (8000928 <_ZN10SPIConnect5writeEht+0x6c>)
 8000916:	2201      	movs	r2, #1
 8000918:	0019      	movs	r1, r3
 800091a:	f000 fdb6 	bl	800148a <HAL_GPIO_WritePin>

	//HAL_Delay(1000);
}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	b005      	add	sp, #20
 8000924:	bd90      	pop	{r4, r7, pc}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	48000400 	.word	0x48000400
 800092c:	2000008c 	.word	0x2000008c

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b5b0      	push	{r4, r5, r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000936:	f000 fae1 	bl	8000efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093a:	f000 f8fd 	bl	8000b38 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093e:	f000 f943 	bl	8000bc8 <_ZL12MX_GPIO_Initv>
  //MX_SPI2_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
 
  Controller controller1 = Controller();
 8000942:	250c      	movs	r5, #12
 8000944:	197b      	adds	r3, r7, r5
 8000946:	0018      	movs	r0, r3
 8000948:	f7ff fc6a 	bl	8000220 <_ZN10ControllerC1Ev>
	Controller controller2 = Controller();
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	0018      	movs	r0, r3
 8000950:	f7ff fc66 	bl	8000220 <_ZN10ControllerC1Ev>

	controller1.setButtonPressed(Button::Down);
 8000954:	197b      	adds	r3, r7, r5
 8000956:	2101      	movs	r1, #1
 8000958:	0018      	movs	r0, r3
 800095a:	f7ff fc8f 	bl	800027c <_ZN10Controller16setButtonPressedE6Button>
	Game *game = new Game();
 800095e:	2010      	movs	r0, #16
 8000960:	f001 fd48 	bl	80023f4 <_Znwj>
 8000964:	0003      	movs	r3, r0
 8000966:	001c      	movs	r4, r3
 8000968:	0020      	movs	r0, r4
 800096a:	f7ff fd1f 	bl	80003ac <_ZN4GameC1Ev>
 800096e:	617c      	str	r4, [r7, #20]
	game->setController1(&controller1);
 8000970:	197a      	adds	r2, r7, r5
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	0011      	movs	r1, r2
 8000976:	0018      	movs	r0, r3
 8000978:	f7ff fd67 	bl	800044a <_ZN4Game14setController1EP10Controller>
	game->setController2(&controller2);
 800097c:	1d3a      	adds	r2, r7, #4
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	0011      	movs	r1, r2
 8000982:	0018      	movs	r0, r3
 8000984:	f7ff fd6d 	bl	8000462 <_ZN4Game14setController2EP10Controller>
	//game->play();

	controller1.setButtonPressed(Button::Up);
 8000988:	197b      	adds	r3, r7, r5
 800098a:	2100      	movs	r1, #0
 800098c:	0018      	movs	r0, r3
 800098e:	f7ff fc75 	bl	800027c <_ZN10Controller16setButtonPressedE6Button>

	game->update();
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	0018      	movs	r0, r3
 8000996:	f7ff fd47 	bl	8000428 <_ZN4Game6updateEv>

	//spi_write(6);
  while (1)
  {
	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == GPIO_PIN_SET)
 800099a:	4b66      	ldr	r3, [pc, #408]	; (8000b34 <main+0x204>)
 800099c:	2120      	movs	r1, #32
 800099e:	0018      	movs	r0, r3
 80009a0:	f000 fd56 	bl	8001450 <HAL_GPIO_ReadPin>
 80009a4:	0003      	movs	r3, r0
 80009a6:	3b01      	subs	r3, #1
 80009a8:	425a      	negs	r2, r3
 80009aa:	4153      	adcs	r3, r2
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d01d      	beq.n	80009ee <main+0xbe>
	  {
		  while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == GPIO_PIN_SET);
 80009b2:	4b60      	ldr	r3, [pc, #384]	; (8000b34 <main+0x204>)
 80009b4:	2120      	movs	r1, #32
 80009b6:	0018      	movs	r0, r3
 80009b8:	f000 fd4a 	bl	8001450 <HAL_GPIO_ReadPin>
 80009bc:	0003      	movs	r3, r0
 80009be:	3b01      	subs	r3, #1
 80009c0:	425a      	negs	r2, r3
 80009c2:	4153      	adcs	r3, r2
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d000      	beq.n	80009cc <main+0x9c>
 80009ca:	e7f2      	b.n	80009b2 <main+0x82>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80009cc:	2390      	movs	r3, #144	; 0x90
 80009ce:	05db      	lsls	r3, r3, #23
 80009d0:	2201      	movs	r2, #1
 80009d2:	2120      	movs	r1, #32
 80009d4:	0018      	movs	r0, r3
 80009d6:	f000 fd58 	bl	800148a <HAL_GPIO_WritePin>
		  HAL_Delay(5);
 80009da:	2005      	movs	r0, #5
 80009dc:	f000 faf2 	bl	8000fc4 <HAL_Delay>
		  controller1.setButtonPressed(Button::Down);
 80009e0:	230c      	movs	r3, #12
 80009e2:	18fb      	adds	r3, r7, r3
 80009e4:	2101      	movs	r1, #1
 80009e6:	0018      	movs	r0, r3
 80009e8:	f7ff fc48 	bl	800027c <_ZN10Controller16setButtonPressedE6Button>
 80009ec:	e09c      	b.n	8000b28 <main+0x1f8>
		  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	  }
	  else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_SET)
 80009ee:	2380      	movs	r3, #128	; 0x80
 80009f0:	005a      	lsls	r2, r3, #1
 80009f2:	2390      	movs	r3, #144	; 0x90
 80009f4:	05db      	lsls	r3, r3, #23
 80009f6:	0011      	movs	r1, r2
 80009f8:	0018      	movs	r0, r3
 80009fa:	f000 fd29 	bl	8001450 <HAL_GPIO_ReadPin>
 80009fe:	0003      	movs	r3, r0
 8000a00:	3b01      	subs	r3, #1
 8000a02:	425a      	negs	r2, r3
 8000a04:	4153      	adcs	r3, r2
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d020      	beq.n	8000a4e <main+0x11e>
	  {
		  while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_SET);
 8000a0c:	2380      	movs	r3, #128	; 0x80
 8000a0e:	005a      	lsls	r2, r3, #1
 8000a10:	2390      	movs	r3, #144	; 0x90
 8000a12:	05db      	lsls	r3, r3, #23
 8000a14:	0011      	movs	r1, r2
 8000a16:	0018      	movs	r0, r3
 8000a18:	f000 fd1a 	bl	8001450 <HAL_GPIO_ReadPin>
 8000a1c:	0003      	movs	r3, r0
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	425a      	negs	r2, r3
 8000a22:	4153      	adcs	r3, r2
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d000      	beq.n	8000a2c <main+0xfc>
 8000a2a:	e7ef      	b.n	8000a0c <main+0xdc>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000a2c:	2390      	movs	r3, #144	; 0x90
 8000a2e:	05db      	lsls	r3, r3, #23
 8000a30:	2201      	movs	r2, #1
 8000a32:	2120      	movs	r1, #32
 8000a34:	0018      	movs	r0, r3
 8000a36:	f000 fd28 	bl	800148a <HAL_GPIO_WritePin>
		  HAL_Delay(5);
 8000a3a:	2005      	movs	r0, #5
 8000a3c:	f000 fac2 	bl	8000fc4 <HAL_Delay>
		  controller1.setButtonPressed(Button::Left);
 8000a40:	230c      	movs	r3, #12
 8000a42:	18fb      	adds	r3, r7, r3
 8000a44:	2102      	movs	r1, #2
 8000a46:	0018      	movs	r0, r3
 8000a48:	f7ff fc18 	bl	800027c <_ZN10Controller16setButtonPressedE6Button>
 8000a4c:	e06c      	b.n	8000b28 <main+0x1f8>
		  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	  }
	  else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET)
 8000a4e:	2380      	movs	r3, #128	; 0x80
 8000a50:	009a      	lsls	r2, r3, #2
 8000a52:	2390      	movs	r3, #144	; 0x90
 8000a54:	05db      	lsls	r3, r3, #23
 8000a56:	0011      	movs	r1, r2
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f000 fcf9 	bl	8001450 <HAL_GPIO_ReadPin>
 8000a5e:	0003      	movs	r3, r0
 8000a60:	3b01      	subs	r3, #1
 8000a62:	425a      	negs	r2, r3
 8000a64:	4153      	adcs	r3, r2
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d020      	beq.n	8000aae <main+0x17e>
	  {
		  while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET);
 8000a6c:	2380      	movs	r3, #128	; 0x80
 8000a6e:	009a      	lsls	r2, r3, #2
 8000a70:	2390      	movs	r3, #144	; 0x90
 8000a72:	05db      	lsls	r3, r3, #23
 8000a74:	0011      	movs	r1, r2
 8000a76:	0018      	movs	r0, r3
 8000a78:	f000 fcea 	bl	8001450 <HAL_GPIO_ReadPin>
 8000a7c:	0003      	movs	r3, r0
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	425a      	negs	r2, r3
 8000a82:	4153      	adcs	r3, r2
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d000      	beq.n	8000a8c <main+0x15c>
 8000a8a:	e7ef      	b.n	8000a6c <main+0x13c>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000a8c:	2390      	movs	r3, #144	; 0x90
 8000a8e:	05db      	lsls	r3, r3, #23
 8000a90:	2201      	movs	r2, #1
 8000a92:	2120      	movs	r1, #32
 8000a94:	0018      	movs	r0, r3
 8000a96:	f000 fcf8 	bl	800148a <HAL_GPIO_WritePin>
		  HAL_Delay(5);
 8000a9a:	2005      	movs	r0, #5
 8000a9c:	f000 fa92 	bl	8000fc4 <HAL_Delay>
		  controller1.setButtonPressed(Button::Right);
 8000aa0:	230c      	movs	r3, #12
 8000aa2:	18fb      	adds	r3, r7, r3
 8000aa4:	2103      	movs	r1, #3
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f7ff fbe8 	bl	800027c <_ZN10Controller16setButtonPressedE6Button>
 8000aac:	e03c      	b.n	8000b28 <main+0x1f8>
		  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	  }
	  else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == GPIO_PIN_SET)
 8000aae:	2380      	movs	r3, #128	; 0x80
 8000ab0:	00da      	lsls	r2, r3, #3
 8000ab2:	2390      	movs	r3, #144	; 0x90
 8000ab4:	05db      	lsls	r3, r3, #23
 8000ab6:	0011      	movs	r1, r2
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f000 fcc9 	bl	8001450 <HAL_GPIO_ReadPin>
 8000abe:	0003      	movs	r3, r0
 8000ac0:	3b01      	subs	r3, #1
 8000ac2:	425a      	negs	r2, r3
 8000ac4:	4153      	adcs	r3, r2
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d020      	beq.n	8000b0e <main+0x1de>
	  {
		  while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == GPIO_PIN_SET);
 8000acc:	2380      	movs	r3, #128	; 0x80
 8000ace:	00da      	lsls	r2, r3, #3
 8000ad0:	2390      	movs	r3, #144	; 0x90
 8000ad2:	05db      	lsls	r3, r3, #23
 8000ad4:	0011      	movs	r1, r2
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f000 fcba 	bl	8001450 <HAL_GPIO_ReadPin>
 8000adc:	0003      	movs	r3, r0
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	425a      	negs	r2, r3
 8000ae2:	4153      	adcs	r3, r2
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d000      	beq.n	8000aec <main+0x1bc>
 8000aea:	e7ef      	b.n	8000acc <main+0x19c>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000aec:	2390      	movs	r3, #144	; 0x90
 8000aee:	05db      	lsls	r3, r3, #23
 8000af0:	2201      	movs	r2, #1
 8000af2:	2120      	movs	r1, #32
 8000af4:	0018      	movs	r0, r3
 8000af6:	f000 fcc8 	bl	800148a <HAL_GPIO_WritePin>
		  HAL_Delay(5);
 8000afa:	2005      	movs	r0, #5
 8000afc:	f000 fa62 	bl	8000fc4 <HAL_Delay>
		  controller1.setButtonPressed(Button::Up);
 8000b00:	230c      	movs	r3, #12
 8000b02:	18fb      	adds	r3, r7, r3
 8000b04:	2100      	movs	r1, #0
 8000b06:	0018      	movs	r0, r3
 8000b08:	f7ff fbb8 	bl	800027c <_ZN10Controller16setButtonPressedE6Button>
 8000b0c:	e00c      	b.n	8000b28 <main+0x1f8>
		  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b0e:	2390      	movs	r3, #144	; 0x90
 8000b10:	05db      	lsls	r3, r3, #23
 8000b12:	2200      	movs	r2, #0
 8000b14:	2120      	movs	r1, #32
 8000b16:	0018      	movs	r0, r3
 8000b18:	f000 fcb7 	bl	800148a <HAL_GPIO_WritePin>
		  controller1.setButtonPressed(Button::None);
 8000b1c:	230c      	movs	r3, #12
 8000b1e:	18fb      	adds	r3, r7, r3
 8000b20:	2106      	movs	r1, #6
 8000b22:	0018      	movs	r0, r3
 8000b24:	f7ff fbaa 	bl	800027c <_ZN10Controller16setButtonPressedE6Button>
	  }
	  game->update();
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f7ff fc7c 	bl	8000428 <_ZN4Game6updateEv>
	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == GPIO_PIN_SET)
 8000b30:	e733      	b.n	800099a <main+0x6a>
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	48000400 	.word	0x48000400

08000b38 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b38:	b590      	push	{r4, r7, lr}
 8000b3a:	b091      	sub	sp, #68	; 0x44
 8000b3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3e:	2410      	movs	r4, #16
 8000b40:	193b      	adds	r3, r7, r4
 8000b42:	0018      	movs	r0, r3
 8000b44:	2330      	movs	r3, #48	; 0x30
 8000b46:	001a      	movs	r2, r3
 8000b48:	2100      	movs	r1, #0
 8000b4a:	f001 fcb5 	bl	80024b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b4e:	003b      	movs	r3, r7
 8000b50:	0018      	movs	r0, r3
 8000b52:	2310      	movs	r3, #16
 8000b54:	001a      	movs	r2, r3
 8000b56:	2100      	movs	r1, #0
 8000b58:	f001 fcae 	bl	80024b8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b5c:	0021      	movs	r1, r4
 8000b5e:	187b      	adds	r3, r7, r1
 8000b60:	2202      	movs	r2, #2
 8000b62:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	2201      	movs	r2, #1
 8000b68:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b6a:	187b      	adds	r3, r7, r1
 8000b6c:	2210      	movs	r2, #16
 8000b6e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	2200      	movs	r2, #0
 8000b74:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b76:	187b      	adds	r3, r7, r1
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f000 fca3 	bl	80014c4 <HAL_RCC_OscConfig>
 8000b7e:	0003      	movs	r3, r0
 8000b80:	1e5a      	subs	r2, r3, #1
 8000b82:	4193      	sbcs	r3, r2
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <_Z18SystemClock_Configv+0x56>
  {
    Error_Handler();
 8000b8a:	f000 f8a7 	bl	8000cdc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8e:	003b      	movs	r3, r7
 8000b90:	2207      	movs	r2, #7
 8000b92:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b94:	003b      	movs	r3, r7
 8000b96:	2200      	movs	r2, #0
 8000b98:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b9a:	003b      	movs	r3, r7
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ba0:	003b      	movs	r3, r7
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ba6:	003b      	movs	r3, r7
 8000ba8:	2100      	movs	r1, #0
 8000baa:	0018      	movs	r0, r3
 8000bac:	f000 ffa6 	bl	8001afc <HAL_RCC_ClockConfig>
 8000bb0:	0003      	movs	r3, r0
 8000bb2:	1e5a      	subs	r2, r3, #1
 8000bb4:	4193      	sbcs	r3, r2
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 8000bbc:	f000 f88e 	bl	8000cdc <Error_Handler>
  }
}
 8000bc0:	46c0      	nop			; (mov r8, r8)
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	b011      	add	sp, #68	; 0x44
 8000bc6:	bd90      	pop	{r4, r7, pc}

08000bc8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc8:	b590      	push	{r4, r7, lr}
 8000bca:	b089      	sub	sp, #36	; 0x24
 8000bcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bce:	240c      	movs	r4, #12
 8000bd0:	193b      	adds	r3, r7, r4
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	2314      	movs	r3, #20
 8000bd6:	001a      	movs	r2, r3
 8000bd8:	2100      	movs	r1, #0
 8000bda:	f001 fc6d 	bl	80024b8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bde:	4b3c      	ldr	r3, [pc, #240]	; (8000cd0 <_ZL12MX_GPIO_Initv+0x108>)
 8000be0:	695a      	ldr	r2, [r3, #20]
 8000be2:	4b3b      	ldr	r3, [pc, #236]	; (8000cd0 <_ZL12MX_GPIO_Initv+0x108>)
 8000be4:	2180      	movs	r1, #128	; 0x80
 8000be6:	0309      	lsls	r1, r1, #12
 8000be8:	430a      	orrs	r2, r1
 8000bea:	615a      	str	r2, [r3, #20]
 8000bec:	4b38      	ldr	r3, [pc, #224]	; (8000cd0 <_ZL12MX_GPIO_Initv+0x108>)
 8000bee:	695a      	ldr	r2, [r3, #20]
 8000bf0:	2380      	movs	r3, #128	; 0x80
 8000bf2:	031b      	lsls	r3, r3, #12
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	4b35      	ldr	r3, [pc, #212]	; (8000cd0 <_ZL12MX_GPIO_Initv+0x108>)
 8000bfc:	695a      	ldr	r2, [r3, #20]
 8000bfe:	4b34      	ldr	r3, [pc, #208]	; (8000cd0 <_ZL12MX_GPIO_Initv+0x108>)
 8000c00:	2180      	movs	r1, #128	; 0x80
 8000c02:	0289      	lsls	r1, r1, #10
 8000c04:	430a      	orrs	r2, r1
 8000c06:	615a      	str	r2, [r3, #20]
 8000c08:	4b31      	ldr	r3, [pc, #196]	; (8000cd0 <_ZL12MX_GPIO_Initv+0x108>)
 8000c0a:	695a      	ldr	r2, [r3, #20]
 8000c0c:	2380      	movs	r3, #128	; 0x80
 8000c0e:	029b      	lsls	r3, r3, #10
 8000c10:	4013      	ands	r3, r2
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c16:	4b2e      	ldr	r3, [pc, #184]	; (8000cd0 <_ZL12MX_GPIO_Initv+0x108>)
 8000c18:	695a      	ldr	r2, [r3, #20]
 8000c1a:	4b2d      	ldr	r3, [pc, #180]	; (8000cd0 <_ZL12MX_GPIO_Initv+0x108>)
 8000c1c:	2180      	movs	r1, #128	; 0x80
 8000c1e:	02c9      	lsls	r1, r1, #11
 8000c20:	430a      	orrs	r2, r1
 8000c22:	615a      	str	r2, [r3, #20]
 8000c24:	4b2a      	ldr	r3, [pc, #168]	; (8000cd0 <_ZL12MX_GPIO_Initv+0x108>)
 8000c26:	695a      	ldr	r2, [r3, #20]
 8000c28:	2380      	movs	r3, #128	; 0x80
 8000c2a:	02db      	lsls	r3, r3, #11
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c32:	2390      	movs	r3, #144	; 0x90
 8000c34:	05db      	lsls	r3, r3, #23
 8000c36:	2200      	movs	r2, #0
 8000c38:	2120      	movs	r1, #32
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f000 fc25 	bl	800148a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c40:	193b      	adds	r3, r7, r4
 8000c42:	2280      	movs	r2, #128	; 0x80
 8000c44:	0192      	lsls	r2, r2, #6
 8000c46:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c48:	193b      	adds	r3, r7, r4
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	193b      	adds	r3, r7, r4
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c54:	193b      	adds	r3, r7, r4
 8000c56:	4a1f      	ldr	r2, [pc, #124]	; (8000cd4 <_ZL12MX_GPIO_Initv+0x10c>)
 8000c58:	0019      	movs	r1, r3
 8000c5a:	0010      	movs	r0, r2
 8000c5c:	f000 fa88 	bl	8001170 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c60:	193b      	adds	r3, r7, r4
 8000c62:	2220      	movs	r2, #32
 8000c64:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c66:	193b      	adds	r3, r7, r4
 8000c68:	2201      	movs	r2, #1
 8000c6a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	193b      	adds	r3, r7, r4
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	193b      	adds	r3, r7, r4
 8000c74:	2200      	movs	r2, #0
 8000c76:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c78:	193a      	adds	r2, r7, r4
 8000c7a:	2390      	movs	r3, #144	; 0x90
 8000c7c:	05db      	lsls	r3, r3, #23
 8000c7e:	0011      	movs	r1, r2
 8000c80:	0018      	movs	r0, r3
 8000c82:	f000 fa75 	bl	8001170 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000c86:	193b      	adds	r3, r7, r4
 8000c88:	22e0      	movs	r2, #224	; 0xe0
 8000c8a:	00d2      	lsls	r2, r2, #3
 8000c8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8e:	193b      	adds	r3, r7, r4
 8000c90:	2200      	movs	r2, #0
 8000c92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	193b      	adds	r3, r7, r4
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9a:	193a      	adds	r2, r7, r4
 8000c9c:	2390      	movs	r3, #144	; 0x90
 8000c9e:	05db      	lsls	r3, r3, #23
 8000ca0:	0011      	movs	r1, r2
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f000 fa64 	bl	8001170 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ca8:	193b      	adds	r3, r7, r4
 8000caa:	2220      	movs	r2, #32
 8000cac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cae:	193b      	adds	r3, r7, r4
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	193b      	adds	r3, r7, r4
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cba:	193b      	adds	r3, r7, r4
 8000cbc:	4a06      	ldr	r2, [pc, #24]	; (8000cd8 <_ZL12MX_GPIO_Initv+0x110>)
 8000cbe:	0019      	movs	r1, r3
 8000cc0:	0010      	movs	r0, r2
 8000cc2:	f000 fa55 	bl	8001170 <HAL_GPIO_Init>

}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	b009      	add	sp, #36	; 0x24
 8000ccc:	bd90      	pop	{r4, r7, pc}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	48000800 	.word	0x48000800
 8000cd8:	48000400 	.word	0x48000400

08000cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ce0:	46c0      	nop			; (mov r8, r8)
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cee:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <HAL_MspInit+0x44>)
 8000cf0:	699a      	ldr	r2, [r3, #24]
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <HAL_MspInit+0x44>)
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	619a      	str	r2, [r3, #24]
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <HAL_MspInit+0x44>)
 8000cfc:	699b      	ldr	r3, [r3, #24]
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4013      	ands	r3, r2
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <HAL_MspInit+0x44>)
 8000d08:	69da      	ldr	r2, [r3, #28]
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <HAL_MspInit+0x44>)
 8000d0c:	2180      	movs	r1, #128	; 0x80
 8000d0e:	0549      	lsls	r1, r1, #21
 8000d10:	430a      	orrs	r2, r1
 8000d12:	61da      	str	r2, [r3, #28]
 8000d14:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <HAL_MspInit+0x44>)
 8000d16:	69da      	ldr	r2, [r3, #28]
 8000d18:	2380      	movs	r3, #128	; 0x80
 8000d1a:	055b      	lsls	r3, r3, #21
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	603b      	str	r3, [r7, #0]
 8000d20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b002      	add	sp, #8
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	40021000 	.word	0x40021000

08000d30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	; 0x28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	2314      	movs	r3, #20
 8000d3a:	18fb      	adds	r3, r7, r3
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	2314      	movs	r3, #20
 8000d40:	001a      	movs	r2, r3
 8000d42:	2100      	movs	r1, #0
 8000d44:	f001 fbb8 	bl	80024b8 <memset>
  if(hspi->Instance==SPI2)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a1c      	ldr	r2, [pc, #112]	; (8000dc0 <HAL_SPI_MspInit+0x90>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d132      	bne.n	8000db8 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d52:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <HAL_SPI_MspInit+0x94>)
 8000d54:	69da      	ldr	r2, [r3, #28]
 8000d56:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <HAL_SPI_MspInit+0x94>)
 8000d58:	2180      	movs	r1, #128	; 0x80
 8000d5a:	01c9      	lsls	r1, r1, #7
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	61da      	str	r2, [r3, #28]
 8000d60:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <HAL_SPI_MspInit+0x94>)
 8000d62:	69da      	ldr	r2, [r3, #28]
 8000d64:	2380      	movs	r3, #128	; 0x80
 8000d66:	01db      	lsls	r3, r3, #7
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <HAL_SPI_MspInit+0x94>)
 8000d70:	695a      	ldr	r2, [r3, #20]
 8000d72:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <HAL_SPI_MspInit+0x94>)
 8000d74:	2180      	movs	r1, #128	; 0x80
 8000d76:	02c9      	lsls	r1, r1, #11
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	615a      	str	r2, [r3, #20]
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <HAL_SPI_MspInit+0x94>)
 8000d7e:	695a      	ldr	r2, [r3, #20]
 8000d80:	2380      	movs	r3, #128	; 0x80
 8000d82:	02db      	lsls	r3, r3, #11
 8000d84:	4013      	ands	r3, r2
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d8a:	2114      	movs	r1, #20
 8000d8c:	187b      	adds	r3, r7, r1
 8000d8e:	22f0      	movs	r2, #240	; 0xf0
 8000d90:	0212      	lsls	r2, r2, #8
 8000d92:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	2202      	movs	r2, #2
 8000d98:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	187b      	adds	r3, r7, r1
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	2203      	movs	r2, #3
 8000da4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000da6:	187b      	adds	r3, r7, r1
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dac:	187b      	adds	r3, r7, r1
 8000dae:	4a06      	ldr	r2, [pc, #24]	; (8000dc8 <HAL_SPI_MspInit+0x98>)
 8000db0:	0019      	movs	r1, r3
 8000db2:	0010      	movs	r0, r2
 8000db4:	f000 f9dc 	bl	8001170 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000db8:	46c0      	nop			; (mov r8, r8)
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	b00a      	add	sp, #40	; 0x28
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40003800 	.word	0x40003800
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	48000400 	.word	0x48000400

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000dd0:	46c0      	nop			; (mov r8, r8)
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <HardFault_Handler+0x4>

08000ddc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000de0:	46c0      	nop			; (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df4:	f000 f8ca 	bl	8000f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df8:	46c0      	nop			; (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <_getpid>:
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	2301      	movs	r3, #1
 8000e04:	0018      	movs	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <_kill>:
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
 8000e12:	6039      	str	r1, [r7, #0]
 8000e14:	f001 fb12 	bl	800243c <__errno>
 8000e18:	0003      	movs	r3, r0
 8000e1a:	2216      	movs	r2, #22
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	2301      	movs	r3, #1
 8000e20:	425b      	negs	r3, r3
 8000e22:	0018      	movs	r0, r3
 8000e24:	46bd      	mov	sp, r7
 8000e26:	b002      	add	sp, #8
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <_exit>:
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
 8000e32:	2301      	movs	r3, #1
 8000e34:	425a      	negs	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	0011      	movs	r1, r2
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f7ff ffe5 	bl	8000e0a <_kill>
 8000e40:	e7fe      	b.n	8000e40 <_exit+0x16>
	...

08000e44 <_sbrk>:
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <_sbrk+0x50>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d102      	bne.n	8000e5a <_sbrk+0x16>
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <_sbrk+0x50>)
 8000e56:	4a10      	ldr	r2, [pc, #64]	; (8000e98 <_sbrk+0x54>)
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <_sbrk+0x50>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <_sbrk+0x50>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	18d3      	adds	r3, r2, r3
 8000e68:	466a      	mov	r2, sp
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d907      	bls.n	8000e7e <_sbrk+0x3a>
 8000e6e:	f001 fae5 	bl	800243c <__errno>
 8000e72:	0003      	movs	r3, r0
 8000e74:	220c      	movs	r2, #12
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	2301      	movs	r3, #1
 8000e7a:	425b      	negs	r3, r3
 8000e7c:	e006      	b.n	8000e8c <_sbrk+0x48>
 8000e7e:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <_sbrk+0x50>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	18d2      	adds	r2, r2, r3
 8000e86:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <_sbrk+0x50>)
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	b004      	add	sp, #16
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	200000f0 	.word	0x200000f0
 8000e98:	20000108 	.word	0x20000108

08000e9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000ea0:	46c0      	nop			; (mov r8, r8)
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
	...

08000ea8 <Reset_Handler>:
 8000ea8:	480d      	ldr	r0, [pc, #52]	; (8000ee0 <LoopForever+0x2>)
 8000eaa:	4685      	mov	sp, r0
 8000eac:	480d      	ldr	r0, [pc, #52]	; (8000ee4 <LoopForever+0x6>)
 8000eae:	490e      	ldr	r1, [pc, #56]	; (8000ee8 <LoopForever+0xa>)
 8000eb0:	4a0e      	ldr	r2, [pc, #56]	; (8000eec <LoopForever+0xe>)
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e002      	b.n	8000ebc <LoopCopyDataInit>

08000eb6 <CopyDataInit>:
 8000eb6:	58d4      	ldr	r4, [r2, r3]
 8000eb8:	50c4      	str	r4, [r0, r3]
 8000eba:	3304      	adds	r3, #4

08000ebc <LoopCopyDataInit>:
 8000ebc:	18c4      	adds	r4, r0, r3
 8000ebe:	428c      	cmp	r4, r1
 8000ec0:	d3f9      	bcc.n	8000eb6 <CopyDataInit>
 8000ec2:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <LoopForever+0x12>)
 8000ec4:	4c0b      	ldr	r4, [pc, #44]	; (8000ef4 <LoopForever+0x16>)
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e001      	b.n	8000ece <LoopFillZerobss>

08000eca <FillZerobss>:
 8000eca:	6013      	str	r3, [r2, #0]
 8000ecc:	3204      	adds	r2, #4

08000ece <LoopFillZerobss>:
 8000ece:	42a2      	cmp	r2, r4
 8000ed0:	d3fb      	bcc.n	8000eca <FillZerobss>
 8000ed2:	f7ff ffe3 	bl	8000e9c <SystemInit>
 8000ed6:	f001 fab7 	bl	8002448 <__libc_init_array>
 8000eda:	f7ff fd29 	bl	8000930 <main>

08000ede <LoopForever>:
 8000ede:	e7fe      	b.n	8000ede <LoopForever>
 8000ee0:	20002000 	.word	0x20002000
 8000ee4:	20000000 	.word	0x20000000
 8000ee8:	20000070 	.word	0x20000070
 8000eec:	080027a4 	.word	0x080027a4
 8000ef0:	20000070 	.word	0x20000070
 8000ef4:	20000108 	.word	0x20000108

08000ef8 <ADC1_IRQHandler>:
 8000ef8:	e7fe      	b.n	8000ef8 <ADC1_IRQHandler>
	...

08000efc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f00:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <HAL_Init+0x24>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_Init+0x24>)
 8000f06:	2110      	movs	r1, #16
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	f000 f809 	bl	8000f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f12:	f7ff fee9 	bl	8000ce8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f16:	2300      	movs	r3, #0
}
 8000f18:	0018      	movs	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	40022000 	.word	0x40022000

08000f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f24:	b590      	push	{r4, r7, lr}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f2c:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <HAL_InitTick+0x5c>)
 8000f2e:	681c      	ldr	r4, [r3, #0]
 8000f30:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <HAL_InitTick+0x60>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	0019      	movs	r1, r3
 8000f36:	23fa      	movs	r3, #250	; 0xfa
 8000f38:	0098      	lsls	r0, r3, #2
 8000f3a:	f7ff f8e5 	bl	8000108 <__udivsi3>
 8000f3e:	0003      	movs	r3, r0
 8000f40:	0019      	movs	r1, r3
 8000f42:	0020      	movs	r0, r4
 8000f44:	f7ff f8e0 	bl	8000108 <__udivsi3>
 8000f48:	0003      	movs	r3, r0
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f000 f903 	bl	8001156 <HAL_SYSTICK_Config>
 8000f50:	1e03      	subs	r3, r0, #0
 8000f52:	d001      	beq.n	8000f58 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e00f      	b.n	8000f78 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2b03      	cmp	r3, #3
 8000f5c:	d80b      	bhi.n	8000f76 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	2301      	movs	r3, #1
 8000f62:	425b      	negs	r3, r3
 8000f64:	2200      	movs	r2, #0
 8000f66:	0018      	movs	r0, r3
 8000f68:	f000 f8e0 	bl	800112c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_InitTick+0x64>)
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000f72:	2300      	movs	r3, #0
 8000f74:	e000      	b.n	8000f78 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
}
 8000f78:	0018      	movs	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	b003      	add	sp, #12
 8000f7e:	bd90      	pop	{r4, r7, pc}
 8000f80:	20000000 	.word	0x20000000
 8000f84:	20000008 	.word	0x20000008
 8000f88:	20000004 	.word	0x20000004

08000f8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f90:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <HAL_IncTick+0x1c>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	001a      	movs	r2, r3
 8000f96:	4b05      	ldr	r3, [pc, #20]	; (8000fac <HAL_IncTick+0x20>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	18d2      	adds	r2, r2, r3
 8000f9c:	4b03      	ldr	r3, [pc, #12]	; (8000fac <HAL_IncTick+0x20>)
 8000f9e:	601a      	str	r2, [r3, #0]
}
 8000fa0:	46c0      	nop			; (mov r8, r8)
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	20000008 	.word	0x20000008
 8000fac:	20000100 	.word	0x20000100

08000fb0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb4:	4b02      	ldr	r3, [pc, #8]	; (8000fc0 <HAL_GetTick+0x10>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
}
 8000fb8:	0018      	movs	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	46c0      	nop			; (mov r8, r8)
 8000fc0:	20000100 	.word	0x20000100

08000fc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fcc:	f7ff fff0 	bl	8000fb0 <HAL_GetTick>
 8000fd0:	0003      	movs	r3, r0
 8000fd2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	d005      	beq.n	8000fea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <HAL_Delay+0x40>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	001a      	movs	r2, r3
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	189b      	adds	r3, r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	f7ff ffe0 	bl	8000fb0 <HAL_GetTick>
 8000ff0:	0002      	movs	r2, r0
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d8f7      	bhi.n	8000fec <HAL_Delay+0x28>
  {
  }
}
 8000ffc:	46c0      	nop			; (mov r8, r8)
 8000ffe:	46bd      	mov	sp, r7
 8001000:	b004      	add	sp, #16
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000008 	.word	0x20000008

08001008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	0002      	movs	r2, r0
 8001010:	6039      	str	r1, [r7, #0]
 8001012:	1dfb      	adds	r3, r7, #7
 8001014:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001016:	1dfb      	adds	r3, r7, #7
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b7f      	cmp	r3, #127	; 0x7f
 800101c:	d828      	bhi.n	8001070 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800101e:	4a2f      	ldr	r2, [pc, #188]	; (80010dc <__NVIC_SetPriority+0xd4>)
 8001020:	1dfb      	adds	r3, r7, #7
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	b25b      	sxtb	r3, r3
 8001026:	089b      	lsrs	r3, r3, #2
 8001028:	33c0      	adds	r3, #192	; 0xc0
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	589b      	ldr	r3, [r3, r2]
 800102e:	1dfa      	adds	r2, r7, #7
 8001030:	7812      	ldrb	r2, [r2, #0]
 8001032:	0011      	movs	r1, r2
 8001034:	2203      	movs	r2, #3
 8001036:	400a      	ands	r2, r1
 8001038:	00d2      	lsls	r2, r2, #3
 800103a:	21ff      	movs	r1, #255	; 0xff
 800103c:	4091      	lsls	r1, r2
 800103e:	000a      	movs	r2, r1
 8001040:	43d2      	mvns	r2, r2
 8001042:	401a      	ands	r2, r3
 8001044:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	019b      	lsls	r3, r3, #6
 800104a:	22ff      	movs	r2, #255	; 0xff
 800104c:	401a      	ands	r2, r3
 800104e:	1dfb      	adds	r3, r7, #7
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	0018      	movs	r0, r3
 8001054:	2303      	movs	r3, #3
 8001056:	4003      	ands	r3, r0
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800105c:	481f      	ldr	r0, [pc, #124]	; (80010dc <__NVIC_SetPriority+0xd4>)
 800105e:	1dfb      	adds	r3, r7, #7
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	b25b      	sxtb	r3, r3
 8001064:	089b      	lsrs	r3, r3, #2
 8001066:	430a      	orrs	r2, r1
 8001068:	33c0      	adds	r3, #192	; 0xc0
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800106e:	e031      	b.n	80010d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001070:	4a1b      	ldr	r2, [pc, #108]	; (80010e0 <__NVIC_SetPriority+0xd8>)
 8001072:	1dfb      	adds	r3, r7, #7
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	0019      	movs	r1, r3
 8001078:	230f      	movs	r3, #15
 800107a:	400b      	ands	r3, r1
 800107c:	3b08      	subs	r3, #8
 800107e:	089b      	lsrs	r3, r3, #2
 8001080:	3306      	adds	r3, #6
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	18d3      	adds	r3, r2, r3
 8001086:	3304      	adds	r3, #4
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	1dfa      	adds	r2, r7, #7
 800108c:	7812      	ldrb	r2, [r2, #0]
 800108e:	0011      	movs	r1, r2
 8001090:	2203      	movs	r2, #3
 8001092:	400a      	ands	r2, r1
 8001094:	00d2      	lsls	r2, r2, #3
 8001096:	21ff      	movs	r1, #255	; 0xff
 8001098:	4091      	lsls	r1, r2
 800109a:	000a      	movs	r2, r1
 800109c:	43d2      	mvns	r2, r2
 800109e:	401a      	ands	r2, r3
 80010a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	019b      	lsls	r3, r3, #6
 80010a6:	22ff      	movs	r2, #255	; 0xff
 80010a8:	401a      	ands	r2, r3
 80010aa:	1dfb      	adds	r3, r7, #7
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	0018      	movs	r0, r3
 80010b0:	2303      	movs	r3, #3
 80010b2:	4003      	ands	r3, r0
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010b8:	4809      	ldr	r0, [pc, #36]	; (80010e0 <__NVIC_SetPriority+0xd8>)
 80010ba:	1dfb      	adds	r3, r7, #7
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	001c      	movs	r4, r3
 80010c0:	230f      	movs	r3, #15
 80010c2:	4023      	ands	r3, r4
 80010c4:	3b08      	subs	r3, #8
 80010c6:	089b      	lsrs	r3, r3, #2
 80010c8:	430a      	orrs	r2, r1
 80010ca:	3306      	adds	r3, #6
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	18c3      	adds	r3, r0, r3
 80010d0:	3304      	adds	r3, #4
 80010d2:	601a      	str	r2, [r3, #0]
}
 80010d4:	46c0      	nop			; (mov r8, r8)
 80010d6:	46bd      	mov	sp, r7
 80010d8:	b003      	add	sp, #12
 80010da:	bd90      	pop	{r4, r7, pc}
 80010dc:	e000e100 	.word	0xe000e100
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	4a0c      	ldr	r2, [pc, #48]	; (8001124 <SysTick_Config+0x40>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d901      	bls.n	80010fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010f6:	2301      	movs	r3, #1
 80010f8:	e010      	b.n	800111c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010fa:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <SysTick_Config+0x44>)
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	3a01      	subs	r2, #1
 8001100:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001102:	2301      	movs	r3, #1
 8001104:	425b      	negs	r3, r3
 8001106:	2103      	movs	r1, #3
 8001108:	0018      	movs	r0, r3
 800110a:	f7ff ff7d 	bl	8001008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <SysTick_Config+0x44>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001114:	4b04      	ldr	r3, [pc, #16]	; (8001128 <SysTick_Config+0x44>)
 8001116:	2207      	movs	r2, #7
 8001118:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800111a:	2300      	movs	r3, #0
}
 800111c:	0018      	movs	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	b002      	add	sp, #8
 8001122:	bd80      	pop	{r7, pc}
 8001124:	00ffffff 	.word	0x00ffffff
 8001128:	e000e010 	.word	0xe000e010

0800112c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	60b9      	str	r1, [r7, #8]
 8001134:	607a      	str	r2, [r7, #4]
 8001136:	210f      	movs	r1, #15
 8001138:	187b      	adds	r3, r7, r1
 800113a:	1c02      	adds	r2, r0, #0
 800113c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800113e:	68ba      	ldr	r2, [r7, #8]
 8001140:	187b      	adds	r3, r7, r1
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	b25b      	sxtb	r3, r3
 8001146:	0011      	movs	r1, r2
 8001148:	0018      	movs	r0, r3
 800114a:	f7ff ff5d 	bl	8001008 <__NVIC_SetPriority>
}
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	46bd      	mov	sp, r7
 8001152:	b004      	add	sp, #16
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	0018      	movs	r0, r3
 8001162:	f7ff ffbf 	bl	80010e4 <SysTick_Config>
 8001166:	0003      	movs	r3, r0
}
 8001168:	0018      	movs	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	b002      	add	sp, #8
 800116e:	bd80      	pop	{r7, pc}

08001170 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800117e:	e14f      	b.n	8001420 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2101      	movs	r1, #1
 8001186:	697a      	ldr	r2, [r7, #20]
 8001188:	4091      	lsls	r1, r2
 800118a:	000a      	movs	r2, r1
 800118c:	4013      	ands	r3, r2
 800118e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d100      	bne.n	8001198 <HAL_GPIO_Init+0x28>
 8001196:	e140      	b.n	800141a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	2b02      	cmp	r3, #2
 800119e:	d003      	beq.n	80011a8 <HAL_GPIO_Init+0x38>
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	2b12      	cmp	r3, #18
 80011a6:	d123      	bne.n	80011f0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	08da      	lsrs	r2, r3, #3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3208      	adds	r2, #8
 80011b0:	0092      	lsls	r2, r2, #2
 80011b2:	58d3      	ldr	r3, [r2, r3]
 80011b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	2207      	movs	r2, #7
 80011ba:	4013      	ands	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	220f      	movs	r2, #15
 80011c0:	409a      	lsls	r2, r3
 80011c2:	0013      	movs	r3, r2
 80011c4:	43da      	mvns	r2, r3
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	691a      	ldr	r2, [r3, #16]
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	2107      	movs	r1, #7
 80011d4:	400b      	ands	r3, r1
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	409a      	lsls	r2, r3
 80011da:	0013      	movs	r3, r2
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	4313      	orrs	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	08da      	lsrs	r2, r3, #3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3208      	adds	r2, #8
 80011ea:	0092      	lsls	r2, r2, #2
 80011ec:	6939      	ldr	r1, [r7, #16]
 80011ee:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	2203      	movs	r2, #3
 80011fc:	409a      	lsls	r2, r3
 80011fe:	0013      	movs	r3, r2
 8001200:	43da      	mvns	r2, r3
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	4013      	ands	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	2203      	movs	r2, #3
 800120e:	401a      	ands	r2, r3
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	409a      	lsls	r2, r3
 8001216:	0013      	movs	r3, r2
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4313      	orrs	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d00b      	beq.n	8001244 <HAL_GPIO_Init+0xd4>
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2b02      	cmp	r3, #2
 8001232:	d007      	beq.n	8001244 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001238:	2b11      	cmp	r3, #17
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	2b12      	cmp	r3, #18
 8001242:	d130      	bne.n	80012a6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	2203      	movs	r2, #3
 8001250:	409a      	lsls	r2, r3
 8001252:	0013      	movs	r3, r2
 8001254:	43da      	mvns	r2, r3
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	4013      	ands	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	68da      	ldr	r2, [r3, #12]
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	409a      	lsls	r2, r3
 8001266:	0013      	movs	r3, r2
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800127a:	2201      	movs	r2, #1
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	409a      	lsls	r2, r3
 8001280:	0013      	movs	r3, r2
 8001282:	43da      	mvns	r2, r3
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4013      	ands	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	091b      	lsrs	r3, r3, #4
 8001290:	2201      	movs	r2, #1
 8001292:	401a      	ands	r2, r3
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	409a      	lsls	r2, r3
 8001298:	0013      	movs	r3, r2
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	2203      	movs	r2, #3
 80012b2:	409a      	lsls	r2, r3
 80012b4:	0013      	movs	r3, r2
 80012b6:	43da      	mvns	r2, r3
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	4013      	ands	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	689a      	ldr	r2, [r3, #8]
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	409a      	lsls	r2, r3
 80012c8:	0013      	movs	r3, r2
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	2380      	movs	r3, #128	; 0x80
 80012dc:	055b      	lsls	r3, r3, #21
 80012de:	4013      	ands	r3, r2
 80012e0:	d100      	bne.n	80012e4 <HAL_GPIO_Init+0x174>
 80012e2:	e09a      	b.n	800141a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e4:	4b54      	ldr	r3, [pc, #336]	; (8001438 <HAL_GPIO_Init+0x2c8>)
 80012e6:	699a      	ldr	r2, [r3, #24]
 80012e8:	4b53      	ldr	r3, [pc, #332]	; (8001438 <HAL_GPIO_Init+0x2c8>)
 80012ea:	2101      	movs	r1, #1
 80012ec:	430a      	orrs	r2, r1
 80012ee:	619a      	str	r2, [r3, #24]
 80012f0:	4b51      	ldr	r3, [pc, #324]	; (8001438 <HAL_GPIO_Init+0x2c8>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	2201      	movs	r2, #1
 80012f6:	4013      	ands	r3, r2
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012fc:	4a4f      	ldr	r2, [pc, #316]	; (800143c <HAL_GPIO_Init+0x2cc>)
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	089b      	lsrs	r3, r3, #2
 8001302:	3302      	adds	r3, #2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	589b      	ldr	r3, [r3, r2]
 8001308:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	2203      	movs	r2, #3
 800130e:	4013      	ands	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	220f      	movs	r2, #15
 8001314:	409a      	lsls	r2, r3
 8001316:	0013      	movs	r3, r2
 8001318:	43da      	mvns	r2, r3
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	4013      	ands	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	2390      	movs	r3, #144	; 0x90
 8001324:	05db      	lsls	r3, r3, #23
 8001326:	429a      	cmp	r2, r3
 8001328:	d013      	beq.n	8001352 <HAL_GPIO_Init+0x1e2>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a44      	ldr	r2, [pc, #272]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d00d      	beq.n	800134e <HAL_GPIO_Init+0x1de>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a43      	ldr	r2, [pc, #268]	; (8001444 <HAL_GPIO_Init+0x2d4>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d007      	beq.n	800134a <HAL_GPIO_Init+0x1da>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a42      	ldr	r2, [pc, #264]	; (8001448 <HAL_GPIO_Init+0x2d8>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d101      	bne.n	8001346 <HAL_GPIO_Init+0x1d6>
 8001342:	2303      	movs	r3, #3
 8001344:	e006      	b.n	8001354 <HAL_GPIO_Init+0x1e4>
 8001346:	2305      	movs	r3, #5
 8001348:	e004      	b.n	8001354 <HAL_GPIO_Init+0x1e4>
 800134a:	2302      	movs	r3, #2
 800134c:	e002      	b.n	8001354 <HAL_GPIO_Init+0x1e4>
 800134e:	2301      	movs	r3, #1
 8001350:	e000      	b.n	8001354 <HAL_GPIO_Init+0x1e4>
 8001352:	2300      	movs	r3, #0
 8001354:	697a      	ldr	r2, [r7, #20]
 8001356:	2103      	movs	r1, #3
 8001358:	400a      	ands	r2, r1
 800135a:	0092      	lsls	r2, r2, #2
 800135c:	4093      	lsls	r3, r2
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001364:	4935      	ldr	r1, [pc, #212]	; (800143c <HAL_GPIO_Init+0x2cc>)
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	089b      	lsrs	r3, r3, #2
 800136a:	3302      	adds	r3, #2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001372:	4b36      	ldr	r3, [pc, #216]	; (800144c <HAL_GPIO_Init+0x2dc>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	43da      	mvns	r2, r3
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	4013      	ands	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	2380      	movs	r3, #128	; 0x80
 8001388:	025b      	lsls	r3, r3, #9
 800138a:	4013      	ands	r3, r2
 800138c:	d003      	beq.n	8001396 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4313      	orrs	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001396:	4b2d      	ldr	r3, [pc, #180]	; (800144c <HAL_GPIO_Init+0x2dc>)
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800139c:	4b2b      	ldr	r3, [pc, #172]	; (800144c <HAL_GPIO_Init+0x2dc>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	43da      	mvns	r2, r3
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	4013      	ands	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	2380      	movs	r3, #128	; 0x80
 80013b2:	029b      	lsls	r3, r3, #10
 80013b4:	4013      	ands	r3, r2
 80013b6:	d003      	beq.n	80013c0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	4313      	orrs	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013c0:	4b22      	ldr	r3, [pc, #136]	; (800144c <HAL_GPIO_Init+0x2dc>)
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013c6:	4b21      	ldr	r3, [pc, #132]	; (800144c <HAL_GPIO_Init+0x2dc>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	43da      	mvns	r2, r3
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4013      	ands	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685a      	ldr	r2, [r3, #4]
 80013da:	2380      	movs	r3, #128	; 0x80
 80013dc:	035b      	lsls	r3, r3, #13
 80013de:	4013      	ands	r3, r2
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013ea:	4b18      	ldr	r3, [pc, #96]	; (800144c <HAL_GPIO_Init+0x2dc>)
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80013f0:	4b16      	ldr	r3, [pc, #88]	; (800144c <HAL_GPIO_Init+0x2dc>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	43da      	mvns	r2, r3
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4013      	ands	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	2380      	movs	r3, #128	; 0x80
 8001406:	039b      	lsls	r3, r3, #14
 8001408:	4013      	ands	r3, r2
 800140a:	d003      	beq.n	8001414 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	4313      	orrs	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001414:	4b0d      	ldr	r3, [pc, #52]	; (800144c <HAL_GPIO_Init+0x2dc>)
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	3301      	adds	r3, #1
 800141e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	40da      	lsrs	r2, r3
 8001428:	1e13      	subs	r3, r2, #0
 800142a:	d000      	beq.n	800142e <HAL_GPIO_Init+0x2be>
 800142c:	e6a8      	b.n	8001180 <HAL_GPIO_Init+0x10>
  } 
}
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	46bd      	mov	sp, r7
 8001432:	b006      	add	sp, #24
 8001434:	bd80      	pop	{r7, pc}
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	40021000 	.word	0x40021000
 800143c:	40010000 	.word	0x40010000
 8001440:	48000400 	.word	0x48000400
 8001444:	48000800 	.word	0x48000800
 8001448:	48000c00 	.word	0x48000c00
 800144c:	40010400 	.word	0x40010400

08001450 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	000a      	movs	r2, r1
 800145a:	1cbb      	adds	r3, r7, #2
 800145c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	1cba      	adds	r2, r7, #2
 8001464:	8812      	ldrh	r2, [r2, #0]
 8001466:	4013      	ands	r3, r2
 8001468:	d004      	beq.n	8001474 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800146a:	230f      	movs	r3, #15
 800146c:	18fb      	adds	r3, r7, r3
 800146e:	2201      	movs	r2, #1
 8001470:	701a      	strb	r2, [r3, #0]
 8001472:	e003      	b.n	800147c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001474:	230f      	movs	r3, #15
 8001476:	18fb      	adds	r3, r7, r3
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800147c:	230f      	movs	r3, #15
 800147e:	18fb      	adds	r3, r7, r3
 8001480:	781b      	ldrb	r3, [r3, #0]
  }
 8001482:	0018      	movs	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	b004      	add	sp, #16
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	0008      	movs	r0, r1
 8001494:	0011      	movs	r1, r2
 8001496:	1cbb      	adds	r3, r7, #2
 8001498:	1c02      	adds	r2, r0, #0
 800149a:	801a      	strh	r2, [r3, #0]
 800149c:	1c7b      	adds	r3, r7, #1
 800149e:	1c0a      	adds	r2, r1, #0
 80014a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014a2:	1c7b      	adds	r3, r7, #1
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d004      	beq.n	80014b4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014aa:	1cbb      	adds	r3, r7, #2
 80014ac:	881a      	ldrh	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014b2:	e003      	b.n	80014bc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014b4:	1cbb      	adds	r3, r7, #2
 80014b6:	881a      	ldrh	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014bc:	46c0      	nop			; (mov r8, r8)
 80014be:	46bd      	mov	sp, r7
 80014c0:	b002      	add	sp, #8
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e303      	b.n	8001ade <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2201      	movs	r2, #1
 80014dc:	4013      	ands	r3, r2
 80014de:	d100      	bne.n	80014e2 <HAL_RCC_OscConfig+0x1e>
 80014e0:	e08d      	b.n	80015fe <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014e2:	4bc4      	ldr	r3, [pc, #784]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	220c      	movs	r2, #12
 80014e8:	4013      	ands	r3, r2
 80014ea:	2b04      	cmp	r3, #4
 80014ec:	d00e      	beq.n	800150c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014ee:	4bc1      	ldr	r3, [pc, #772]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	220c      	movs	r2, #12
 80014f4:	4013      	ands	r3, r2
 80014f6:	2b08      	cmp	r3, #8
 80014f8:	d116      	bne.n	8001528 <HAL_RCC_OscConfig+0x64>
 80014fa:	4bbe      	ldr	r3, [pc, #760]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 80014fc:	685a      	ldr	r2, [r3, #4]
 80014fe:	2380      	movs	r3, #128	; 0x80
 8001500:	025b      	lsls	r3, r3, #9
 8001502:	401a      	ands	r2, r3
 8001504:	2380      	movs	r3, #128	; 0x80
 8001506:	025b      	lsls	r3, r3, #9
 8001508:	429a      	cmp	r2, r3
 800150a:	d10d      	bne.n	8001528 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150c:	4bb9      	ldr	r3, [pc, #740]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	2380      	movs	r3, #128	; 0x80
 8001512:	029b      	lsls	r3, r3, #10
 8001514:	4013      	ands	r3, r2
 8001516:	d100      	bne.n	800151a <HAL_RCC_OscConfig+0x56>
 8001518:	e070      	b.n	80015fc <HAL_RCC_OscConfig+0x138>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d000      	beq.n	8001524 <HAL_RCC_OscConfig+0x60>
 8001522:	e06b      	b.n	80015fc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e2da      	b.n	8001ade <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d107      	bne.n	8001540 <HAL_RCC_OscConfig+0x7c>
 8001530:	4bb0      	ldr	r3, [pc, #704]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4baf      	ldr	r3, [pc, #700]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 8001536:	2180      	movs	r1, #128	; 0x80
 8001538:	0249      	lsls	r1, r1, #9
 800153a:	430a      	orrs	r2, r1
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	e02f      	b.n	80015a0 <HAL_RCC_OscConfig+0xdc>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d10c      	bne.n	8001562 <HAL_RCC_OscConfig+0x9e>
 8001548:	4baa      	ldr	r3, [pc, #680]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4ba9      	ldr	r3, [pc, #676]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 800154e:	49aa      	ldr	r1, [pc, #680]	; (80017f8 <HAL_RCC_OscConfig+0x334>)
 8001550:	400a      	ands	r2, r1
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	4ba7      	ldr	r3, [pc, #668]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4ba6      	ldr	r3, [pc, #664]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 800155a:	49a8      	ldr	r1, [pc, #672]	; (80017fc <HAL_RCC_OscConfig+0x338>)
 800155c:	400a      	ands	r2, r1
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	e01e      	b.n	80015a0 <HAL_RCC_OscConfig+0xdc>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b05      	cmp	r3, #5
 8001568:	d10e      	bne.n	8001588 <HAL_RCC_OscConfig+0xc4>
 800156a:	4ba2      	ldr	r3, [pc, #648]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	4ba1      	ldr	r3, [pc, #644]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 8001570:	2180      	movs	r1, #128	; 0x80
 8001572:	02c9      	lsls	r1, r1, #11
 8001574:	430a      	orrs	r2, r1
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	4b9e      	ldr	r3, [pc, #632]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b9d      	ldr	r3, [pc, #628]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 800157e:	2180      	movs	r1, #128	; 0x80
 8001580:	0249      	lsls	r1, r1, #9
 8001582:	430a      	orrs	r2, r1
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	e00b      	b.n	80015a0 <HAL_RCC_OscConfig+0xdc>
 8001588:	4b9a      	ldr	r3, [pc, #616]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b99      	ldr	r3, [pc, #612]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 800158e:	499a      	ldr	r1, [pc, #616]	; (80017f8 <HAL_RCC_OscConfig+0x334>)
 8001590:	400a      	ands	r2, r1
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	4b97      	ldr	r3, [pc, #604]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b96      	ldr	r3, [pc, #600]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 800159a:	4998      	ldr	r1, [pc, #608]	; (80017fc <HAL_RCC_OscConfig+0x338>)
 800159c:	400a      	ands	r2, r1
 800159e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d014      	beq.n	80015d2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a8:	f7ff fd02 	bl	8000fb0 <HAL_GetTick>
 80015ac:	0003      	movs	r3, r0
 80015ae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015b2:	f7ff fcfd 	bl	8000fb0 <HAL_GetTick>
 80015b6:	0002      	movs	r2, r0
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b64      	cmp	r3, #100	; 0x64
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e28c      	b.n	8001ade <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c4:	4b8b      	ldr	r3, [pc, #556]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	2380      	movs	r3, #128	; 0x80
 80015ca:	029b      	lsls	r3, r3, #10
 80015cc:	4013      	ands	r3, r2
 80015ce:	d0f0      	beq.n	80015b2 <HAL_RCC_OscConfig+0xee>
 80015d0:	e015      	b.n	80015fe <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d2:	f7ff fced 	bl	8000fb0 <HAL_GetTick>
 80015d6:	0003      	movs	r3, r0
 80015d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015dc:	f7ff fce8 	bl	8000fb0 <HAL_GetTick>
 80015e0:	0002      	movs	r2, r0
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b64      	cmp	r3, #100	; 0x64
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e277      	b.n	8001ade <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ee:	4b81      	ldr	r3, [pc, #516]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	2380      	movs	r3, #128	; 0x80
 80015f4:	029b      	lsls	r3, r3, #10
 80015f6:	4013      	ands	r3, r2
 80015f8:	d1f0      	bne.n	80015dc <HAL_RCC_OscConfig+0x118>
 80015fa:	e000      	b.n	80015fe <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015fc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2202      	movs	r2, #2
 8001604:	4013      	ands	r3, r2
 8001606:	d100      	bne.n	800160a <HAL_RCC_OscConfig+0x146>
 8001608:	e069      	b.n	80016de <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800160a:	4b7a      	ldr	r3, [pc, #488]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	220c      	movs	r2, #12
 8001610:	4013      	ands	r3, r2
 8001612:	d00b      	beq.n	800162c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001614:	4b77      	ldr	r3, [pc, #476]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	220c      	movs	r2, #12
 800161a:	4013      	ands	r3, r2
 800161c:	2b08      	cmp	r3, #8
 800161e:	d11c      	bne.n	800165a <HAL_RCC_OscConfig+0x196>
 8001620:	4b74      	ldr	r3, [pc, #464]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	2380      	movs	r3, #128	; 0x80
 8001626:	025b      	lsls	r3, r3, #9
 8001628:	4013      	ands	r3, r2
 800162a:	d116      	bne.n	800165a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800162c:	4b71      	ldr	r3, [pc, #452]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2202      	movs	r2, #2
 8001632:	4013      	ands	r3, r2
 8001634:	d005      	beq.n	8001642 <HAL_RCC_OscConfig+0x17e>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d001      	beq.n	8001642 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e24d      	b.n	8001ade <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001642:	4b6c      	ldr	r3, [pc, #432]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	22f8      	movs	r2, #248	; 0xf8
 8001648:	4393      	bics	r3, r2
 800164a:	0019      	movs	r1, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	00da      	lsls	r2, r3, #3
 8001652:	4b68      	ldr	r3, [pc, #416]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 8001654:	430a      	orrs	r2, r1
 8001656:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001658:	e041      	b.n	80016de <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d024      	beq.n	80016ac <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001662:	4b64      	ldr	r3, [pc, #400]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	4b63      	ldr	r3, [pc, #396]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 8001668:	2101      	movs	r1, #1
 800166a:	430a      	orrs	r2, r1
 800166c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166e:	f7ff fc9f 	bl	8000fb0 <HAL_GetTick>
 8001672:	0003      	movs	r3, r0
 8001674:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001678:	f7ff fc9a 	bl	8000fb0 <HAL_GetTick>
 800167c:	0002      	movs	r2, r0
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e229      	b.n	8001ade <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800168a:	4b5a      	ldr	r3, [pc, #360]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2202      	movs	r2, #2
 8001690:	4013      	ands	r3, r2
 8001692:	d0f1      	beq.n	8001678 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001694:	4b57      	ldr	r3, [pc, #348]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	22f8      	movs	r2, #248	; 0xf8
 800169a:	4393      	bics	r3, r2
 800169c:	0019      	movs	r1, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	00da      	lsls	r2, r3, #3
 80016a4:	4b53      	ldr	r3, [pc, #332]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 80016a6:	430a      	orrs	r2, r1
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	e018      	b.n	80016de <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ac:	4b51      	ldr	r3, [pc, #324]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b50      	ldr	r3, [pc, #320]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 80016b2:	2101      	movs	r1, #1
 80016b4:	438a      	bics	r2, r1
 80016b6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b8:	f7ff fc7a 	bl	8000fb0 <HAL_GetTick>
 80016bc:	0003      	movs	r3, r0
 80016be:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016c2:	f7ff fc75 	bl	8000fb0 <HAL_GetTick>
 80016c6:	0002      	movs	r2, r0
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e204      	b.n	8001ade <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d4:	4b47      	ldr	r3, [pc, #284]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2202      	movs	r2, #2
 80016da:	4013      	ands	r3, r2
 80016dc:	d1f1      	bne.n	80016c2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2208      	movs	r2, #8
 80016e4:	4013      	ands	r3, r2
 80016e6:	d036      	beq.n	8001756 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d019      	beq.n	8001724 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016f0:	4b40      	ldr	r3, [pc, #256]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 80016f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016f4:	4b3f      	ldr	r3, [pc, #252]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 80016f6:	2101      	movs	r1, #1
 80016f8:	430a      	orrs	r2, r1
 80016fa:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fc:	f7ff fc58 	bl	8000fb0 <HAL_GetTick>
 8001700:	0003      	movs	r3, r0
 8001702:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001706:	f7ff fc53 	bl	8000fb0 <HAL_GetTick>
 800170a:	0002      	movs	r2, r0
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e1e2      	b.n	8001ade <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001718:	4b36      	ldr	r3, [pc, #216]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 800171a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171c:	2202      	movs	r2, #2
 800171e:	4013      	ands	r3, r2
 8001720:	d0f1      	beq.n	8001706 <HAL_RCC_OscConfig+0x242>
 8001722:	e018      	b.n	8001756 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001724:	4b33      	ldr	r3, [pc, #204]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 8001726:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001728:	4b32      	ldr	r3, [pc, #200]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 800172a:	2101      	movs	r1, #1
 800172c:	438a      	bics	r2, r1
 800172e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001730:	f7ff fc3e 	bl	8000fb0 <HAL_GetTick>
 8001734:	0003      	movs	r3, r0
 8001736:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800173a:	f7ff fc39 	bl	8000fb0 <HAL_GetTick>
 800173e:	0002      	movs	r2, r0
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e1c8      	b.n	8001ade <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800174c:	4b29      	ldr	r3, [pc, #164]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	2202      	movs	r2, #2
 8001752:	4013      	ands	r3, r2
 8001754:	d1f1      	bne.n	800173a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2204      	movs	r2, #4
 800175c:	4013      	ands	r3, r2
 800175e:	d100      	bne.n	8001762 <HAL_RCC_OscConfig+0x29e>
 8001760:	e0b6      	b.n	80018d0 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001762:	231f      	movs	r3, #31
 8001764:	18fb      	adds	r3, r7, r3
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800176a:	4b22      	ldr	r3, [pc, #136]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 800176c:	69da      	ldr	r2, [r3, #28]
 800176e:	2380      	movs	r3, #128	; 0x80
 8001770:	055b      	lsls	r3, r3, #21
 8001772:	4013      	ands	r3, r2
 8001774:	d111      	bne.n	800179a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001776:	4b1f      	ldr	r3, [pc, #124]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 8001778:	69da      	ldr	r2, [r3, #28]
 800177a:	4b1e      	ldr	r3, [pc, #120]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 800177c:	2180      	movs	r1, #128	; 0x80
 800177e:	0549      	lsls	r1, r1, #21
 8001780:	430a      	orrs	r2, r1
 8001782:	61da      	str	r2, [r3, #28]
 8001784:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 8001786:	69da      	ldr	r2, [r3, #28]
 8001788:	2380      	movs	r3, #128	; 0x80
 800178a:	055b      	lsls	r3, r3, #21
 800178c:	4013      	ands	r3, r2
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001792:	231f      	movs	r3, #31
 8001794:	18fb      	adds	r3, r7, r3
 8001796:	2201      	movs	r2, #1
 8001798:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800179a:	4b19      	ldr	r3, [pc, #100]	; (8001800 <HAL_RCC_OscConfig+0x33c>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	2380      	movs	r3, #128	; 0x80
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	4013      	ands	r3, r2
 80017a4:	d11a      	bne.n	80017dc <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017a6:	4b16      	ldr	r3, [pc, #88]	; (8001800 <HAL_RCC_OscConfig+0x33c>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <HAL_RCC_OscConfig+0x33c>)
 80017ac:	2180      	movs	r1, #128	; 0x80
 80017ae:	0049      	lsls	r1, r1, #1
 80017b0:	430a      	orrs	r2, r1
 80017b2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017b4:	f7ff fbfc 	bl	8000fb0 <HAL_GetTick>
 80017b8:	0003      	movs	r3, r0
 80017ba:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017be:	f7ff fbf7 	bl	8000fb0 <HAL_GetTick>
 80017c2:	0002      	movs	r2, r0
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b64      	cmp	r3, #100	; 0x64
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e186      	b.n	8001ade <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d0:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <HAL_RCC_OscConfig+0x33c>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	2380      	movs	r3, #128	; 0x80
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	4013      	ands	r3, r2
 80017da:	d0f0      	beq.n	80017be <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d10f      	bne.n	8001804 <HAL_RCC_OscConfig+0x340>
 80017e4:	4b03      	ldr	r3, [pc, #12]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 80017e6:	6a1a      	ldr	r2, [r3, #32]
 80017e8:	4b02      	ldr	r3, [pc, #8]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 80017ea:	2101      	movs	r1, #1
 80017ec:	430a      	orrs	r2, r1
 80017ee:	621a      	str	r2, [r3, #32]
 80017f0:	e036      	b.n	8001860 <HAL_RCC_OscConfig+0x39c>
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	40021000 	.word	0x40021000
 80017f8:	fffeffff 	.word	0xfffeffff
 80017fc:	fffbffff 	.word	0xfffbffff
 8001800:	40007000 	.word	0x40007000
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d10c      	bne.n	8001826 <HAL_RCC_OscConfig+0x362>
 800180c:	4bb6      	ldr	r3, [pc, #728]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 800180e:	6a1a      	ldr	r2, [r3, #32]
 8001810:	4bb5      	ldr	r3, [pc, #724]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 8001812:	2101      	movs	r1, #1
 8001814:	438a      	bics	r2, r1
 8001816:	621a      	str	r2, [r3, #32]
 8001818:	4bb3      	ldr	r3, [pc, #716]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 800181a:	6a1a      	ldr	r2, [r3, #32]
 800181c:	4bb2      	ldr	r3, [pc, #712]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 800181e:	2104      	movs	r1, #4
 8001820:	438a      	bics	r2, r1
 8001822:	621a      	str	r2, [r3, #32]
 8001824:	e01c      	b.n	8001860 <HAL_RCC_OscConfig+0x39c>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	2b05      	cmp	r3, #5
 800182c:	d10c      	bne.n	8001848 <HAL_RCC_OscConfig+0x384>
 800182e:	4bae      	ldr	r3, [pc, #696]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 8001830:	6a1a      	ldr	r2, [r3, #32]
 8001832:	4bad      	ldr	r3, [pc, #692]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 8001834:	2104      	movs	r1, #4
 8001836:	430a      	orrs	r2, r1
 8001838:	621a      	str	r2, [r3, #32]
 800183a:	4bab      	ldr	r3, [pc, #684]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 800183c:	6a1a      	ldr	r2, [r3, #32]
 800183e:	4baa      	ldr	r3, [pc, #680]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 8001840:	2101      	movs	r1, #1
 8001842:	430a      	orrs	r2, r1
 8001844:	621a      	str	r2, [r3, #32]
 8001846:	e00b      	b.n	8001860 <HAL_RCC_OscConfig+0x39c>
 8001848:	4ba7      	ldr	r3, [pc, #668]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 800184a:	6a1a      	ldr	r2, [r3, #32]
 800184c:	4ba6      	ldr	r3, [pc, #664]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 800184e:	2101      	movs	r1, #1
 8001850:	438a      	bics	r2, r1
 8001852:	621a      	str	r2, [r3, #32]
 8001854:	4ba4      	ldr	r3, [pc, #656]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 8001856:	6a1a      	ldr	r2, [r3, #32]
 8001858:	4ba3      	ldr	r3, [pc, #652]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 800185a:	2104      	movs	r1, #4
 800185c:	438a      	bics	r2, r1
 800185e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d014      	beq.n	8001892 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001868:	f7ff fba2 	bl	8000fb0 <HAL_GetTick>
 800186c:	0003      	movs	r3, r0
 800186e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001870:	e009      	b.n	8001886 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001872:	f7ff fb9d 	bl	8000fb0 <HAL_GetTick>
 8001876:	0002      	movs	r2, r0
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	4a9b      	ldr	r2, [pc, #620]	; (8001aec <HAL_RCC_OscConfig+0x628>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e12b      	b.n	8001ade <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001886:	4b98      	ldr	r3, [pc, #608]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	2202      	movs	r2, #2
 800188c:	4013      	ands	r3, r2
 800188e:	d0f0      	beq.n	8001872 <HAL_RCC_OscConfig+0x3ae>
 8001890:	e013      	b.n	80018ba <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001892:	f7ff fb8d 	bl	8000fb0 <HAL_GetTick>
 8001896:	0003      	movs	r3, r0
 8001898:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800189a:	e009      	b.n	80018b0 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800189c:	f7ff fb88 	bl	8000fb0 <HAL_GetTick>
 80018a0:	0002      	movs	r2, r0
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	4a91      	ldr	r2, [pc, #580]	; (8001aec <HAL_RCC_OscConfig+0x628>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e116      	b.n	8001ade <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b0:	4b8d      	ldr	r3, [pc, #564]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	2202      	movs	r2, #2
 80018b6:	4013      	ands	r3, r2
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018ba:	231f      	movs	r3, #31
 80018bc:	18fb      	adds	r3, r7, r3
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d105      	bne.n	80018d0 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018c4:	4b88      	ldr	r3, [pc, #544]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 80018c6:	69da      	ldr	r2, [r3, #28]
 80018c8:	4b87      	ldr	r3, [pc, #540]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 80018ca:	4989      	ldr	r1, [pc, #548]	; (8001af0 <HAL_RCC_OscConfig+0x62c>)
 80018cc:	400a      	ands	r2, r1
 80018ce:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2210      	movs	r2, #16
 80018d6:	4013      	ands	r3, r2
 80018d8:	d063      	beq.n	80019a2 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d12a      	bne.n	8001938 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80018e2:	4b81      	ldr	r3, [pc, #516]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 80018e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018e6:	4b80      	ldr	r3, [pc, #512]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 80018e8:	2104      	movs	r1, #4
 80018ea:	430a      	orrs	r2, r1
 80018ec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80018ee:	4b7e      	ldr	r3, [pc, #504]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 80018f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018f2:	4b7d      	ldr	r3, [pc, #500]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 80018f4:	2101      	movs	r1, #1
 80018f6:	430a      	orrs	r2, r1
 80018f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018fa:	f7ff fb59 	bl	8000fb0 <HAL_GetTick>
 80018fe:	0003      	movs	r3, r0
 8001900:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001904:	f7ff fb54 	bl	8000fb0 <HAL_GetTick>
 8001908:	0002      	movs	r2, r0
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e0e3      	b.n	8001ade <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001916:	4b74      	ldr	r3, [pc, #464]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 8001918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800191a:	2202      	movs	r2, #2
 800191c:	4013      	ands	r3, r2
 800191e:	d0f1      	beq.n	8001904 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001920:	4b71      	ldr	r3, [pc, #452]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 8001922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001924:	22f8      	movs	r2, #248	; 0xf8
 8001926:	4393      	bics	r3, r2
 8001928:	0019      	movs	r1, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	00da      	lsls	r2, r3, #3
 8001930:	4b6d      	ldr	r3, [pc, #436]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 8001932:	430a      	orrs	r2, r1
 8001934:	635a      	str	r2, [r3, #52]	; 0x34
 8001936:	e034      	b.n	80019a2 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	695b      	ldr	r3, [r3, #20]
 800193c:	3305      	adds	r3, #5
 800193e:	d111      	bne.n	8001964 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001940:	4b69      	ldr	r3, [pc, #420]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 8001942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001944:	4b68      	ldr	r3, [pc, #416]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 8001946:	2104      	movs	r1, #4
 8001948:	438a      	bics	r2, r1
 800194a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800194c:	4b66      	ldr	r3, [pc, #408]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 800194e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001950:	22f8      	movs	r2, #248	; 0xf8
 8001952:	4393      	bics	r3, r2
 8001954:	0019      	movs	r1, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	00da      	lsls	r2, r3, #3
 800195c:	4b62      	ldr	r3, [pc, #392]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 800195e:	430a      	orrs	r2, r1
 8001960:	635a      	str	r2, [r3, #52]	; 0x34
 8001962:	e01e      	b.n	80019a2 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001964:	4b60      	ldr	r3, [pc, #384]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 8001966:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001968:	4b5f      	ldr	r3, [pc, #380]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 800196a:	2104      	movs	r1, #4
 800196c:	430a      	orrs	r2, r1
 800196e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001970:	4b5d      	ldr	r3, [pc, #372]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 8001972:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001974:	4b5c      	ldr	r3, [pc, #368]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 8001976:	2101      	movs	r1, #1
 8001978:	438a      	bics	r2, r1
 800197a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800197c:	f7ff fb18 	bl	8000fb0 <HAL_GetTick>
 8001980:	0003      	movs	r3, r0
 8001982:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001986:	f7ff fb13 	bl	8000fb0 <HAL_GetTick>
 800198a:	0002      	movs	r2, r0
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e0a2      	b.n	8001ade <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001998:	4b53      	ldr	r3, [pc, #332]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 800199a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800199c:	2202      	movs	r2, #2
 800199e:	4013      	ands	r3, r2
 80019a0:	d1f1      	bne.n	8001986 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d100      	bne.n	80019ac <HAL_RCC_OscConfig+0x4e8>
 80019aa:	e097      	b.n	8001adc <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019ac:	4b4e      	ldr	r3, [pc, #312]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	220c      	movs	r2, #12
 80019b2:	4013      	ands	r3, r2
 80019b4:	2b08      	cmp	r3, #8
 80019b6:	d100      	bne.n	80019ba <HAL_RCC_OscConfig+0x4f6>
 80019b8:	e06b      	b.n	8001a92 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a1b      	ldr	r3, [r3, #32]
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d14c      	bne.n	8001a5c <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c2:	4b49      	ldr	r3, [pc, #292]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	4b48      	ldr	r3, [pc, #288]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 80019c8:	494a      	ldr	r1, [pc, #296]	; (8001af4 <HAL_RCC_OscConfig+0x630>)
 80019ca:	400a      	ands	r2, r1
 80019cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ce:	f7ff faef 	bl	8000fb0 <HAL_GetTick>
 80019d2:	0003      	movs	r3, r0
 80019d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d8:	f7ff faea 	bl	8000fb0 <HAL_GetTick>
 80019dc:	0002      	movs	r2, r0
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e079      	b.n	8001ade <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ea:	4b3f      	ldr	r3, [pc, #252]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	2380      	movs	r3, #128	; 0x80
 80019f0:	049b      	lsls	r3, r3, #18
 80019f2:	4013      	ands	r3, r2
 80019f4:	d1f0      	bne.n	80019d8 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019f6:	4b3c      	ldr	r3, [pc, #240]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 80019f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fa:	220f      	movs	r2, #15
 80019fc:	4393      	bics	r3, r2
 80019fe:	0019      	movs	r1, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a04:	4b38      	ldr	r3, [pc, #224]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 8001a06:	430a      	orrs	r2, r1
 8001a08:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a0a:	4b37      	ldr	r3, [pc, #220]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	4a3a      	ldr	r2, [pc, #232]	; (8001af8 <HAL_RCC_OscConfig+0x634>)
 8001a10:	4013      	ands	r3, r2
 8001a12:	0019      	movs	r1, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	4b32      	ldr	r3, [pc, #200]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 8001a20:	430a      	orrs	r2, r1
 8001a22:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a24:	4b30      	ldr	r3, [pc, #192]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4b2f      	ldr	r3, [pc, #188]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 8001a2a:	2180      	movs	r1, #128	; 0x80
 8001a2c:	0449      	lsls	r1, r1, #17
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a32:	f7ff fabd 	bl	8000fb0 <HAL_GetTick>
 8001a36:	0003      	movs	r3, r0
 8001a38:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a3c:	f7ff fab8 	bl	8000fb0 <HAL_GetTick>
 8001a40:	0002      	movs	r2, r0
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e047      	b.n	8001ade <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a4e:	4b26      	ldr	r3, [pc, #152]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	2380      	movs	r3, #128	; 0x80
 8001a54:	049b      	lsls	r3, r3, #18
 8001a56:	4013      	ands	r3, r2
 8001a58:	d0f0      	beq.n	8001a3c <HAL_RCC_OscConfig+0x578>
 8001a5a:	e03f      	b.n	8001adc <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a5c:	4b22      	ldr	r3, [pc, #136]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 8001a62:	4924      	ldr	r1, [pc, #144]	; (8001af4 <HAL_RCC_OscConfig+0x630>)
 8001a64:	400a      	ands	r2, r1
 8001a66:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a68:	f7ff faa2 	bl	8000fb0 <HAL_GetTick>
 8001a6c:	0003      	movs	r3, r0
 8001a6e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a72:	f7ff fa9d 	bl	8000fb0 <HAL_GetTick>
 8001a76:	0002      	movs	r2, r0
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e02c      	b.n	8001ade <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a84:	4b18      	ldr	r3, [pc, #96]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	2380      	movs	r3, #128	; 0x80
 8001a8a:	049b      	lsls	r3, r3, #18
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d1f0      	bne.n	8001a72 <HAL_RCC_OscConfig+0x5ae>
 8001a90:	e024      	b.n	8001adc <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a1b      	ldr	r3, [r3, #32]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d101      	bne.n	8001a9e <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e01f      	b.n	8001ade <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001a9e:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001aa4:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 8001aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	025b      	lsls	r3, r3, #9
 8001ab0:	401a      	ands	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d10e      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	220f      	movs	r2, #15
 8001abe:	401a      	ands	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d107      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	23f0      	movs	r3, #240	; 0xf0
 8001acc:	039b      	lsls	r3, r3, #14
 8001ace:	401a      	ands	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d001      	beq.n	8001adc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e000      	b.n	8001ade <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	0018      	movs	r0, r3
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	b008      	add	sp, #32
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	46c0      	nop			; (mov r8, r8)
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	00001388 	.word	0x00001388
 8001af0:	efffffff 	.word	0xefffffff
 8001af4:	feffffff 	.word	0xfeffffff
 8001af8:	ffc2ffff 	.word	0xffc2ffff

08001afc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e0b3      	b.n	8001c78 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b10:	4b5b      	ldr	r3, [pc, #364]	; (8001c80 <HAL_RCC_ClockConfig+0x184>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2201      	movs	r2, #1
 8001b16:	4013      	ands	r3, r2
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d911      	bls.n	8001b42 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1e:	4b58      	ldr	r3, [pc, #352]	; (8001c80 <HAL_RCC_ClockConfig+0x184>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2201      	movs	r2, #1
 8001b24:	4393      	bics	r3, r2
 8001b26:	0019      	movs	r1, r3
 8001b28:	4b55      	ldr	r3, [pc, #340]	; (8001c80 <HAL_RCC_ClockConfig+0x184>)
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b30:	4b53      	ldr	r3, [pc, #332]	; (8001c80 <HAL_RCC_ClockConfig+0x184>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2201      	movs	r2, #1
 8001b36:	4013      	ands	r3, r2
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d001      	beq.n	8001b42 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e09a      	b.n	8001c78 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2202      	movs	r2, #2
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d015      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2204      	movs	r2, #4
 8001b52:	4013      	ands	r3, r2
 8001b54:	d006      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b56:	4b4b      	ldr	r3, [pc, #300]	; (8001c84 <HAL_RCC_ClockConfig+0x188>)
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	4b4a      	ldr	r3, [pc, #296]	; (8001c84 <HAL_RCC_ClockConfig+0x188>)
 8001b5c:	21e0      	movs	r1, #224	; 0xe0
 8001b5e:	00c9      	lsls	r1, r1, #3
 8001b60:	430a      	orrs	r2, r1
 8001b62:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b64:	4b47      	ldr	r3, [pc, #284]	; (8001c84 <HAL_RCC_ClockConfig+0x188>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	22f0      	movs	r2, #240	; 0xf0
 8001b6a:	4393      	bics	r3, r2
 8001b6c:	0019      	movs	r1, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	4b44      	ldr	r3, [pc, #272]	; (8001c84 <HAL_RCC_ClockConfig+0x188>)
 8001b74:	430a      	orrs	r2, r1
 8001b76:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d040      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d107      	bne.n	8001b9a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8a:	4b3e      	ldr	r3, [pc, #248]	; (8001c84 <HAL_RCC_ClockConfig+0x188>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	2380      	movs	r3, #128	; 0x80
 8001b90:	029b      	lsls	r3, r3, #10
 8001b92:	4013      	ands	r3, r2
 8001b94:	d114      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e06e      	b.n	8001c78 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d107      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba2:	4b38      	ldr	r3, [pc, #224]	; (8001c84 <HAL_RCC_ClockConfig+0x188>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	2380      	movs	r3, #128	; 0x80
 8001ba8:	049b      	lsls	r3, r3, #18
 8001baa:	4013      	ands	r3, r2
 8001bac:	d108      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e062      	b.n	8001c78 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb2:	4b34      	ldr	r3, [pc, #208]	; (8001c84 <HAL_RCC_ClockConfig+0x188>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d101      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e05b      	b.n	8001c78 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bc0:	4b30      	ldr	r3, [pc, #192]	; (8001c84 <HAL_RCC_ClockConfig+0x188>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	4393      	bics	r3, r2
 8001bc8:	0019      	movs	r1, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685a      	ldr	r2, [r3, #4]
 8001bce:	4b2d      	ldr	r3, [pc, #180]	; (8001c84 <HAL_RCC_ClockConfig+0x188>)
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bd4:	f7ff f9ec 	bl	8000fb0 <HAL_GetTick>
 8001bd8:	0003      	movs	r3, r0
 8001bda:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bdc:	e009      	b.n	8001bf2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bde:	f7ff f9e7 	bl	8000fb0 <HAL_GetTick>
 8001be2:	0002      	movs	r2, r0
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	4a27      	ldr	r2, [pc, #156]	; (8001c88 <HAL_RCC_ClockConfig+0x18c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e042      	b.n	8001c78 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf2:	4b24      	ldr	r3, [pc, #144]	; (8001c84 <HAL_RCC_ClockConfig+0x188>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	220c      	movs	r2, #12
 8001bf8:	401a      	ands	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d1ec      	bne.n	8001bde <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c04:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <HAL_RCC_ClockConfig+0x184>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d211      	bcs.n	8001c36 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c12:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <HAL_RCC_ClockConfig+0x184>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2201      	movs	r2, #1
 8001c18:	4393      	bics	r3, r2
 8001c1a:	0019      	movs	r1, r3
 8001c1c:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <HAL_RCC_ClockConfig+0x184>)
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	430a      	orrs	r2, r1
 8001c22:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c24:	4b16      	ldr	r3, [pc, #88]	; (8001c80 <HAL_RCC_ClockConfig+0x184>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d001      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e020      	b.n	8001c78 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2204      	movs	r2, #4
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	d009      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c40:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <HAL_RCC_ClockConfig+0x188>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	4a11      	ldr	r2, [pc, #68]	; (8001c8c <HAL_RCC_ClockConfig+0x190>)
 8001c46:	4013      	ands	r3, r2
 8001c48:	0019      	movs	r1, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68da      	ldr	r2, [r3, #12]
 8001c4e:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <HAL_RCC_ClockConfig+0x188>)
 8001c50:	430a      	orrs	r2, r1
 8001c52:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c54:	f000 f820 	bl	8001c98 <HAL_RCC_GetSysClockFreq>
 8001c58:	0001      	movs	r1, r0
 8001c5a:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <HAL_RCC_ClockConfig+0x188>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	091b      	lsrs	r3, r3, #4
 8001c60:	220f      	movs	r2, #15
 8001c62:	4013      	ands	r3, r2
 8001c64:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <HAL_RCC_ClockConfig+0x194>)
 8001c66:	5cd3      	ldrb	r3, [r2, r3]
 8001c68:	000a      	movs	r2, r1
 8001c6a:	40da      	lsrs	r2, r3
 8001c6c:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <HAL_RCC_ClockConfig+0x198>)
 8001c6e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c70:	2000      	movs	r0, #0
 8001c72:	f7ff f957 	bl	8000f24 <HAL_InitTick>
  
  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	0018      	movs	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	b004      	add	sp, #16
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40022000 	.word	0x40022000
 8001c84:	40021000 	.word	0x40021000
 8001c88:	00001388 	.word	0x00001388
 8001c8c:	fffff8ff 	.word	0xfffff8ff
 8001c90:	0800278c 	.word	0x0800278c
 8001c94:	20000000 	.word	0x20000000

08001c98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c98:	b590      	push	{r4, r7, lr}
 8001c9a:	b08f      	sub	sp, #60	; 0x3c
 8001c9c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001c9e:	2314      	movs	r3, #20
 8001ca0:	18fb      	adds	r3, r7, r3
 8001ca2:	4a2b      	ldr	r2, [pc, #172]	; (8001d50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ca4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001ca6:	c313      	stmia	r3!, {r0, r1, r4}
 8001ca8:	6812      	ldr	r2, [r2, #0]
 8001caa:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001cac:	1d3b      	adds	r3, r7, #4
 8001cae:	4a29      	ldr	r2, [pc, #164]	; (8001d54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cb0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001cb2:	c313      	stmia	r3!, {r0, r1, r4}
 8001cb4:	6812      	ldr	r2, [r2, #0]
 8001cb6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	637b      	str	r3, [r7, #52]	; 0x34
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001ccc:	4b22      	ldr	r3, [pc, #136]	; (8001d58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd4:	220c      	movs	r2, #12
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	2b04      	cmp	r3, #4
 8001cda:	d002      	beq.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x4a>
 8001cdc:	2b08      	cmp	r3, #8
 8001cde:	d003      	beq.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x50>
 8001ce0:	e02d      	b.n	8001d3e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ce2:	4b1e      	ldr	r3, [pc, #120]	; (8001d5c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ce4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ce6:	e02d      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cea:	0c9b      	lsrs	r3, r3, #18
 8001cec:	220f      	movs	r2, #15
 8001cee:	4013      	ands	r3, r2
 8001cf0:	2214      	movs	r2, #20
 8001cf2:	18ba      	adds	r2, r7, r2
 8001cf4:	5cd3      	ldrb	r3, [r2, r3]
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001cf8:	4b17      	ldr	r3, [pc, #92]	; (8001d58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfc:	220f      	movs	r2, #15
 8001cfe:	4013      	ands	r3, r2
 8001d00:	1d3a      	adds	r2, r7, #4
 8001d02:	5cd3      	ldrb	r3, [r2, r3]
 8001d04:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d08:	2380      	movs	r3, #128	; 0x80
 8001d0a:	025b      	lsls	r3, r3, #9
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d009      	beq.n	8001d24 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d12:	4812      	ldr	r0, [pc, #72]	; (8001d5c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d14:	f7fe f9f8 	bl	8000108 <__udivsi3>
 8001d18:	0003      	movs	r3, r0
 8001d1a:	001a      	movs	r2, r3
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1e:	4353      	muls	r3, r2
 8001d20:	637b      	str	r3, [r7, #52]	; 0x34
 8001d22:	e009      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001d24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d26:	000a      	movs	r2, r1
 8001d28:	0152      	lsls	r2, r2, #5
 8001d2a:	1a52      	subs	r2, r2, r1
 8001d2c:	0193      	lsls	r3, r2, #6
 8001d2e:	1a9b      	subs	r3, r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	185b      	adds	r3, r3, r1
 8001d34:	021b      	lsls	r3, r3, #8
 8001d36:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d3a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d3c:	e002      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d3e:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d40:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d42:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001d46:	0018      	movs	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	b00f      	add	sp, #60	; 0x3c
 8001d4c:	bd90      	pop	{r4, r7, pc}
 8001d4e:	46c0      	nop			; (mov r8, r8)
 8001d50:	080026fc 	.word	0x080026fc
 8001d54:	0800270c 	.word	0x0800270c
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	007a1200 	.word	0x007a1200

08001d60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e08a      	b.n	8001e88 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	225d      	movs	r2, #93	; 0x5d
 8001d7c:	5c9b      	ldrb	r3, [r3, r2]
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d107      	bne.n	8001d94 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	225c      	movs	r2, #92	; 0x5c
 8001d88:	2100      	movs	r1, #0
 8001d8a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	0018      	movs	r0, r3
 8001d90:	f7fe ffce 	bl	8000d30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	225d      	movs	r2, #93	; 0x5d
 8001d98:	2102      	movs	r1, #2
 8001d9a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2140      	movs	r1, #64	; 0x40
 8001da8:	438a      	bics	r2, r1
 8001daa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	23e0      	movs	r3, #224	; 0xe0
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d902      	bls.n	8001dbe <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001db8:	2300      	movs	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	e002      	b.n	8001dc4 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001dbe:	2380      	movs	r3, #128	; 0x80
 8001dc0:	015b      	lsls	r3, r3, #5
 8001dc2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68da      	ldr	r2, [r3, #12]
 8001dc8:	23f0      	movs	r3, #240	; 0xf0
 8001dca:	011b      	lsls	r3, r3, #4
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d008      	beq.n	8001de2 <HAL_SPI_Init+0x82>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68da      	ldr	r2, [r3, #12]
 8001dd4:	23e0      	movs	r3, #224	; 0xe0
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d002      	beq.n	8001de2 <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10c      	bne.n	8001e04 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	23e0      	movs	r3, #224	; 0xe0
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d903      	bls.n	8001dfe <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2202      	movs	r2, #2
 8001dfa:	631a      	str	r2, [r3, #48]	; 0x30
 8001dfc:	e002      	b.n	8001e04 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	431a      	orrs	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6999      	ldr	r1, [r3, #24]
 8001e1e:	2380      	movs	r3, #128	; 0x80
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	400b      	ands	r3, r1
 8001e24:	431a      	orrs	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	431a      	orrs	r2, r3
 8001e32:	0011      	movs	r1, r2
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	0c1b      	lsrs	r3, r3, #16
 8001e46:	2204      	movs	r2, #4
 8001e48:	401a      	ands	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e54:	431a      	orrs	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	0011      	movs	r1, r2
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	69da      	ldr	r2, [r3, #28]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4907      	ldr	r1, [pc, #28]	; (8001e90 <HAL_SPI_Init+0x130>)
 8001e74:	400a      	ands	r2, r1
 8001e76:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	225d      	movs	r2, #93	; 0x5d
 8001e82:	2101      	movs	r1, #1
 8001e84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	0018      	movs	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	b004      	add	sp, #16
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	fffff7ff 	.word	0xfffff7ff

08001e94 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b088      	sub	sp, #32
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	603b      	str	r3, [r7, #0]
 8001ea0:	1dbb      	adds	r3, r7, #6
 8001ea2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ea4:	231f      	movs	r3, #31
 8001ea6:	18fb      	adds	r3, r7, r3
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	225c      	movs	r2, #92	; 0x5c
 8001eb0:	5c9b      	ldrb	r3, [r3, r2]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d101      	bne.n	8001eba <HAL_SPI_Transmit+0x26>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e169      	b.n	800218e <HAL_SPI_Transmit+0x2fa>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	225c      	movs	r2, #92	; 0x5c
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ec2:	f7ff f875 	bl	8000fb0 <HAL_GetTick>
 8001ec6:	0003      	movs	r3, r0
 8001ec8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001eca:	2316      	movs	r3, #22
 8001ecc:	18fb      	adds	r3, r7, r3
 8001ece:	1dba      	adds	r2, r7, #6
 8001ed0:	8812      	ldrh	r2, [r2, #0]
 8001ed2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	225d      	movs	r2, #93	; 0x5d
 8001ed8:	5c9b      	ldrb	r3, [r3, r2]
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d004      	beq.n	8001eea <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001ee0:	231f      	movs	r3, #31
 8001ee2:	18fb      	adds	r3, r7, r3
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	701a      	strb	r2, [r3, #0]
    goto error;
 8001ee8:	e146      	b.n	8002178 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_SPI_Transmit+0x64>
 8001ef0:	1dbb      	adds	r3, r7, #6
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d104      	bne.n	8001f02 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001ef8:	231f      	movs	r3, #31
 8001efa:	18fb      	adds	r3, r7, r3
 8001efc:	2201      	movs	r2, #1
 8001efe:	701a      	strb	r2, [r3, #0]
    goto error;
 8001f00:	e13a      	b.n	8002178 <HAL_SPI_Transmit+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	225d      	movs	r2, #93	; 0x5d
 8001f06:	2103      	movs	r1, #3
 8001f08:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	1dba      	adds	r2, r7, #6
 8001f1a:	8812      	ldrh	r2, [r2, #0]
 8001f1c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	1dba      	adds	r2, r7, #6
 8001f22:	8812      	ldrh	r2, [r2, #0]
 8001f24:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2244      	movs	r2, #68	; 0x44
 8001f30:	2100      	movs	r1, #0
 8001f32:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2246      	movs	r2, #70	; 0x46
 8001f38:	2100      	movs	r1, #0
 8001f3a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	2380      	movs	r3, #128	; 0x80
 8001f4e:	021b      	lsls	r3, r3, #8
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d108      	bne.n	8001f66 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2180      	movs	r1, #128	; 0x80
 8001f60:	01c9      	lsls	r1, r1, #7
 8001f62:	430a      	orrs	r2, r1
 8001f64:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2240      	movs	r2, #64	; 0x40
 8001f6e:	4013      	ands	r3, r2
 8001f70:	2b40      	cmp	r3, #64	; 0x40
 8001f72:	d007      	beq.n	8001f84 <HAL_SPI_Transmit+0xf0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2140      	movs	r1, #64	; 0x40
 8001f80:	430a      	orrs	r2, r1
 8001f82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	68da      	ldr	r2, [r3, #12]
 8001f88:	23e0      	movs	r3, #224	; 0xe0
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d94e      	bls.n	800202e <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d004      	beq.n	8001fa2 <HAL_SPI_Transmit+0x10e>
 8001f98:	2316      	movs	r3, #22
 8001f9a:	18fb      	adds	r3, r7, r3
 8001f9c:	881b      	ldrh	r3, [r3, #0]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d13f      	bne.n	8002022 <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa6:	881a      	ldrh	r2, [r3, #0]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb2:	1c9a      	adds	r2, r3, #2
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001fc6:	e02c      	b.n	8002022 <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	2202      	movs	r2, #2
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d112      	bne.n	8001ffc <HAL_SPI_Transmit+0x168>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fda:	881a      	ldrh	r2, [r3, #0]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe6:	1c9a      	adds	r2, r3, #2
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001ffa:	e012      	b.n	8002022 <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ffc:	f7fe ffd8 	bl	8000fb0 <HAL_GetTick>
 8002000:	0002      	movs	r2, r0
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	429a      	cmp	r2, r3
 800200a:	d802      	bhi.n	8002012 <HAL_SPI_Transmit+0x17e>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	3301      	adds	r3, #1
 8002010:	d102      	bne.n	8002018 <HAL_SPI_Transmit+0x184>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d104      	bne.n	8002022 <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8002018:	231f      	movs	r3, #31
 800201a:	18fb      	adds	r3, r7, r3
 800201c:	2203      	movs	r2, #3
 800201e:	701a      	strb	r2, [r3, #0]
          goto error;
 8002020:	e0aa      	b.n	8002178 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002026:	b29b      	uxth	r3, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1cd      	bne.n	8001fc8 <HAL_SPI_Transmit+0x134>
 800202c:	e080      	b.n	8002130 <HAL_SPI_Transmit+0x29c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d005      	beq.n	8002042 <HAL_SPI_Transmit+0x1ae>
 8002036:	2316      	movs	r3, #22
 8002038:	18fb      	adds	r3, r7, r3
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d000      	beq.n	8002042 <HAL_SPI_Transmit+0x1ae>
 8002040:	e071      	b.n	8002126 <HAL_SPI_Transmit+0x292>
    {
      if (hspi->TxXferCount > 1U)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002046:	b29b      	uxth	r3, r3
 8002048:	2b01      	cmp	r3, #1
 800204a:	d912      	bls.n	8002072 <HAL_SPI_Transmit+0x1de>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002050:	881a      	ldrh	r2, [r3, #0]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800205c:	1c9a      	adds	r2, r3, #2
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002066:	b29b      	uxth	r3, r3
 8002068:	3b02      	subs	r3, #2
 800206a:	b29a      	uxth	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002070:	e059      	b.n	8002126 <HAL_SPI_Transmit+0x292>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	330c      	adds	r3, #12
 800207c:	7812      	ldrb	r2, [r2, #0]
 800207e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002084:	1c5a      	adds	r2, r3, #1
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800208e:	b29b      	uxth	r3, r3
 8002090:	3b01      	subs	r3, #1
 8002092:	b29a      	uxth	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002098:	e045      	b.n	8002126 <HAL_SPI_Transmit+0x292>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	2202      	movs	r2, #2
 80020a2:	4013      	ands	r3, r2
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d12b      	bne.n	8002100 <HAL_SPI_Transmit+0x26c>
      {
        if (hspi->TxXferCount > 1U)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d912      	bls.n	80020d8 <HAL_SPI_Transmit+0x244>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b6:	881a      	ldrh	r2, [r3, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c2:	1c9a      	adds	r2, r3, #2
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	3b02      	subs	r3, #2
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80020d6:	e026      	b.n	8002126 <HAL_SPI_Transmit+0x292>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	330c      	adds	r3, #12
 80020e2:	7812      	ldrb	r2, [r2, #0]
 80020e4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	3b01      	subs	r3, #1
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80020fe:	e012      	b.n	8002126 <HAL_SPI_Transmit+0x292>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002100:	f7fe ff56 	bl	8000fb0 <HAL_GetTick>
 8002104:	0002      	movs	r2, r0
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	429a      	cmp	r2, r3
 800210e:	d802      	bhi.n	8002116 <HAL_SPI_Transmit+0x282>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	3301      	adds	r3, #1
 8002114:	d102      	bne.n	800211c <HAL_SPI_Transmit+0x288>
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d104      	bne.n	8002126 <HAL_SPI_Transmit+0x292>
        {
          errorcode = HAL_TIMEOUT;
 800211c:	231f      	movs	r3, #31
 800211e:	18fb      	adds	r3, r7, r3
 8002120:	2203      	movs	r2, #3
 8002122:	701a      	strb	r2, [r3, #0]
          goto error;
 8002124:	e028      	b.n	8002178 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800212a:	b29b      	uxth	r3, r3
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1b4      	bne.n	800209a <HAL_SPI_Transmit+0x206>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	6839      	ldr	r1, [r7, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	0018      	movs	r0, r3
 8002138:	f000 f912 	bl	8002360 <SPI_EndRxTxTransaction>
 800213c:	1e03      	subs	r3, r0, #0
 800213e:	d002      	beq.n	8002146 <HAL_SPI_Transmit+0x2b2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2220      	movs	r2, #32
 8002144:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10a      	bne.n	8002164 <HAL_SPI_Transmit+0x2d0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	613b      	str	r3, [r7, #16]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	613b      	str	r3, [r7, #16]
 8002162:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002168:	2b00      	cmp	r3, #0
 800216a:	d004      	beq.n	8002176 <HAL_SPI_Transmit+0x2e2>
  {
    errorcode = HAL_ERROR;
 800216c:	231f      	movs	r3, #31
 800216e:	18fb      	adds	r3, r7, r3
 8002170:	2201      	movs	r2, #1
 8002172:	701a      	strb	r2, [r3, #0]
 8002174:	e000      	b.n	8002178 <HAL_SPI_Transmit+0x2e4>
  }

error:
 8002176:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	225d      	movs	r2, #93	; 0x5d
 800217c:	2101      	movs	r1, #1
 800217e:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	225c      	movs	r2, #92	; 0x5c
 8002184:	2100      	movs	r1, #0
 8002186:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002188:	231f      	movs	r3, #31
 800218a:	18fb      	adds	r3, r7, r3
 800218c:	781b      	ldrb	r3, [r3, #0]
}
 800218e:	0018      	movs	r0, r3
 8002190:	46bd      	mov	sp, r7
 8002192:	b008      	add	sp, #32
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	603b      	str	r3, [r7, #0]
 80021a4:	1dfb      	adds	r3, r7, #7
 80021a6:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80021a8:	e050      	b.n	800224c <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	3301      	adds	r3, #1
 80021ae:	d04d      	beq.n	800224c <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80021b0:	f7fe fefe 	bl	8000fb0 <HAL_GetTick>
 80021b4:	0002      	movs	r2, r0
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d902      	bls.n	80021c6 <SPI_WaitFlagStateUntilTimeout+0x2e>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d142      	bne.n	800224c <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	21e0      	movs	r1, #224	; 0xe0
 80021d2:	438a      	bics	r2, r1
 80021d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	2382      	movs	r3, #130	; 0x82
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	429a      	cmp	r2, r3
 80021e0:	d113      	bne.n	800220a <SPI_WaitFlagStateUntilTimeout+0x72>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	2380      	movs	r3, #128	; 0x80
 80021e8:	021b      	lsls	r3, r3, #8
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d005      	beq.n	80021fa <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	2380      	movs	r3, #128	; 0x80
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d107      	bne.n	800220a <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2140      	movs	r1, #64	; 0x40
 8002206:	438a      	bics	r2, r1
 8002208:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800220e:	2380      	movs	r3, #128	; 0x80
 8002210:	019b      	lsls	r3, r3, #6
 8002212:	429a      	cmp	r2, r3
 8002214:	d110      	bne.n	8002238 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4914      	ldr	r1, [pc, #80]	; (8002274 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8002222:	400a      	ands	r2, r1
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2180      	movs	r1, #128	; 0x80
 8002232:	0189      	lsls	r1, r1, #6
 8002234:	430a      	orrs	r2, r1
 8002236:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	225d      	movs	r2, #93	; 0x5d
 800223c:	2101      	movs	r1, #1
 800223e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	225c      	movs	r2, #92	; 0x5c
 8002244:	2100      	movs	r1, #0
 8002246:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e00f      	b.n	800226c <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	4013      	ands	r3, r2
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	425a      	negs	r2, r3
 800225c:	4153      	adcs	r3, r2
 800225e:	b2db      	uxtb	r3, r3
 8002260:	001a      	movs	r2, r3
 8002262:	1dfb      	adds	r3, r7, #7
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d19f      	bne.n	80021aa <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	0018      	movs	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	b004      	add	sp, #16
 8002272:	bd80      	pop	{r7, pc}
 8002274:	ffffdfff 	.word	0xffffdfff

08002278 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
 8002284:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8002286:	e05c      	b.n	8002342 <SPI_WaitFifoStateUntilTimeout+0xca>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002288:	68ba      	ldr	r2, [r7, #8]
 800228a:	23c0      	movs	r3, #192	; 0xc0
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	429a      	cmp	r2, r3
 8002290:	d106      	bne.n	80022a0 <SPI_WaitFifoStateUntilTimeout+0x28>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d103      	bne.n	80022a0 <SPI_WaitFifoStateUntilTimeout+0x28>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	330c      	adds	r3, #12
 800229e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	3301      	adds	r3, #1
 80022a4:	d04d      	beq.n	8002342 <SPI_WaitFifoStateUntilTimeout+0xca>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80022a6:	f7fe fe83 	bl	8000fb0 <HAL_GetTick>
 80022aa:	0002      	movs	r2, r0
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d902      	bls.n	80022bc <SPI_WaitFifoStateUntilTimeout+0x44>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d142      	bne.n	8002342 <SPI_WaitFifoStateUntilTimeout+0xca>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	21e0      	movs	r1, #224	; 0xe0
 80022c8:	438a      	bics	r2, r1
 80022ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	2382      	movs	r3, #130	; 0x82
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d113      	bne.n	8002300 <SPI_WaitFifoStateUntilTimeout+0x88>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	2380      	movs	r3, #128	; 0x80
 80022de:	021b      	lsls	r3, r3, #8
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d005      	beq.n	80022f0 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	2380      	movs	r3, #128	; 0x80
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d107      	bne.n	8002300 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2140      	movs	r1, #64	; 0x40
 80022fc:	438a      	bics	r2, r1
 80022fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002304:	2380      	movs	r3, #128	; 0x80
 8002306:	019b      	lsls	r3, r3, #6
 8002308:	429a      	cmp	r2, r3
 800230a:	d110      	bne.n	800232e <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          SPI_RESET_CRC(hspi);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4911      	ldr	r1, [pc, #68]	; (800235c <SPI_WaitFifoStateUntilTimeout+0xe4>)
 8002318:	400a      	ands	r2, r1
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2180      	movs	r1, #128	; 0x80
 8002328:	0189      	lsls	r1, r1, #6
 800232a:	430a      	orrs	r2, r1
 800232c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	225d      	movs	r2, #93	; 0x5d
 8002332:	2101      	movs	r1, #1
 8002334:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	225c      	movs	r2, #92	; 0x5c
 800233a:	2100      	movs	r1, #0
 800233c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e008      	b.n	8002354 <SPI_WaitFifoStateUntilTimeout+0xdc>
  while ((hspi->Instance->SR & Fifo) != State)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	68ba      	ldr	r2, [r7, #8]
 800234a:	4013      	ands	r3, r2
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	429a      	cmp	r2, r3
 8002350:	d19a      	bne.n	8002288 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	0018      	movs	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	b004      	add	sp, #16
 800235a:	bd80      	pop	{r7, pc}
 800235c:	ffffdfff 	.word	0xffffdfff

08002360 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af02      	add	r7, sp, #8
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	23c0      	movs	r3, #192	; 0xc0
 8002370:	0159      	lsls	r1, r3, #5
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	0013      	movs	r3, r2
 800237a:	2200      	movs	r2, #0
 800237c:	f7ff ff7c 	bl	8002278 <SPI_WaitFifoStateUntilTimeout>
 8002380:	1e03      	subs	r3, r0, #0
 8002382:	d007      	beq.n	8002394 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002388:	2220      	movs	r2, #32
 800238a:	431a      	orrs	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e027      	b.n	80023e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	0013      	movs	r3, r2
 800239e:	2200      	movs	r2, #0
 80023a0:	2180      	movs	r1, #128	; 0x80
 80023a2:	f7ff fef9 	bl	8002198 <SPI_WaitFlagStateUntilTimeout>
 80023a6:	1e03      	subs	r3, r0, #0
 80023a8:	d007      	beq.n	80023ba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ae:	2220      	movs	r2, #32
 80023b0:	431a      	orrs	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e014      	b.n	80023e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	23c0      	movs	r3, #192	; 0xc0
 80023be:	00d9      	lsls	r1, r3, #3
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	0013      	movs	r3, r2
 80023c8:	2200      	movs	r2, #0
 80023ca:	f7ff ff55 	bl	8002278 <SPI_WaitFifoStateUntilTimeout>
 80023ce:	1e03      	subs	r3, r0, #0
 80023d0:	d007      	beq.n	80023e2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d6:	2220      	movs	r2, #32
 80023d8:	431a      	orrs	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e000      	b.n	80023e4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	0018      	movs	r0, r3
 80023e6:	46bd      	mov	sp, r7
 80023e8:	b004      	add	sp, #16
 80023ea:	bd80      	pop	{r7, pc}

080023ec <_ZdlPvj>:
 80023ec:	b510      	push	{r4, lr}
 80023ee:	f000 f819 	bl	8002424 <_ZdlPv>
 80023f2:	bd10      	pop	{r4, pc}

080023f4 <_Znwj>:
 80023f4:	b510      	push	{r4, lr}
 80023f6:	1e04      	subs	r4, r0, #0
 80023f8:	d100      	bne.n	80023fc <_Znwj+0x8>
 80023fa:	3401      	adds	r4, #1
 80023fc:	0020      	movs	r0, r4
 80023fe:	f000 f847 	bl	8002490 <malloc>
 8002402:	2800      	cmp	r0, #0
 8002404:	d107      	bne.n	8002416 <_Znwj+0x22>
 8002406:	f000 f807 	bl	8002418 <_ZSt15get_new_handlerv>
 800240a:	2800      	cmp	r0, #0
 800240c:	d101      	bne.n	8002412 <_Znwj+0x1e>
 800240e:	f000 f80d 	bl	800242c <abort>
 8002412:	4780      	blx	r0
 8002414:	e7f2      	b.n	80023fc <_Znwj+0x8>
 8002416:	bd10      	pop	{r4, pc}

08002418 <_ZSt15get_new_handlerv>:
 8002418:	4b01      	ldr	r3, [pc, #4]	; (8002420 <_ZSt15get_new_handlerv+0x8>)
 800241a:	6818      	ldr	r0, [r3, #0]
 800241c:	4770      	bx	lr
 800241e:	46c0      	nop			; (mov r8, r8)
 8002420:	200000f4 	.word	0x200000f4

08002424 <_ZdlPv>:
 8002424:	b510      	push	{r4, lr}
 8002426:	f000 f83d 	bl	80024a4 <free>
 800242a:	bd10      	pop	{r4, pc}

0800242c <abort>:
 800242c:	b510      	push	{r4, lr}
 800242e:	2006      	movs	r0, #6
 8002430:	f000 f92e 	bl	8002690 <raise>
 8002434:	2001      	movs	r0, #1
 8002436:	f7fe fcf8 	bl	8000e2a <_exit>
	...

0800243c <__errno>:
 800243c:	4b01      	ldr	r3, [pc, #4]	; (8002444 <__errno+0x8>)
 800243e:	6818      	ldr	r0, [r3, #0]
 8002440:	4770      	bx	lr
 8002442:	46c0      	nop			; (mov r8, r8)
 8002444:	2000000c 	.word	0x2000000c

08002448 <__libc_init_array>:
 8002448:	b570      	push	{r4, r5, r6, lr}
 800244a:	2600      	movs	r6, #0
 800244c:	4d0c      	ldr	r5, [pc, #48]	; (8002480 <__libc_init_array+0x38>)
 800244e:	4c0d      	ldr	r4, [pc, #52]	; (8002484 <__libc_init_array+0x3c>)
 8002450:	1b64      	subs	r4, r4, r5
 8002452:	10a4      	asrs	r4, r4, #2
 8002454:	42a6      	cmp	r6, r4
 8002456:	d109      	bne.n	800246c <__libc_init_array+0x24>
 8002458:	2600      	movs	r6, #0
 800245a:	f000 f93b 	bl	80026d4 <_init>
 800245e:	4d0a      	ldr	r5, [pc, #40]	; (8002488 <__libc_init_array+0x40>)
 8002460:	4c0a      	ldr	r4, [pc, #40]	; (800248c <__libc_init_array+0x44>)
 8002462:	1b64      	subs	r4, r4, r5
 8002464:	10a4      	asrs	r4, r4, #2
 8002466:	42a6      	cmp	r6, r4
 8002468:	d105      	bne.n	8002476 <__libc_init_array+0x2e>
 800246a:	bd70      	pop	{r4, r5, r6, pc}
 800246c:	00b3      	lsls	r3, r6, #2
 800246e:	58eb      	ldr	r3, [r5, r3]
 8002470:	4798      	blx	r3
 8002472:	3601      	adds	r6, #1
 8002474:	e7ee      	b.n	8002454 <__libc_init_array+0xc>
 8002476:	00b3      	lsls	r3, r6, #2
 8002478:	58eb      	ldr	r3, [r5, r3]
 800247a:	4798      	blx	r3
 800247c:	3601      	adds	r6, #1
 800247e:	e7f2      	b.n	8002466 <__libc_init_array+0x1e>
 8002480:	0800279c 	.word	0x0800279c
 8002484:	0800279c 	.word	0x0800279c
 8002488:	0800279c 	.word	0x0800279c
 800248c:	080027a0 	.word	0x080027a0

08002490 <malloc>:
 8002490:	b510      	push	{r4, lr}
 8002492:	4b03      	ldr	r3, [pc, #12]	; (80024a0 <malloc+0x10>)
 8002494:	0001      	movs	r1, r0
 8002496:	6818      	ldr	r0, [r3, #0]
 8002498:	f000 f860 	bl	800255c <_malloc_r>
 800249c:	bd10      	pop	{r4, pc}
 800249e:	46c0      	nop			; (mov r8, r8)
 80024a0:	2000000c 	.word	0x2000000c

080024a4 <free>:
 80024a4:	b510      	push	{r4, lr}
 80024a6:	4b03      	ldr	r3, [pc, #12]	; (80024b4 <free+0x10>)
 80024a8:	0001      	movs	r1, r0
 80024aa:	6818      	ldr	r0, [r3, #0]
 80024ac:	f000 f80c 	bl	80024c8 <_free_r>
 80024b0:	bd10      	pop	{r4, pc}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	2000000c 	.word	0x2000000c

080024b8 <memset>:
 80024b8:	0003      	movs	r3, r0
 80024ba:	1812      	adds	r2, r2, r0
 80024bc:	4293      	cmp	r3, r2
 80024be:	d100      	bne.n	80024c2 <memset+0xa>
 80024c0:	4770      	bx	lr
 80024c2:	7019      	strb	r1, [r3, #0]
 80024c4:	3301      	adds	r3, #1
 80024c6:	e7f9      	b.n	80024bc <memset+0x4>

080024c8 <_free_r>:
 80024c8:	b570      	push	{r4, r5, r6, lr}
 80024ca:	0005      	movs	r5, r0
 80024cc:	2900      	cmp	r1, #0
 80024ce:	d010      	beq.n	80024f2 <_free_r+0x2a>
 80024d0:	1f0c      	subs	r4, r1, #4
 80024d2:	6823      	ldr	r3, [r4, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	da00      	bge.n	80024da <_free_r+0x12>
 80024d8:	18e4      	adds	r4, r4, r3
 80024da:	0028      	movs	r0, r5
 80024dc:	f000 f8f8 	bl	80026d0 <__malloc_lock>
 80024e0:	4a1d      	ldr	r2, [pc, #116]	; (8002558 <_free_r+0x90>)
 80024e2:	6813      	ldr	r3, [r2, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d105      	bne.n	80024f4 <_free_r+0x2c>
 80024e8:	6063      	str	r3, [r4, #4]
 80024ea:	6014      	str	r4, [r2, #0]
 80024ec:	0028      	movs	r0, r5
 80024ee:	f000 f8f0 	bl	80026d2 <__malloc_unlock>
 80024f2:	bd70      	pop	{r4, r5, r6, pc}
 80024f4:	42a3      	cmp	r3, r4
 80024f6:	d909      	bls.n	800250c <_free_r+0x44>
 80024f8:	6821      	ldr	r1, [r4, #0]
 80024fa:	1860      	adds	r0, r4, r1
 80024fc:	4283      	cmp	r3, r0
 80024fe:	d1f3      	bne.n	80024e8 <_free_r+0x20>
 8002500:	6818      	ldr	r0, [r3, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	1841      	adds	r1, r0, r1
 8002506:	6021      	str	r1, [r4, #0]
 8002508:	e7ee      	b.n	80024e8 <_free_r+0x20>
 800250a:	0013      	movs	r3, r2
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	2a00      	cmp	r2, #0
 8002510:	d001      	beq.n	8002516 <_free_r+0x4e>
 8002512:	42a2      	cmp	r2, r4
 8002514:	d9f9      	bls.n	800250a <_free_r+0x42>
 8002516:	6819      	ldr	r1, [r3, #0]
 8002518:	1858      	adds	r0, r3, r1
 800251a:	42a0      	cmp	r0, r4
 800251c:	d10b      	bne.n	8002536 <_free_r+0x6e>
 800251e:	6820      	ldr	r0, [r4, #0]
 8002520:	1809      	adds	r1, r1, r0
 8002522:	1858      	adds	r0, r3, r1
 8002524:	6019      	str	r1, [r3, #0]
 8002526:	4282      	cmp	r2, r0
 8002528:	d1e0      	bne.n	80024ec <_free_r+0x24>
 800252a:	6810      	ldr	r0, [r2, #0]
 800252c:	6852      	ldr	r2, [r2, #4]
 800252e:	1841      	adds	r1, r0, r1
 8002530:	6019      	str	r1, [r3, #0]
 8002532:	605a      	str	r2, [r3, #4]
 8002534:	e7da      	b.n	80024ec <_free_r+0x24>
 8002536:	42a0      	cmp	r0, r4
 8002538:	d902      	bls.n	8002540 <_free_r+0x78>
 800253a:	230c      	movs	r3, #12
 800253c:	602b      	str	r3, [r5, #0]
 800253e:	e7d5      	b.n	80024ec <_free_r+0x24>
 8002540:	6821      	ldr	r1, [r4, #0]
 8002542:	1860      	adds	r0, r4, r1
 8002544:	4282      	cmp	r2, r0
 8002546:	d103      	bne.n	8002550 <_free_r+0x88>
 8002548:	6810      	ldr	r0, [r2, #0]
 800254a:	6852      	ldr	r2, [r2, #4]
 800254c:	1841      	adds	r1, r0, r1
 800254e:	6021      	str	r1, [r4, #0]
 8002550:	6062      	str	r2, [r4, #4]
 8002552:	605c      	str	r4, [r3, #4]
 8002554:	e7ca      	b.n	80024ec <_free_r+0x24>
 8002556:	46c0      	nop			; (mov r8, r8)
 8002558:	200000f8 	.word	0x200000f8

0800255c <_malloc_r>:
 800255c:	2303      	movs	r3, #3
 800255e:	b570      	push	{r4, r5, r6, lr}
 8002560:	1ccd      	adds	r5, r1, #3
 8002562:	439d      	bics	r5, r3
 8002564:	3508      	adds	r5, #8
 8002566:	0006      	movs	r6, r0
 8002568:	2d0c      	cmp	r5, #12
 800256a:	d21e      	bcs.n	80025aa <_malloc_r+0x4e>
 800256c:	250c      	movs	r5, #12
 800256e:	42a9      	cmp	r1, r5
 8002570:	d81d      	bhi.n	80025ae <_malloc_r+0x52>
 8002572:	0030      	movs	r0, r6
 8002574:	f000 f8ac 	bl	80026d0 <__malloc_lock>
 8002578:	4a25      	ldr	r2, [pc, #148]	; (8002610 <_malloc_r+0xb4>)
 800257a:	6814      	ldr	r4, [r2, #0]
 800257c:	0021      	movs	r1, r4
 800257e:	2900      	cmp	r1, #0
 8002580:	d119      	bne.n	80025b6 <_malloc_r+0x5a>
 8002582:	4c24      	ldr	r4, [pc, #144]	; (8002614 <_malloc_r+0xb8>)
 8002584:	6823      	ldr	r3, [r4, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d103      	bne.n	8002592 <_malloc_r+0x36>
 800258a:	0030      	movs	r0, r6
 800258c:	f000 f844 	bl	8002618 <_sbrk_r>
 8002590:	6020      	str	r0, [r4, #0]
 8002592:	0029      	movs	r1, r5
 8002594:	0030      	movs	r0, r6
 8002596:	f000 f83f 	bl	8002618 <_sbrk_r>
 800259a:	1c43      	adds	r3, r0, #1
 800259c:	d12b      	bne.n	80025f6 <_malloc_r+0x9a>
 800259e:	230c      	movs	r3, #12
 80025a0:	0030      	movs	r0, r6
 80025a2:	6033      	str	r3, [r6, #0]
 80025a4:	f000 f895 	bl	80026d2 <__malloc_unlock>
 80025a8:	e003      	b.n	80025b2 <_malloc_r+0x56>
 80025aa:	2d00      	cmp	r5, #0
 80025ac:	dadf      	bge.n	800256e <_malloc_r+0x12>
 80025ae:	230c      	movs	r3, #12
 80025b0:	6033      	str	r3, [r6, #0]
 80025b2:	2000      	movs	r0, #0
 80025b4:	bd70      	pop	{r4, r5, r6, pc}
 80025b6:	680b      	ldr	r3, [r1, #0]
 80025b8:	1b5b      	subs	r3, r3, r5
 80025ba:	d419      	bmi.n	80025f0 <_malloc_r+0x94>
 80025bc:	2b0b      	cmp	r3, #11
 80025be:	d903      	bls.n	80025c8 <_malloc_r+0x6c>
 80025c0:	600b      	str	r3, [r1, #0]
 80025c2:	18cc      	adds	r4, r1, r3
 80025c4:	6025      	str	r5, [r4, #0]
 80025c6:	e003      	b.n	80025d0 <_malloc_r+0x74>
 80025c8:	684b      	ldr	r3, [r1, #4]
 80025ca:	428c      	cmp	r4, r1
 80025cc:	d10d      	bne.n	80025ea <_malloc_r+0x8e>
 80025ce:	6013      	str	r3, [r2, #0]
 80025d0:	0030      	movs	r0, r6
 80025d2:	f000 f87e 	bl	80026d2 <__malloc_unlock>
 80025d6:	0020      	movs	r0, r4
 80025d8:	2207      	movs	r2, #7
 80025da:	300b      	adds	r0, #11
 80025dc:	1d23      	adds	r3, r4, #4
 80025de:	4390      	bics	r0, r2
 80025e0:	1ac3      	subs	r3, r0, r3
 80025e2:	d0e7      	beq.n	80025b4 <_malloc_r+0x58>
 80025e4:	425a      	negs	r2, r3
 80025e6:	50e2      	str	r2, [r4, r3]
 80025e8:	e7e4      	b.n	80025b4 <_malloc_r+0x58>
 80025ea:	6063      	str	r3, [r4, #4]
 80025ec:	000c      	movs	r4, r1
 80025ee:	e7ef      	b.n	80025d0 <_malloc_r+0x74>
 80025f0:	000c      	movs	r4, r1
 80025f2:	6849      	ldr	r1, [r1, #4]
 80025f4:	e7c3      	b.n	800257e <_malloc_r+0x22>
 80025f6:	2303      	movs	r3, #3
 80025f8:	1cc4      	adds	r4, r0, #3
 80025fa:	439c      	bics	r4, r3
 80025fc:	42a0      	cmp	r0, r4
 80025fe:	d0e1      	beq.n	80025c4 <_malloc_r+0x68>
 8002600:	1a21      	subs	r1, r4, r0
 8002602:	0030      	movs	r0, r6
 8002604:	f000 f808 	bl	8002618 <_sbrk_r>
 8002608:	1c43      	adds	r3, r0, #1
 800260a:	d1db      	bne.n	80025c4 <_malloc_r+0x68>
 800260c:	e7c7      	b.n	800259e <_malloc_r+0x42>
 800260e:	46c0      	nop			; (mov r8, r8)
 8002610:	200000f8 	.word	0x200000f8
 8002614:	200000fc 	.word	0x200000fc

08002618 <_sbrk_r>:
 8002618:	2300      	movs	r3, #0
 800261a:	b570      	push	{r4, r5, r6, lr}
 800261c:	4c06      	ldr	r4, [pc, #24]	; (8002638 <_sbrk_r+0x20>)
 800261e:	0005      	movs	r5, r0
 8002620:	0008      	movs	r0, r1
 8002622:	6023      	str	r3, [r4, #0]
 8002624:	f7fe fc0e 	bl	8000e44 <_sbrk>
 8002628:	1c43      	adds	r3, r0, #1
 800262a:	d103      	bne.n	8002634 <_sbrk_r+0x1c>
 800262c:	6823      	ldr	r3, [r4, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d000      	beq.n	8002634 <_sbrk_r+0x1c>
 8002632:	602b      	str	r3, [r5, #0]
 8002634:	bd70      	pop	{r4, r5, r6, pc}
 8002636:	46c0      	nop			; (mov r8, r8)
 8002638:	20000104 	.word	0x20000104

0800263c <_raise_r>:
 800263c:	b570      	push	{r4, r5, r6, lr}
 800263e:	0004      	movs	r4, r0
 8002640:	000d      	movs	r5, r1
 8002642:	291f      	cmp	r1, #31
 8002644:	d904      	bls.n	8002650 <_raise_r+0x14>
 8002646:	2316      	movs	r3, #22
 8002648:	6003      	str	r3, [r0, #0]
 800264a:	2001      	movs	r0, #1
 800264c:	4240      	negs	r0, r0
 800264e:	bd70      	pop	{r4, r5, r6, pc}
 8002650:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002652:	2b00      	cmp	r3, #0
 8002654:	d004      	beq.n	8002660 <_raise_r+0x24>
 8002656:	008a      	lsls	r2, r1, #2
 8002658:	189b      	adds	r3, r3, r2
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	2a00      	cmp	r2, #0
 800265e:	d108      	bne.n	8002672 <_raise_r+0x36>
 8002660:	0020      	movs	r0, r4
 8002662:	f000 f831 	bl	80026c8 <_getpid_r>
 8002666:	002a      	movs	r2, r5
 8002668:	0001      	movs	r1, r0
 800266a:	0020      	movs	r0, r4
 800266c:	f000 f81a 	bl	80026a4 <_kill_r>
 8002670:	e7ed      	b.n	800264e <_raise_r+0x12>
 8002672:	2000      	movs	r0, #0
 8002674:	2a01      	cmp	r2, #1
 8002676:	d0ea      	beq.n	800264e <_raise_r+0x12>
 8002678:	1c51      	adds	r1, r2, #1
 800267a:	d103      	bne.n	8002684 <_raise_r+0x48>
 800267c:	2316      	movs	r3, #22
 800267e:	3001      	adds	r0, #1
 8002680:	6023      	str	r3, [r4, #0]
 8002682:	e7e4      	b.n	800264e <_raise_r+0x12>
 8002684:	2400      	movs	r4, #0
 8002686:	0028      	movs	r0, r5
 8002688:	601c      	str	r4, [r3, #0]
 800268a:	4790      	blx	r2
 800268c:	0020      	movs	r0, r4
 800268e:	e7de      	b.n	800264e <_raise_r+0x12>

08002690 <raise>:
 8002690:	b510      	push	{r4, lr}
 8002692:	4b03      	ldr	r3, [pc, #12]	; (80026a0 <raise+0x10>)
 8002694:	0001      	movs	r1, r0
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	f7ff ffd0 	bl	800263c <_raise_r>
 800269c:	bd10      	pop	{r4, pc}
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	2000000c 	.word	0x2000000c

080026a4 <_kill_r>:
 80026a4:	2300      	movs	r3, #0
 80026a6:	b570      	push	{r4, r5, r6, lr}
 80026a8:	4c06      	ldr	r4, [pc, #24]	; (80026c4 <_kill_r+0x20>)
 80026aa:	0005      	movs	r5, r0
 80026ac:	0008      	movs	r0, r1
 80026ae:	0011      	movs	r1, r2
 80026b0:	6023      	str	r3, [r4, #0]
 80026b2:	f7fe fbaa 	bl	8000e0a <_kill>
 80026b6:	1c43      	adds	r3, r0, #1
 80026b8:	d103      	bne.n	80026c2 <_kill_r+0x1e>
 80026ba:	6823      	ldr	r3, [r4, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d000      	beq.n	80026c2 <_kill_r+0x1e>
 80026c0:	602b      	str	r3, [r5, #0]
 80026c2:	bd70      	pop	{r4, r5, r6, pc}
 80026c4:	20000104 	.word	0x20000104

080026c8 <_getpid_r>:
 80026c8:	b510      	push	{r4, lr}
 80026ca:	f7fe fb98 	bl	8000dfe <_getpid>
 80026ce:	bd10      	pop	{r4, pc}

080026d0 <__malloc_lock>:
 80026d0:	4770      	bx	lr

080026d2 <__malloc_unlock>:
 80026d2:	4770      	bx	lr

080026d4 <_init>:
 80026d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026d6:	46c0      	nop			; (mov r8, r8)
 80026d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026da:	bc08      	pop	{r3}
 80026dc:	469e      	mov	lr, r3
 80026de:	4770      	bx	lr

080026e0 <_fini>:
 80026e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026e2:	46c0      	nop			; (mov r8, r8)
 80026e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026e6:	bc08      	pop	{r3}
 80026e8:	469e      	mov	lr, r3
 80026ea:	4770      	bx	lr
