
bombup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002618  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080026d8  080026d8  000126d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002788  08002788  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002788  08002788  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002788  08002788  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002788  08002788  00012788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800278c  0800278c  0001278c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002790  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000070  08002800  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08002800  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000078c7  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021c8  00000000  00000000  0002795f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007c8  00000000  00000000  00029b28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006a0  00000000  00000000  0002a2f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000de95  00000000  00000000  0002a990  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000723c  00000000  00000000  00038825  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000447da  00000000  00000000  0003fa61  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0008423b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c00  00000000  00000000  000842b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080026c0 	.word	0x080026c0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080026c0 	.word	0x080026c0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <_ZN10ControllerC1Ev>:
 *      Author: youri
 */

#include "Controller.h"

Controller::Controller() {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	4a03      	ldr	r2, [pc, #12]	; (8000238 <_ZN10ControllerC1Ev+0x18>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	0018      	movs	r0, r3
 8000232:	46bd      	mov	sp, r7
 8000234:	b002      	add	sp, #8
 8000236:	bd80      	pop	{r7, pc}
 8000238:	08002710 	.word	0x08002710

0800023c <_ZN10ControllerD1Ev>:

Controller::~Controller() {
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	4a03      	ldr	r2, [pc, #12]	; (8000254 <_ZN10ControllerD1Ev+0x18>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	0018      	movs	r0, r3
 800024e:	46bd      	mov	sp, r7
 8000250:	b002      	add	sp, #8
 8000252:	bd80      	pop	{r7, pc}
 8000254:	08002710 	.word	0x08002710

08000258 <_ZN10ControllerD0Ev>:
Controller::~Controller() {
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
}
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	0018      	movs	r0, r3
 8000264:	f7ff ffea 	bl	800023c <_ZN10ControllerD1Ev>
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2108      	movs	r1, #8
 800026c:	0018      	movs	r0, r3
 800026e:	f002 f8b3 	bl	80023d8 <_ZdlPvj>
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	0018      	movs	r0, r3
 8000276:	46bd      	mov	sp, r7
 8000278:	b002      	add	sp, #8
 800027a:	bd80      	pop	{r7, pc}

0800027c <_ZN10Controller16setButtonPressedE6Button>:

void Controller::setButtonPressed(Button btn)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
 8000284:	6039      	str	r1, [r7, #0]
	this->btn = btn;
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	683a      	ldr	r2, [r7, #0]
 800028a:	605a      	str	r2, [r3, #4]
}
 800028c:	46c0      	nop			; (mov r8, r8)
 800028e:	46bd      	mov	sp, r7
 8000290:	b002      	add	sp, #8
 8000292:	bd80      	pop	{r7, pc}

08000294 <_ZN10Controller16getButtonPressedEv>:

Button Controller::getButtonPressed()
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
	return this->btn;
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	685b      	ldr	r3, [r3, #4]
}
 80002a0:	0018      	movs	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	b002      	add	sp, #8
 80002a6:	bd80      	pop	{r7, pc}

080002a8 <_ZN6EntityC1Ev>:

#include "Entity.h"

//Values to add to the x and y coordinates

Entity::Entity() {
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	4a03      	ldr	r2, [pc, #12]	; (80002c0 <_ZN6EntityC1Ev+0x18>)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	0018      	movs	r0, r3
 80002ba:	46bd      	mov	sp, r7
 80002bc:	b002      	add	sp, #8
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	08002720 	.word	0x08002720

080002c4 <_ZN6EntityC1Eii>:

Entity::Entity(int x, int y) {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	60f8      	str	r0, [r7, #12]
 80002cc:	60b9      	str	r1, [r7, #8]
 80002ce:	607a      	str	r2, [r7, #4]
 80002d0:	4a06      	ldr	r2, [pc, #24]	; (80002ec <_ZN6EntityC1Eii+0x28>)
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	601a      	str	r2, [r3, #0]
	this->x = x;
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	68ba      	ldr	r2, [r7, #8]
 80002da:	605a      	str	r2, [r3, #4]
	this->y = y;
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	687a      	ldr	r2, [r7, #4]
 80002e0:	609a      	str	r2, [r3, #8]
}
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	0018      	movs	r0, r3
 80002e6:	46bd      	mov	sp, r7
 80002e8:	b004      	add	sp, #16
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	08002720 	.word	0x08002720

080002f0 <_ZN6EntityD1Ev>:

Entity::~Entity() {
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	4a03      	ldr	r2, [pc, #12]	; (8000308 <_ZN6EntityD1Ev+0x18>)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	0018      	movs	r0, r3
 8000302:	46bd      	mov	sp, r7
 8000304:	b002      	add	sp, #8
 8000306:	bd80      	pop	{r7, pc}
 8000308:	08002720 	.word	0x08002720

0800030c <_ZN6EntityD0Ev>:
Entity::~Entity() {
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
}
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	0018      	movs	r0, r3
 8000318:	f7ff ffea 	bl	80002f0 <_ZN6EntityD1Ev>
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	210c      	movs	r1, #12
 8000320:	0018      	movs	r0, r3
 8000322:	f002 f859 	bl	80023d8 <_ZdlPvj>
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	0018      	movs	r0, r3
 800032a:	46bd      	mov	sp, r7
 800032c:	b002      	add	sp, #8
 800032e:	bd80      	pop	{r7, pc}

08000330 <_ZN6Entity4getXEv>:

int Entity::getX()
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
	return this->x;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	685b      	ldr	r3, [r3, #4]
}
 800033c:	0018      	movs	r0, r3
 800033e:	46bd      	mov	sp, r7
 8000340:	b002      	add	sp, #8
 8000342:	bd80      	pop	{r7, pc}

08000344 <_ZN6Entity4moveE9Direction>:
{
	return this->y;
}

void Entity::move(Direction dir)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
 800034c:	6039      	str	r1, [r7, #0]
	int distance = 10;
 800034e:	230a      	movs	r3, #10
 8000350:	60fb      	str	r3, [r7, #12]
	switch(dir)
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	2b01      	cmp	r3, #1
 8000356:	d00e      	beq.n	8000376 <_ZN6Entity4moveE9Direction+0x32>
 8000358:	dc02      	bgt.n	8000360 <_ZN6Entity4moveE9Direction+0x1c>
 800035a:	2b00      	cmp	r3, #0
 800035c:	d005      	beq.n	800036a <_ZN6Entity4moveE9Direction+0x26>
		case Direction::Right:
			this->x += distance;
	}
	//this->x += dir[0];
	//this->y += dir[1];
}
 800035e:	e01c      	b.n	800039a <_ZN6Entity4moveE9Direction+0x56>
	switch(dir)
 8000360:	2b02      	cmp	r3, #2
 8000362:	d00e      	beq.n	8000382 <_ZN6Entity4moveE9Direction+0x3e>
 8000364:	2b03      	cmp	r3, #3
 8000366:	d012      	beq.n	800038e <_ZN6Entity4moveE9Direction+0x4a>
}
 8000368:	e017      	b.n	800039a <_ZN6Entity4moveE9Direction+0x56>
			this->y -= distance;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	689a      	ldr	r2, [r3, #8]
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	1ad2      	subs	r2, r2, r3
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	609a      	str	r2, [r3, #8]
			this->y += distance;
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	689a      	ldr	r2, [r3, #8]
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	18d2      	adds	r2, r2, r3
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	609a      	str	r2, [r3, #8]
			this->x -= distance;
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	685a      	ldr	r2, [r3, #4]
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	1ad2      	subs	r2, r2, r3
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	605a      	str	r2, [r3, #4]
			this->x += distance;
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	685a      	ldr	r2, [r3, #4]
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	18d2      	adds	r2, r2, r3
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	605a      	str	r2, [r3, #4]
}
 800039a:	46c0      	nop			; (mov r8, r8)
 800039c:	46bd      	mov	sp, r7
 800039e:	b004      	add	sp, #16
 80003a0:	bd80      	pop	{r7, pc}
	...

080003a4 <_ZN4GameC1Ev>:

#define WIDTH 8
#define HEIGHT 8
#define PLAYER_COUNT 1

Game::Game() {
 80003a4:	b590      	push	{r4, r7, lr}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	4a0b      	ldr	r2, [pc, #44]	; (80003dc <_ZN4GameC1Ev+0x38>)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	this->lvl = new Level(WIDTH, HEIGHT, PLAYER_COUNT);
 80003b2:	23c9      	movs	r3, #201	; 0xc9
 80003b4:	00db      	lsls	r3, r3, #3
 80003b6:	0018      	movs	r0, r3
 80003b8:	f002 f812 	bl	80023e0 <_Znwj>
 80003bc:	0003      	movs	r3, r0
 80003be:	001c      	movs	r4, r3
 80003c0:	2301      	movs	r3, #1
 80003c2:	2208      	movs	r2, #8
 80003c4:	2108      	movs	r1, #8
 80003c6:	0020      	movs	r0, r4
 80003c8:	f000 f854 	bl	8000474 <_ZN5LevelC1Eiii>
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	60dc      	str	r4, [r3, #12]
}
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	0018      	movs	r0, r3
 80003d4:	46bd      	mov	sp, r7
 80003d6:	b003      	add	sp, #12
 80003d8:	bd90      	pop	{r4, r7, pc}
 80003da:	46c0      	nop			; (mov r8, r8)
 80003dc:	08002730 	.word	0x08002730

080003e0 <_ZN4GameD1Ev>:

Game::~Game() {
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
 80003e8:	4a03      	ldr	r2, [pc, #12]	; (80003f8 <_ZN4GameD1Ev+0x18>)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	0018      	movs	r0, r3
 80003f2:	46bd      	mov	sp, r7
 80003f4:	b002      	add	sp, #8
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	08002730 	.word	0x08002730

080003fc <_ZN4GameD0Ev>:
Game::~Game() {
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
}
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	0018      	movs	r0, r3
 8000408:	f7ff ffea 	bl	80003e0 <_ZN4GameD1Ev>
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	2110      	movs	r1, #16
 8000410:	0018      	movs	r0, r3
 8000412:	f001 ffe1 	bl	80023d8 <_ZdlPvj>
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	0018      	movs	r0, r3
 800041a:	46bd      	mov	sp, r7
 800041c:	b002      	add	sp, #8
 800041e:	bd80      	pop	{r7, pc}

08000420 <_ZN4Game6updateEv>:

void Game::update()
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	this->lvl->update(this->controller1, this->controller2);
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	68d8      	ldr	r0, [r3, #12]
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	6859      	ldr	r1, [r3, #4]
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	689b      	ldr	r3, [r3, #8]
 8000434:	001a      	movs	r2, r3
 8000436:	f000 f8d7 	bl	80005e8 <_ZN5Level6updateEP10ControllerS1_>
		this->lvl->update(this->controller1, this->controller2);
		//if fpga ready pin = HIGH then
		//lvl.draw();
	}*/

}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	46bd      	mov	sp, r7
 800043e:	b002      	add	sp, #8
 8000440:	bd80      	pop	{r7, pc}

08000442 <_ZN4Game14setController1EP10Controller>:

void Game::setController1(Controller *controller)
{
 8000442:	b580      	push	{r7, lr}
 8000444:	b082      	sub	sp, #8
 8000446:	af00      	add	r7, sp, #0
 8000448:	6078      	str	r0, [r7, #4]
 800044a:	6039      	str	r1, [r7, #0]
	this->controller1 = controller;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	683a      	ldr	r2, [r7, #0]
 8000450:	605a      	str	r2, [r3, #4]
}
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	46bd      	mov	sp, r7
 8000456:	b002      	add	sp, #8
 8000458:	bd80      	pop	{r7, pc}

0800045a <_ZN4Game14setController2EP10Controller>:

void Game::setController2(Controller *controller)
{
 800045a:	b580      	push	{r7, lr}
 800045c:	b082      	sub	sp, #8
 800045e:	af00      	add	r7, sp, #0
 8000460:	6078      	str	r0, [r7, #4]
 8000462:	6039      	str	r1, [r7, #0]
	this->controller2 = controller;
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	683a      	ldr	r2, [r7, #0]
 8000468:	609a      	str	r2, [r3, #8]
}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	46bd      	mov	sp, r7
 800046e:	b002      	add	sp, #8
 8000470:	bd80      	pop	{r7, pc}
	...

08000474 <_ZN5LevelC1Eiii>:
 */

#include "Level.h"
#include "Player.h"

Level::Level(int width, int height, int player_count)
 8000474:	b5b0      	push	{r4, r5, r7, lr}
 8000476:	b084      	sub	sp, #16
 8000478:	af00      	add	r7, sp, #0
 800047a:	60f8      	str	r0, [r7, #12]
 800047c:	60b9      	str	r1, [r7, #8]
 800047e:	607a      	str	r2, [r7, #4]
 8000480:	603b      	str	r3, [r7, #0]
 8000482:	4a2a      	ldr	r2, [pc, #168]	; (800052c <_ZN5LevelC1Eiii+0xb8>)
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	601a      	str	r2, [r3, #0]
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	3304      	adds	r3, #4
 800048c:	2462      	movs	r4, #98	; 0x62
 800048e:	001d      	movs	r5, r3
 8000490:	2c00      	cmp	r4, #0
 8000492:	db05      	blt.n	80004a0 <_ZN5LevelC1Eiii+0x2c>
 8000494:	0028      	movs	r0, r5
 8000496:	f7ff ff07 	bl	80002a8 <_ZN6EntityC1Ev>
 800049a:	350c      	adds	r5, #12
 800049c:	3c01      	subs	r4, #1
 800049e:	e7f7      	b.n	8000490 <_ZN5LevelC1Eiii+0x1c>
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	2295      	movs	r2, #149	; 0x95
 80004a4:	00d2      	lsls	r2, r2, #3
 80004a6:	4694      	mov	ip, r2
 80004a8:	4463      	add	r3, ip
 80004aa:	2462      	movs	r4, #98	; 0x62
 80004ac:	001d      	movs	r5, r3
 80004ae:	2c00      	cmp	r4, #0
 80004b0:	db05      	blt.n	80004be <_ZN5LevelC1Eiii+0x4a>
 80004b2:	0028      	movs	r0, r5
 80004b4:	f000 f91a 	bl	80006ec <_ZN6ObjectC1Ev>
 80004b8:	3504      	adds	r5, #4
 80004ba:	3c01      	subs	r4, #1
 80004bc:	e7f7      	b.n	80004ae <_ZN5LevelC1Eiii+0x3a>
{
	this->entityCount = 0;
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	4a1b      	ldr	r2, [pc, #108]	; (8000530 <_ZN5LevelC1Eiii+0xbc>)
 80004c2:	2100      	movs	r1, #0
 80004c4:	5099      	str	r1, [r3, r2]
	this->staticObjectCount = 0;
 80004c6:	68fa      	ldr	r2, [r7, #12]
 80004c8:	23c7      	movs	r3, #199	; 0xc7
 80004ca:	00db      	lsls	r3, r3, #3
 80004cc:	2100      	movs	r1, #0
 80004ce:	50d1      	str	r1, [r2, r3]

	this->player1 = new Player("player1", 200, 200);
 80004d0:	2010      	movs	r0, #16
 80004d2:	f001 ff85 	bl	80023e0 <_Znwj>
 80004d6:	0003      	movs	r3, r0
 80004d8:	001c      	movs	r4, r3
 80004da:	4916      	ldr	r1, [pc, #88]	; (8000534 <_ZN5LevelC1Eiii+0xc0>)
 80004dc:	23c8      	movs	r3, #200	; 0xc8
 80004de:	22c8      	movs	r2, #200	; 0xc8
 80004e0:	0020      	movs	r0, r4
 80004e2:	f000 f931 	bl	8000748 <_ZN6PlayerC1EPcii>
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	4a13      	ldr	r2, [pc, #76]	; (8000538 <_ZN5LevelC1Eiii+0xc4>)
 80004ea:	509c      	str	r4, [r3, r2]
	//this->player1->move();
	this->player2 = new Player("player2", 0 ,0);
 80004ec:	2010      	movs	r0, #16
 80004ee:	f001 ff77 	bl	80023e0 <_Znwj>
 80004f2:	0003      	movs	r3, r0
 80004f4:	001c      	movs	r4, r3
 80004f6:	4911      	ldr	r1, [pc, #68]	; (800053c <_ZN5LevelC1Eiii+0xc8>)
 80004f8:	2300      	movs	r3, #0
 80004fa:	2200      	movs	r2, #0
 80004fc:	0020      	movs	r0, r4
 80004fe:	f000 f923 	bl	8000748 <_ZN6PlayerC1EPcii>
 8000502:	68fa      	ldr	r2, [r7, #12]
 8000504:	23c8      	movs	r3, #200	; 0xc8
 8000506:	00db      	lsls	r3, r3, #3
 8000508:	50d4      	str	r4, [r2, r3]
	//this->player2->move(0,0);
	this->spi_instance = new SPIConnect();
 800050a:	2004      	movs	r0, #4
 800050c:	f001 ff68 	bl	80023e0 <_Znwj>
 8000510:	0003      	movs	r3, r0
 8000512:	001c      	movs	r4, r3
 8000514:	0020      	movs	r0, r4
 8000516:	f000 f99d 	bl	8000854 <_ZN10SPIConnectC1Ev>
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	4a08      	ldr	r2, [pc, #32]	; (8000540 <_ZN5LevelC1Eiii+0xcc>)
 800051e:	509c      	str	r4, [r3, r2]

}
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	0018      	movs	r0, r3
 8000524:	46bd      	mov	sp, r7
 8000526:	b004      	add	sp, #16
 8000528:	bdb0      	pop	{r4, r5, r7, pc}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	08002740 	.word	0x08002740
 8000530:	00000634 	.word	0x00000634
 8000534:	080026d8 	.word	0x080026d8
 8000538:	0000063c 	.word	0x0000063c
 800053c:	080026e0 	.word	0x080026e0
 8000540:	00000644 	.word	0x00000644

08000544 <_ZN5LevelD1Ev>:

Level::~Level()
 8000544:	b590      	push	{r4, r7, lr}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	4a1a      	ldr	r2, [pc, #104]	; (80005b8 <_ZN5LevelD1Ev+0x74>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2295      	movs	r2, #149	; 0x95
 8000556:	00d2      	lsls	r2, r2, #3
 8000558:	4694      	mov	ip, r2
 800055a:	4463      	add	r3, ip
 800055c:	2b00      	cmp	r3, #0
 800055e:	d014      	beq.n	800058a <_ZN5LevelD1Ev+0x46>
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2295      	movs	r2, #149	; 0x95
 8000564:	00d2      	lsls	r2, r2, #3
 8000566:	4694      	mov	ip, r2
 8000568:	4463      	add	r3, ip
 800056a:	338d      	adds	r3, #141	; 0x8d
 800056c:	33ff      	adds	r3, #255	; 0xff
 800056e:	001c      	movs	r4, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	2295      	movs	r2, #149	; 0x95
 8000574:	00d2      	lsls	r2, r2, #3
 8000576:	4694      	mov	ip, r2
 8000578:	4463      	add	r3, ip
 800057a:	429c      	cmp	r4, r3
 800057c:	d005      	beq.n	800058a <_ZN5LevelD1Ev+0x46>
 800057e:	3c04      	subs	r4, #4
 8000580:	6823      	ldr	r3, [r4, #0]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	0020      	movs	r0, r4
 8000586:	4798      	blx	r3
 8000588:	e7f2      	b.n	8000570 <_ZN5LevelD1Ev+0x2c>
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	3304      	adds	r3, #4
 800058e:	2b00      	cmp	r3, #0
 8000590:	d00d      	beq.n	80005ae <_ZN5LevelD1Ev+0x6a>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	3304      	adds	r3, #4
 8000596:	4a09      	ldr	r2, [pc, #36]	; (80005bc <_ZN5LevelD1Ev+0x78>)
 8000598:	189c      	adds	r4, r3, r2
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	3304      	adds	r3, #4
 800059e:	429c      	cmp	r4, r3
 80005a0:	d005      	beq.n	80005ae <_ZN5LevelD1Ev+0x6a>
 80005a2:	3c0c      	subs	r4, #12
 80005a4:	6823      	ldr	r3, [r4, #0]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	0020      	movs	r0, r4
 80005aa:	4798      	blx	r3
 80005ac:	e7f5      	b.n	800059a <_ZN5LevelD1Ev+0x56>
{
	// TODO Auto-generated destructor stub
}
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	0018      	movs	r0, r3
 80005b2:	46bd      	mov	sp, r7
 80005b4:	b003      	add	sp, #12
 80005b6:	bd90      	pop	{r4, r7, pc}
 80005b8:	08002740 	.word	0x08002740
 80005bc:	000004a4 	.word	0x000004a4

080005c0 <_ZN5LevelD0Ev>:
Level::~Level()
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
}
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	0018      	movs	r0, r3
 80005cc:	f7ff ffba 	bl	8000544 <_ZN5LevelD1Ev>
 80005d0:	23c9      	movs	r3, #201	; 0xc9
 80005d2:	00da      	lsls	r2, r3, #3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	0011      	movs	r1, r2
 80005d8:	0018      	movs	r0, r3
 80005da:	f001 fefd 	bl	80023d8 <_ZdlPvj>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	0018      	movs	r0, r3
 80005e2:	46bd      	mov	sp, r7
 80005e4:	b002      	add	sp, #8
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <_ZN5Level6updateEP10ControllerS1_>:

void Level::update(Controller *controller1, Controller *controller2)
{
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	60b9      	str	r1, [r7, #8]
 80005f2:	607a      	str	r2, [r7, #4]
	switch(controller1->getButtonPressed())
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	0018      	movs	r0, r3
 80005f8:	f7ff fe4c 	bl	8000294 <_ZN10Controller16getButtonPressedEv>
 80005fc:	0003      	movs	r3, r0
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d010      	beq.n	8000624 <_ZN5Level6updateEP10ControllerS1_+0x3c>
 8000602:	dc02      	bgt.n	800060a <_ZN5Level6updateEP10ControllerS1_+0x22>
 8000604:	2b00      	cmp	r3, #0
 8000606:	d005      	beq.n	8000614 <_ZN5Level6updateEP10ControllerS1_+0x2c>
 8000608:	e024      	b.n	8000654 <_ZN5Level6updateEP10ControllerS1_+0x6c>
 800060a:	2b02      	cmp	r3, #2
 800060c:	d012      	beq.n	8000634 <_ZN5Level6updateEP10ControllerS1_+0x4c>
 800060e:	2b03      	cmp	r3, #3
 8000610:	d018      	beq.n	8000644 <_ZN5Level6updateEP10ControllerS1_+0x5c>
 8000612:	e01f      	b.n	8000654 <_ZN5Level6updateEP10ControllerS1_+0x6c>
	{
		case Button::Up:
			this->player1->move(Direction::Up);
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	4a33      	ldr	r2, [pc, #204]	; (80006e4 <_ZN5Level6updateEP10ControllerS1_+0xfc>)
 8000618:	589b      	ldr	r3, [r3, r2]
 800061a:	2100      	movs	r1, #0
 800061c:	0018      	movs	r0, r3
 800061e:	f7ff fe91 	bl	8000344 <_ZN6Entity4moveE9Direction>
		break;
 8000622:	e017      	b.n	8000654 <_ZN5Level6updateEP10ControllerS1_+0x6c>
		case Button::Down:
			this->player1->move(Direction::Down);
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	4a2f      	ldr	r2, [pc, #188]	; (80006e4 <_ZN5Level6updateEP10ControllerS1_+0xfc>)
 8000628:	589b      	ldr	r3, [r3, r2]
 800062a:	2101      	movs	r1, #1
 800062c:	0018      	movs	r0, r3
 800062e:	f7ff fe89 	bl	8000344 <_ZN6Entity4moveE9Direction>
		break;
 8000632:	e00f      	b.n	8000654 <_ZN5Level6updateEP10ControllerS1_+0x6c>
		case Button::Left:
			this->player1->move(Direction::Left);
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	4a2b      	ldr	r2, [pc, #172]	; (80006e4 <_ZN5Level6updateEP10ControllerS1_+0xfc>)
 8000638:	589b      	ldr	r3, [r3, r2]
 800063a:	2102      	movs	r1, #2
 800063c:	0018      	movs	r0, r3
 800063e:	f7ff fe81 	bl	8000344 <_ZN6Entity4moveE9Direction>
		break;
 8000642:	e007      	b.n	8000654 <_ZN5Level6updateEP10ControllerS1_+0x6c>
		case Button::Right:
			this->player1->move(Direction::Right);
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	4a27      	ldr	r2, [pc, #156]	; (80006e4 <_ZN5Level6updateEP10ControllerS1_+0xfc>)
 8000648:	589b      	ldr	r3, [r3, r2]
 800064a:	2103      	movs	r1, #3
 800064c:	0018      	movs	r0, r3
 800064e:	f7ff fe79 	bl	8000344 <_ZN6Entity4moveE9Direction>
		break;
 8000652:	46c0      	nop			; (mov r8, r8)
	}

	switch(controller1->getButtonPressed())
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	0018      	movs	r0, r3
 8000658:	f7ff fe1c 	bl	8000294 <_ZN10Controller16getButtonPressedEv>
 800065c:	0003      	movs	r3, r0
 800065e:	2b01      	cmp	r3, #1
 8000660:	d011      	beq.n	8000686 <_ZN5Level6updateEP10ControllerS1_+0x9e>
 8000662:	dc02      	bgt.n	800066a <_ZN5Level6updateEP10ControllerS1_+0x82>
 8000664:	2b00      	cmp	r3, #0
 8000666:	d005      	beq.n	8000674 <_ZN5Level6updateEP10ControllerS1_+0x8c>
 8000668:	e028      	b.n	80006bc <_ZN5Level6updateEP10ControllerS1_+0xd4>
 800066a:	2b02      	cmp	r3, #2
 800066c:	d014      	beq.n	8000698 <_ZN5Level6updateEP10ControllerS1_+0xb0>
 800066e:	2b03      	cmp	r3, #3
 8000670:	d01b      	beq.n	80006aa <_ZN5Level6updateEP10ControllerS1_+0xc2>
 8000672:	e023      	b.n	80006bc <_ZN5Level6updateEP10ControllerS1_+0xd4>
		{
			case Button::Up:
				this->player2->move(Direction::Up);
 8000674:	68fa      	ldr	r2, [r7, #12]
 8000676:	23c8      	movs	r3, #200	; 0xc8
 8000678:	00db      	lsls	r3, r3, #3
 800067a:	58d3      	ldr	r3, [r2, r3]
 800067c:	2100      	movs	r1, #0
 800067e:	0018      	movs	r0, r3
 8000680:	f7ff fe60 	bl	8000344 <_ZN6Entity4moveE9Direction>
			break;
 8000684:	e01a      	b.n	80006bc <_ZN5Level6updateEP10ControllerS1_+0xd4>
			case Button::Down:
				this->player2->move(Direction::Down);
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	23c8      	movs	r3, #200	; 0xc8
 800068a:	00db      	lsls	r3, r3, #3
 800068c:	58d3      	ldr	r3, [r2, r3]
 800068e:	2101      	movs	r1, #1
 8000690:	0018      	movs	r0, r3
 8000692:	f7ff fe57 	bl	8000344 <_ZN6Entity4moveE9Direction>
			break;
 8000696:	e011      	b.n	80006bc <_ZN5Level6updateEP10ControllerS1_+0xd4>
			case Button::Left:
				this->player2->move(Direction::Left);
 8000698:	68fa      	ldr	r2, [r7, #12]
 800069a:	23c8      	movs	r3, #200	; 0xc8
 800069c:	00db      	lsls	r3, r3, #3
 800069e:	58d3      	ldr	r3, [r2, r3]
 80006a0:	2102      	movs	r1, #2
 80006a2:	0018      	movs	r0, r3
 80006a4:	f7ff fe4e 	bl	8000344 <_ZN6Entity4moveE9Direction>
			break;
 80006a8:	e008      	b.n	80006bc <_ZN5Level6updateEP10ControllerS1_+0xd4>
			case Button::Right:
				this->player2->move(Direction::Right);
 80006aa:	68fa      	ldr	r2, [r7, #12]
 80006ac:	23c8      	movs	r3, #200	; 0xc8
 80006ae:	00db      	lsls	r3, r3, #3
 80006b0:	58d3      	ldr	r3, [r2, r3]
 80006b2:	2103      	movs	r1, #3
 80006b4:	0018      	movs	r0, r3
 80006b6:	f7ff fe45 	bl	8000344 <_ZN6Entity4moveE9Direction>
			break;
 80006ba:	46c0      	nop			; (mov r8, r8)
	for(int i = 0; i < this->staticObjectCount; i++)
	{

	}*/
	//spi_write(9);
	spi_instance->write(this->player1->getX());
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	4a0a      	ldr	r2, [pc, #40]	; (80006e8 <_ZN5Level6updateEP10ControllerS1_+0x100>)
 80006c0:	589c      	ldr	r4, [r3, r2]
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	4a07      	ldr	r2, [pc, #28]	; (80006e4 <_ZN5Level6updateEP10ControllerS1_+0xfc>)
 80006c6:	589b      	ldr	r3, [r3, r2]
 80006c8:	0018      	movs	r0, r3
 80006ca:	f7ff fe31 	bl	8000330 <_ZN6Entity4getXEv>
 80006ce:	0003      	movs	r3, r0
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	0019      	movs	r1, r3
 80006d4:	0020      	movs	r0, r4
 80006d6:	f000 f8ed 	bl	80008b4 <_ZN10SPIConnect5writeEh>
}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	46bd      	mov	sp, r7
 80006de:	b005      	add	sp, #20
 80006e0:	bd90      	pop	{r4, r7, pc}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	0000063c 	.word	0x0000063c
 80006e8:	00000644 	.word	0x00000644

080006ec <_ZN6ObjectC1Ev>:
 *      Author: youri
 */

#include "Object.h"

Object::Object() {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	4a03      	ldr	r2, [pc, #12]	; (8000704 <_ZN6ObjectC1Ev+0x18>)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	0018      	movs	r0, r3
 80006fe:	46bd      	mov	sp, r7
 8000700:	b002      	add	sp, #8
 8000702:	bd80      	pop	{r7, pc}
 8000704:	08002750 	.word	0x08002750

08000708 <_ZN6ObjectD1Ev>:

Object::~Object() {
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	4a03      	ldr	r2, [pc, #12]	; (8000720 <_ZN6ObjectD1Ev+0x18>)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	0018      	movs	r0, r3
 800071a:	46bd      	mov	sp, r7
 800071c:	b002      	add	sp, #8
 800071e:	bd80      	pop	{r7, pc}
 8000720:	08002750 	.word	0x08002750

08000724 <_ZN6ObjectD0Ev>:
Object::~Object() {
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
}
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	0018      	movs	r0, r3
 8000730:	f7ff ffea 	bl	8000708 <_ZN6ObjectD1Ev>
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2104      	movs	r1, #4
 8000738:	0018      	movs	r0, r3
 800073a:	f001 fe4d 	bl	80023d8 <_ZdlPvj>
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	0018      	movs	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	b002      	add	sp, #8
 8000746:	bd80      	pop	{r7, pc}

08000748 <_ZN6PlayerC1EPcii>:
 *      Author: youri
 */

#include "Player.h"

Player::Player(char *name, int x, int y)
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	60f8      	str	r0, [r7, #12]
 8000750:	60b9      	str	r1, [r7, #8]
 8000752:	607a      	str	r2, [r7, #4]
 8000754:	603b      	str	r3, [r7, #0]
: Entity(x,y) {
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	683a      	ldr	r2, [r7, #0]
 800075a:	6879      	ldr	r1, [r7, #4]
 800075c:	0018      	movs	r0, r3
 800075e:	f7ff fdb1 	bl	80002c4 <_ZN6EntityC1Eii>
 8000762:	4a05      	ldr	r2, [pc, #20]	; (8000778 <_ZN6PlayerC1EPcii+0x30>)
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	this->name = name;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	60da      	str	r2, [r3, #12]
}
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	0018      	movs	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	b004      	add	sp, #16
 8000776:	bd80      	pop	{r7, pc}
 8000778:	08002760 	.word	0x08002760

0800077c <_ZN6PlayerD1Ev>:

Player::~Player() {
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	4a05      	ldr	r2, [pc, #20]	; (800079c <_ZN6PlayerD1Ev+0x20>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	0018      	movs	r0, r3
 800078e:	f7ff fdaf 	bl	80002f0 <_ZN6EntityD1Ev>
	// TODO Auto-generated destructor stub
}
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	0018      	movs	r0, r3
 8000796:	46bd      	mov	sp, r7
 8000798:	b002      	add	sp, #8
 800079a:	bd80      	pop	{r7, pc}
 800079c:	08002760 	.word	0x08002760

080007a0 <_ZN6PlayerD0Ev>:
Player::~Player() {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
}
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	0018      	movs	r0, r3
 80007ac:	f7ff ffe6 	bl	800077c <_ZN6PlayerD1Ev>
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2110      	movs	r1, #16
 80007b4:	0018      	movs	r0, r3
 80007b6:	f001 fe0f 	bl	80023d8 <_ZdlPvj>
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	0018      	movs	r0, r3
 80007be:	46bd      	mov	sp, r7
 80007c0:	b002      	add	sp, #8
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <_Z13Error_Handlerv>:

SPI_HandleTypeDef hspi2;


void Error_Handler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007c8:	46c0      	nop			; (mov r8, r8)
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <_ZL12MX_SPI2_Initv>:

static void MX_SPI2_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007d4:	4b1d      	ldr	r3, [pc, #116]	; (800084c <_ZL12MX_SPI2_Initv+0x7c>)
 80007d6:	4a1e      	ldr	r2, [pc, #120]	; (8000850 <_ZL12MX_SPI2_Initv+0x80>)
 80007d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007da:	4b1c      	ldr	r3, [pc, #112]	; (800084c <_ZL12MX_SPI2_Initv+0x7c>)
 80007dc:	2282      	movs	r2, #130	; 0x82
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007e2:	4b1a      	ldr	r3, [pc, #104]	; (800084c <_ZL12MX_SPI2_Initv+0x7c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007e8:	4b18      	ldr	r3, [pc, #96]	; (800084c <_ZL12MX_SPI2_Initv+0x7c>)
 80007ea:	22e0      	movs	r2, #224	; 0xe0
 80007ec:	00d2      	lsls	r2, r2, #3
 80007ee:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007f0:	4b16      	ldr	r3, [pc, #88]	; (800084c <_ZL12MX_SPI2_Initv+0x7c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007f6:	4b15      	ldr	r3, [pc, #84]	; (800084c <_ZL12MX_SPI2_Initv+0x7c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80007fc:	4b13      	ldr	r3, [pc, #76]	; (800084c <_ZL12MX_SPI2_Initv+0x7c>)
 80007fe:	2280      	movs	r2, #128	; 0x80
 8000800:	02d2      	lsls	r2, r2, #11
 8000802:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <_ZL12MX_SPI2_Initv+0x7c>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800080a:	4b10      	ldr	r3, [pc, #64]	; (800084c <_ZL12MX_SPI2_Initv+0x7c>)
 800080c:	2200      	movs	r2, #0
 800080e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000810:	4b0e      	ldr	r3, [pc, #56]	; (800084c <_ZL12MX_SPI2_Initv+0x7c>)
 8000812:	2200      	movs	r2, #0
 8000814:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000816:	4b0d      	ldr	r3, [pc, #52]	; (800084c <_ZL12MX_SPI2_Initv+0x7c>)
 8000818:	2200      	movs	r2, #0
 800081a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800081c:	4b0b      	ldr	r3, [pc, #44]	; (800084c <_ZL12MX_SPI2_Initv+0x7c>)
 800081e:	2207      	movs	r2, #7
 8000820:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000822:	4b0a      	ldr	r3, [pc, #40]	; (800084c <_ZL12MX_SPI2_Initv+0x7c>)
 8000824:	2200      	movs	r2, #0
 8000826:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000828:	4b08      	ldr	r3, [pc, #32]	; (800084c <_ZL12MX_SPI2_Initv+0x7c>)
 800082a:	2208      	movs	r2, #8
 800082c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800082e:	4b07      	ldr	r3, [pc, #28]	; (800084c <_ZL12MX_SPI2_Initv+0x7c>)
 8000830:	0018      	movs	r0, r3
 8000832:	f001 fa8b 	bl	8001d4c <HAL_SPI_Init>
 8000836:	0003      	movs	r3, r0
 8000838:	1e5a      	subs	r2, r3, #1
 800083a:	4193      	sbcs	r3, r2
 800083c:	b2db      	uxtb	r3, r3
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <_ZL12MX_SPI2_Initv+0x76>
  {
    Error_Handler();
 8000842:	f7ff ffbf 	bl	80007c4 <_Z13Error_Handlerv>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	2000008c 	.word	0x2000008c
 8000850:	40003800 	.word	0x40003800

08000854 <_ZN10SPIConnectC1Ev>:



SPIConnect::SPIConnect() {
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	4a04      	ldr	r2, [pc, #16]	; (8000870 <_ZN10SPIConnectC1Ev+0x1c>)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	MX_SPI2_Init();
 8000862:	f7ff ffb5 	bl	80007d0 <_ZL12MX_SPI2_Initv>
}
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	0018      	movs	r0, r3
 800086a:	46bd      	mov	sp, r7
 800086c:	b002      	add	sp, #8
 800086e:	bd80      	pop	{r7, pc}
 8000870:	08002770 	.word	0x08002770

08000874 <_ZN10SPIConnectD1Ev>:

SPIConnect::~SPIConnect() {
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	4a03      	ldr	r2, [pc, #12]	; (800088c <_ZN10SPIConnectD1Ev+0x18>)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	0018      	movs	r0, r3
 8000886:	46bd      	mov	sp, r7
 8000888:	b002      	add	sp, #8
 800088a:	bd80      	pop	{r7, pc}
 800088c:	08002770 	.word	0x08002770

08000890 <_ZN10SPIConnectD0Ev>:
SPIConnect::~SPIConnect() {
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
}
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	0018      	movs	r0, r3
 800089c:	f7ff ffea 	bl	8000874 <_ZN10SPIConnectD1Ev>
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2104      	movs	r1, #4
 80008a4:	0018      	movs	r0, r3
 80008a6:	f001 fd97 	bl	80023d8 <_ZdlPvj>
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	0018      	movs	r0, r3
 80008ae:	46bd      	mov	sp, r7
 80008b0:	b002      	add	sp, #8
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <_ZN10SPIConnect5writeEh>:

void SPIConnect::write (uint8_t data)
{
 80008b4:	b590      	push	{r4, r7, lr}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	000a      	movs	r2, r1
 80008be:	1cfb      	adds	r3, r7, #3
 80008c0:	701a      	strb	r2, [r3, #0]
	uint16_t data1 = 2;
 80008c2:	210e      	movs	r1, #14
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	2202      	movs	r2, #2
 80008c8:	801a      	strh	r2, [r3, #0]
	uint8_t d1 = data1 >> 8;
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	881b      	ldrh	r3, [r3, #0]
 80008ce:	121a      	asrs	r2, r3, #8
 80008d0:	230d      	movs	r3, #13
 80008d2:	18fb      	adds	r3, r7, r3
 80008d4:	701a      	strb	r2, [r3, #0]
	uint8_t d2 = data1;
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	881b      	ldrh	r3, [r3, #0]
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	240c      	movs	r4, #12
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);  // pull the cs pin low
 80008e2:	2380      	movs	r3, #128	; 0x80
 80008e4:	015b      	lsls	r3, r3, #5
 80008e6:	480b      	ldr	r0, [pc, #44]	; (8000914 <_ZN10SPIConnect5writeEh+0x60>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	0019      	movs	r1, r3
 80008ec:	f000 fdc3 	bl	8001476 <HAL_GPIO_WritePin>
	//for(;;)
	//{
		//HAL_GPIO_WritePin (GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
		//HAL_SPI_Transmit (&hspi2, &d1, sizeof(uint8_t), 100);  // write data to register
		HAL_SPI_Transmit (&hspi2, &d2, sizeof(uint8_t), 100);  // write data to register
 80008f0:	1939      	adds	r1, r7, r4
 80008f2:	4809      	ldr	r0, [pc, #36]	; (8000918 <_ZN10SPIConnect5writeEh+0x64>)
 80008f4:	2364      	movs	r3, #100	; 0x64
 80008f6:	2201      	movs	r2, #1
 80008f8:	f001 fac2 	bl	8001e80 <HAL_SPI_Transmit>

		//HAL_GPIO_WritePin (GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
	//}
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_12, GPIO_PIN_SET);  // pull the cs pin high
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	015b      	lsls	r3, r3, #5
 8000900:	4804      	ldr	r0, [pc, #16]	; (8000914 <_ZN10SPIConnect5writeEh+0x60>)
 8000902:	2201      	movs	r2, #1
 8000904:	0019      	movs	r1, r3
 8000906:	f000 fdb6 	bl	8001476 <HAL_GPIO_WritePin>
	//data[1] = value;
	//data[0] =
	//HAL_GPIO_WritePin (GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);  // pull the cs pin low
	//HAL_SPI_Transmit (&hspi2, (uint8_t *)data[0], 8, 100);  // write data to register
	//HAL_GPIO_WritePin (GPIOB, GPIO_PIN_12, GPIO_PIN_SET);  // pull the cs pin high
}
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	46bd      	mov	sp, r7
 800090e:	b005      	add	sp, #20
 8000910:	bd90      	pop	{r4, r7, pc}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	48000400 	.word	0x48000400
 8000918:	2000008c 	.word	0x2000008c

0800091c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800091c:	b5b0      	push	{r4, r5, r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000922:	f000 fae1 	bl	8000ee8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000926:	f000 f8fd 	bl	8000b24 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800092a:	f000 f943 	bl	8000bb4 <_ZL12MX_GPIO_Initv>
  //MX_SPI2_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
 
  Controller controller1 = Controller();
 800092e:	250c      	movs	r5, #12
 8000930:	197b      	adds	r3, r7, r5
 8000932:	0018      	movs	r0, r3
 8000934:	f7ff fc74 	bl	8000220 <_ZN10ControllerC1Ev>
	Controller controller2 = Controller();
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	0018      	movs	r0, r3
 800093c:	f7ff fc70 	bl	8000220 <_ZN10ControllerC1Ev>

	controller1.setButtonPressed(Button::Down);
 8000940:	197b      	adds	r3, r7, r5
 8000942:	2101      	movs	r1, #1
 8000944:	0018      	movs	r0, r3
 8000946:	f7ff fc99 	bl	800027c <_ZN10Controller16setButtonPressedE6Button>
	Game *game = new Game();
 800094a:	2010      	movs	r0, #16
 800094c:	f001 fd48 	bl	80023e0 <_Znwj>
 8000950:	0003      	movs	r3, r0
 8000952:	001c      	movs	r4, r3
 8000954:	0020      	movs	r0, r4
 8000956:	f7ff fd25 	bl	80003a4 <_ZN4GameC1Ev>
 800095a:	617c      	str	r4, [r7, #20]
	game->setController1(&controller1);
 800095c:	197a      	adds	r2, r7, r5
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	0011      	movs	r1, r2
 8000962:	0018      	movs	r0, r3
 8000964:	f7ff fd6d 	bl	8000442 <_ZN4Game14setController1EP10Controller>
	game->setController2(&controller2);
 8000968:	1d3a      	adds	r2, r7, #4
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	0011      	movs	r1, r2
 800096e:	0018      	movs	r0, r3
 8000970:	f7ff fd73 	bl	800045a <_ZN4Game14setController2EP10Controller>
	//game->play();

	controller1.setButtonPressed(Button::Up);
 8000974:	197b      	adds	r3, r7, r5
 8000976:	2100      	movs	r1, #0
 8000978:	0018      	movs	r0, r3
 800097a:	f7ff fc7f 	bl	800027c <_ZN10Controller16setButtonPressedE6Button>

	game->update();
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	0018      	movs	r0, r3
 8000982:	f7ff fd4d 	bl	8000420 <_ZN4Game6updateEv>

	//spi_write(6);
  while (1)
  {
	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == GPIO_PIN_SET)
 8000986:	4b66      	ldr	r3, [pc, #408]	; (8000b20 <main+0x204>)
 8000988:	2120      	movs	r1, #32
 800098a:	0018      	movs	r0, r3
 800098c:	f000 fd56 	bl	800143c <HAL_GPIO_ReadPin>
 8000990:	0003      	movs	r3, r0
 8000992:	3b01      	subs	r3, #1
 8000994:	425a      	negs	r2, r3
 8000996:	4153      	adcs	r3, r2
 8000998:	b2db      	uxtb	r3, r3
 800099a:	2b00      	cmp	r3, #0
 800099c:	d01d      	beq.n	80009da <main+0xbe>
	  {
		  while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == GPIO_PIN_SET);
 800099e:	4b60      	ldr	r3, [pc, #384]	; (8000b20 <main+0x204>)
 80009a0:	2120      	movs	r1, #32
 80009a2:	0018      	movs	r0, r3
 80009a4:	f000 fd4a 	bl	800143c <HAL_GPIO_ReadPin>
 80009a8:	0003      	movs	r3, r0
 80009aa:	3b01      	subs	r3, #1
 80009ac:	425a      	negs	r2, r3
 80009ae:	4153      	adcs	r3, r2
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d000      	beq.n	80009b8 <main+0x9c>
 80009b6:	e7f2      	b.n	800099e <main+0x82>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80009b8:	2390      	movs	r3, #144	; 0x90
 80009ba:	05db      	lsls	r3, r3, #23
 80009bc:	2201      	movs	r2, #1
 80009be:	2120      	movs	r1, #32
 80009c0:	0018      	movs	r0, r3
 80009c2:	f000 fd58 	bl	8001476 <HAL_GPIO_WritePin>
		  HAL_Delay(5);
 80009c6:	2005      	movs	r0, #5
 80009c8:	f000 faf2 	bl	8000fb0 <HAL_Delay>
		  controller1.setButtonPressed(Button::Down);
 80009cc:	230c      	movs	r3, #12
 80009ce:	18fb      	adds	r3, r7, r3
 80009d0:	2101      	movs	r1, #1
 80009d2:	0018      	movs	r0, r3
 80009d4:	f7ff fc52 	bl	800027c <_ZN10Controller16setButtonPressedE6Button>
 80009d8:	e09c      	b.n	8000b14 <main+0x1f8>
		  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	  }
	  else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_SET)
 80009da:	2380      	movs	r3, #128	; 0x80
 80009dc:	005a      	lsls	r2, r3, #1
 80009de:	2390      	movs	r3, #144	; 0x90
 80009e0:	05db      	lsls	r3, r3, #23
 80009e2:	0011      	movs	r1, r2
 80009e4:	0018      	movs	r0, r3
 80009e6:	f000 fd29 	bl	800143c <HAL_GPIO_ReadPin>
 80009ea:	0003      	movs	r3, r0
 80009ec:	3b01      	subs	r3, #1
 80009ee:	425a      	negs	r2, r3
 80009f0:	4153      	adcs	r3, r2
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d020      	beq.n	8000a3a <main+0x11e>
	  {
		  while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_SET);
 80009f8:	2380      	movs	r3, #128	; 0x80
 80009fa:	005a      	lsls	r2, r3, #1
 80009fc:	2390      	movs	r3, #144	; 0x90
 80009fe:	05db      	lsls	r3, r3, #23
 8000a00:	0011      	movs	r1, r2
 8000a02:	0018      	movs	r0, r3
 8000a04:	f000 fd1a 	bl	800143c <HAL_GPIO_ReadPin>
 8000a08:	0003      	movs	r3, r0
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	425a      	negs	r2, r3
 8000a0e:	4153      	adcs	r3, r2
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d000      	beq.n	8000a18 <main+0xfc>
 8000a16:	e7ef      	b.n	80009f8 <main+0xdc>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000a18:	2390      	movs	r3, #144	; 0x90
 8000a1a:	05db      	lsls	r3, r3, #23
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	2120      	movs	r1, #32
 8000a20:	0018      	movs	r0, r3
 8000a22:	f000 fd28 	bl	8001476 <HAL_GPIO_WritePin>
		  HAL_Delay(5);
 8000a26:	2005      	movs	r0, #5
 8000a28:	f000 fac2 	bl	8000fb0 <HAL_Delay>
		  controller1.setButtonPressed(Button::Left);
 8000a2c:	230c      	movs	r3, #12
 8000a2e:	18fb      	adds	r3, r7, r3
 8000a30:	2102      	movs	r1, #2
 8000a32:	0018      	movs	r0, r3
 8000a34:	f7ff fc22 	bl	800027c <_ZN10Controller16setButtonPressedE6Button>
 8000a38:	e06c      	b.n	8000b14 <main+0x1f8>
		  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	  }
	  else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET)
 8000a3a:	2380      	movs	r3, #128	; 0x80
 8000a3c:	009a      	lsls	r2, r3, #2
 8000a3e:	2390      	movs	r3, #144	; 0x90
 8000a40:	05db      	lsls	r3, r3, #23
 8000a42:	0011      	movs	r1, r2
 8000a44:	0018      	movs	r0, r3
 8000a46:	f000 fcf9 	bl	800143c <HAL_GPIO_ReadPin>
 8000a4a:	0003      	movs	r3, r0
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	425a      	negs	r2, r3
 8000a50:	4153      	adcs	r3, r2
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d020      	beq.n	8000a9a <main+0x17e>
	  {
		  while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET);
 8000a58:	2380      	movs	r3, #128	; 0x80
 8000a5a:	009a      	lsls	r2, r3, #2
 8000a5c:	2390      	movs	r3, #144	; 0x90
 8000a5e:	05db      	lsls	r3, r3, #23
 8000a60:	0011      	movs	r1, r2
 8000a62:	0018      	movs	r0, r3
 8000a64:	f000 fcea 	bl	800143c <HAL_GPIO_ReadPin>
 8000a68:	0003      	movs	r3, r0
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	425a      	negs	r2, r3
 8000a6e:	4153      	adcs	r3, r2
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d000      	beq.n	8000a78 <main+0x15c>
 8000a76:	e7ef      	b.n	8000a58 <main+0x13c>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000a78:	2390      	movs	r3, #144	; 0x90
 8000a7a:	05db      	lsls	r3, r3, #23
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	2120      	movs	r1, #32
 8000a80:	0018      	movs	r0, r3
 8000a82:	f000 fcf8 	bl	8001476 <HAL_GPIO_WritePin>
		  HAL_Delay(5);
 8000a86:	2005      	movs	r0, #5
 8000a88:	f000 fa92 	bl	8000fb0 <HAL_Delay>
		  controller1.setButtonPressed(Button::Right);
 8000a8c:	230c      	movs	r3, #12
 8000a8e:	18fb      	adds	r3, r7, r3
 8000a90:	2103      	movs	r1, #3
 8000a92:	0018      	movs	r0, r3
 8000a94:	f7ff fbf2 	bl	800027c <_ZN10Controller16setButtonPressedE6Button>
 8000a98:	e03c      	b.n	8000b14 <main+0x1f8>
		  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	  }
	  else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == GPIO_PIN_SET)
 8000a9a:	2380      	movs	r3, #128	; 0x80
 8000a9c:	00da      	lsls	r2, r3, #3
 8000a9e:	2390      	movs	r3, #144	; 0x90
 8000aa0:	05db      	lsls	r3, r3, #23
 8000aa2:	0011      	movs	r1, r2
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f000 fcc9 	bl	800143c <HAL_GPIO_ReadPin>
 8000aaa:	0003      	movs	r3, r0
 8000aac:	3b01      	subs	r3, #1
 8000aae:	425a      	negs	r2, r3
 8000ab0:	4153      	adcs	r3, r2
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d020      	beq.n	8000afa <main+0x1de>
	  {
		  while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == GPIO_PIN_SET);
 8000ab8:	2380      	movs	r3, #128	; 0x80
 8000aba:	00da      	lsls	r2, r3, #3
 8000abc:	2390      	movs	r3, #144	; 0x90
 8000abe:	05db      	lsls	r3, r3, #23
 8000ac0:	0011      	movs	r1, r2
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f000 fcba 	bl	800143c <HAL_GPIO_ReadPin>
 8000ac8:	0003      	movs	r3, r0
 8000aca:	3b01      	subs	r3, #1
 8000acc:	425a      	negs	r2, r3
 8000ace:	4153      	adcs	r3, r2
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d000      	beq.n	8000ad8 <main+0x1bc>
 8000ad6:	e7ef      	b.n	8000ab8 <main+0x19c>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000ad8:	2390      	movs	r3, #144	; 0x90
 8000ada:	05db      	lsls	r3, r3, #23
 8000adc:	2201      	movs	r2, #1
 8000ade:	2120      	movs	r1, #32
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f000 fcc8 	bl	8001476 <HAL_GPIO_WritePin>
		  HAL_Delay(5);
 8000ae6:	2005      	movs	r0, #5
 8000ae8:	f000 fa62 	bl	8000fb0 <HAL_Delay>
		  controller1.setButtonPressed(Button::Up);
 8000aec:	230c      	movs	r3, #12
 8000aee:	18fb      	adds	r3, r7, r3
 8000af0:	2100      	movs	r1, #0
 8000af2:	0018      	movs	r0, r3
 8000af4:	f7ff fbc2 	bl	800027c <_ZN10Controller16setButtonPressedE6Button>
 8000af8:	e00c      	b.n	8000b14 <main+0x1f8>
		  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000afa:	2390      	movs	r3, #144	; 0x90
 8000afc:	05db      	lsls	r3, r3, #23
 8000afe:	2200      	movs	r2, #0
 8000b00:	2120      	movs	r1, #32
 8000b02:	0018      	movs	r0, r3
 8000b04:	f000 fcb7 	bl	8001476 <HAL_GPIO_WritePin>
		  controller1.setButtonPressed(Button::None);
 8000b08:	230c      	movs	r3, #12
 8000b0a:	18fb      	adds	r3, r7, r3
 8000b0c:	2106      	movs	r1, #6
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f7ff fbb4 	bl	800027c <_ZN10Controller16setButtonPressedE6Button>
	  }
	  game->update();
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	0018      	movs	r0, r3
 8000b18:	f7ff fc82 	bl	8000420 <_ZN4Game6updateEv>
	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == GPIO_PIN_SET)
 8000b1c:	e733      	b.n	8000986 <main+0x6a>
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	48000400 	.word	0x48000400

08000b24 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b24:	b590      	push	{r4, r7, lr}
 8000b26:	b091      	sub	sp, #68	; 0x44
 8000b28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2a:	2410      	movs	r4, #16
 8000b2c:	193b      	adds	r3, r7, r4
 8000b2e:	0018      	movs	r0, r3
 8000b30:	2330      	movs	r3, #48	; 0x30
 8000b32:	001a      	movs	r2, r3
 8000b34:	2100      	movs	r1, #0
 8000b36:	f001 fcb5 	bl	80024a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b3a:	003b      	movs	r3, r7
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	2310      	movs	r3, #16
 8000b40:	001a      	movs	r2, r3
 8000b42:	2100      	movs	r1, #0
 8000b44:	f001 fcae 	bl	80024a4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b48:	0021      	movs	r1, r4
 8000b4a:	187b      	adds	r3, r7, r1
 8000b4c:	2202      	movs	r2, #2
 8000b4e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b50:	187b      	adds	r3, r7, r1
 8000b52:	2201      	movs	r2, #1
 8000b54:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b56:	187b      	adds	r3, r7, r1
 8000b58:	2210      	movs	r2, #16
 8000b5a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b5c:	187b      	adds	r3, r7, r1
 8000b5e:	2200      	movs	r2, #0
 8000b60:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b62:	187b      	adds	r3, r7, r1
 8000b64:	0018      	movs	r0, r3
 8000b66:	f000 fca3 	bl	80014b0 <HAL_RCC_OscConfig>
 8000b6a:	0003      	movs	r3, r0
 8000b6c:	1e5a      	subs	r2, r3, #1
 8000b6e:	4193      	sbcs	r3, r2
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <_Z18SystemClock_Configv+0x56>
  {
    Error_Handler();
 8000b76:	f000 f8a7 	bl	8000cc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b7a:	003b      	movs	r3, r7
 8000b7c:	2207      	movs	r2, #7
 8000b7e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b80:	003b      	movs	r3, r7
 8000b82:	2200      	movs	r2, #0
 8000b84:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b86:	003b      	movs	r3, r7
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b8c:	003b      	movs	r3, r7
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b92:	003b      	movs	r3, r7
 8000b94:	2100      	movs	r1, #0
 8000b96:	0018      	movs	r0, r3
 8000b98:	f000 ffa6 	bl	8001ae8 <HAL_RCC_ClockConfig>
 8000b9c:	0003      	movs	r3, r0
 8000b9e:	1e5a      	subs	r2, r3, #1
 8000ba0:	4193      	sbcs	r3, r2
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 8000ba8:	f000 f88e 	bl	8000cc8 <Error_Handler>
  }
}
 8000bac:	46c0      	nop			; (mov r8, r8)
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	b011      	add	sp, #68	; 0x44
 8000bb2:	bd90      	pop	{r4, r7, pc}

08000bb4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb4:	b590      	push	{r4, r7, lr}
 8000bb6:	b089      	sub	sp, #36	; 0x24
 8000bb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bba:	240c      	movs	r4, #12
 8000bbc:	193b      	adds	r3, r7, r4
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	2314      	movs	r3, #20
 8000bc2:	001a      	movs	r2, r3
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	f001 fc6d 	bl	80024a4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bca:	4b3c      	ldr	r3, [pc, #240]	; (8000cbc <_ZL12MX_GPIO_Initv+0x108>)
 8000bcc:	695a      	ldr	r2, [r3, #20]
 8000bce:	4b3b      	ldr	r3, [pc, #236]	; (8000cbc <_ZL12MX_GPIO_Initv+0x108>)
 8000bd0:	2180      	movs	r1, #128	; 0x80
 8000bd2:	0309      	lsls	r1, r1, #12
 8000bd4:	430a      	orrs	r2, r1
 8000bd6:	615a      	str	r2, [r3, #20]
 8000bd8:	4b38      	ldr	r3, [pc, #224]	; (8000cbc <_ZL12MX_GPIO_Initv+0x108>)
 8000bda:	695a      	ldr	r2, [r3, #20]
 8000bdc:	2380      	movs	r3, #128	; 0x80
 8000bde:	031b      	lsls	r3, r3, #12
 8000be0:	4013      	ands	r3, r2
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	4b35      	ldr	r3, [pc, #212]	; (8000cbc <_ZL12MX_GPIO_Initv+0x108>)
 8000be8:	695a      	ldr	r2, [r3, #20]
 8000bea:	4b34      	ldr	r3, [pc, #208]	; (8000cbc <_ZL12MX_GPIO_Initv+0x108>)
 8000bec:	2180      	movs	r1, #128	; 0x80
 8000bee:	0289      	lsls	r1, r1, #10
 8000bf0:	430a      	orrs	r2, r1
 8000bf2:	615a      	str	r2, [r3, #20]
 8000bf4:	4b31      	ldr	r3, [pc, #196]	; (8000cbc <_ZL12MX_GPIO_Initv+0x108>)
 8000bf6:	695a      	ldr	r2, [r3, #20]
 8000bf8:	2380      	movs	r3, #128	; 0x80
 8000bfa:	029b      	lsls	r3, r3, #10
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	4b2e      	ldr	r3, [pc, #184]	; (8000cbc <_ZL12MX_GPIO_Initv+0x108>)
 8000c04:	695a      	ldr	r2, [r3, #20]
 8000c06:	4b2d      	ldr	r3, [pc, #180]	; (8000cbc <_ZL12MX_GPIO_Initv+0x108>)
 8000c08:	2180      	movs	r1, #128	; 0x80
 8000c0a:	02c9      	lsls	r1, r1, #11
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	615a      	str	r2, [r3, #20]
 8000c10:	4b2a      	ldr	r3, [pc, #168]	; (8000cbc <_ZL12MX_GPIO_Initv+0x108>)
 8000c12:	695a      	ldr	r2, [r3, #20]
 8000c14:	2380      	movs	r3, #128	; 0x80
 8000c16:	02db      	lsls	r3, r3, #11
 8000c18:	4013      	ands	r3, r2
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c1e:	2390      	movs	r3, #144	; 0x90
 8000c20:	05db      	lsls	r3, r3, #23
 8000c22:	2200      	movs	r2, #0
 8000c24:	2120      	movs	r1, #32
 8000c26:	0018      	movs	r0, r3
 8000c28:	f000 fc25 	bl	8001476 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c2c:	193b      	adds	r3, r7, r4
 8000c2e:	2280      	movs	r2, #128	; 0x80
 8000c30:	0192      	lsls	r2, r2, #6
 8000c32:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c34:	193b      	adds	r3, r7, r4
 8000c36:	2200      	movs	r2, #0
 8000c38:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	193b      	adds	r3, r7, r4
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c40:	193b      	adds	r3, r7, r4
 8000c42:	4a1f      	ldr	r2, [pc, #124]	; (8000cc0 <_ZL12MX_GPIO_Initv+0x10c>)
 8000c44:	0019      	movs	r1, r3
 8000c46:	0010      	movs	r0, r2
 8000c48:	f000 fa88 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c4c:	193b      	adds	r3, r7, r4
 8000c4e:	2220      	movs	r2, #32
 8000c50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	193b      	adds	r3, r7, r4
 8000c54:	2201      	movs	r2, #1
 8000c56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	193b      	adds	r3, r7, r4
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	193b      	adds	r3, r7, r4
 8000c60:	2200      	movs	r2, #0
 8000c62:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c64:	193a      	adds	r2, r7, r4
 8000c66:	2390      	movs	r3, #144	; 0x90
 8000c68:	05db      	lsls	r3, r3, #23
 8000c6a:	0011      	movs	r1, r2
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f000 fa75 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000c72:	193b      	adds	r3, r7, r4
 8000c74:	22e0      	movs	r2, #224	; 0xe0
 8000c76:	00d2      	lsls	r2, r2, #3
 8000c78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7a:	193b      	adds	r3, r7, r4
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	193b      	adds	r3, r7, r4
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c86:	193a      	adds	r2, r7, r4
 8000c88:	2390      	movs	r3, #144	; 0x90
 8000c8a:	05db      	lsls	r3, r3, #23
 8000c8c:	0011      	movs	r1, r2
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f000 fa64 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c94:	193b      	adds	r3, r7, r4
 8000c96:	2220      	movs	r2, #32
 8000c98:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9a:	193b      	adds	r3, r7, r4
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	193b      	adds	r3, r7, r4
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca6:	193b      	adds	r3, r7, r4
 8000ca8:	4a06      	ldr	r2, [pc, #24]	; (8000cc4 <_ZL12MX_GPIO_Initv+0x110>)
 8000caa:	0019      	movs	r1, r3
 8000cac:	0010      	movs	r0, r2
 8000cae:	f000 fa55 	bl	800115c <HAL_GPIO_Init>

}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	b009      	add	sp, #36	; 0x24
 8000cb8:	bd90      	pop	{r4, r7, pc}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	48000800 	.word	0x48000800
 8000cc4:	48000400 	.word	0x48000400

08000cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ccc:	46c0      	nop			; (mov r8, r8)
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cda:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <HAL_MspInit+0x44>)
 8000cdc:	699a      	ldr	r2, [r3, #24]
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <HAL_MspInit+0x44>)
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	619a      	str	r2, [r3, #24]
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <HAL_MspInit+0x44>)
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	2201      	movs	r2, #1
 8000cec:	4013      	ands	r3, r2
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <HAL_MspInit+0x44>)
 8000cf4:	69da      	ldr	r2, [r3, #28]
 8000cf6:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <HAL_MspInit+0x44>)
 8000cf8:	2180      	movs	r1, #128	; 0x80
 8000cfa:	0549      	lsls	r1, r1, #21
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	61da      	str	r2, [r3, #28]
 8000d00:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <HAL_MspInit+0x44>)
 8000d02:	69da      	ldr	r2, [r3, #28]
 8000d04:	2380      	movs	r3, #128	; 0x80
 8000d06:	055b      	lsls	r3, r3, #21
 8000d08:	4013      	ands	r3, r2
 8000d0a:	603b      	str	r3, [r7, #0]
 8000d0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	46bd      	mov	sp, r7
 8000d12:	b002      	add	sp, #8
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	40021000 	.word	0x40021000

08000d1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08a      	sub	sp, #40	; 0x28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	2314      	movs	r3, #20
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	0018      	movs	r0, r3
 8000d2a:	2314      	movs	r3, #20
 8000d2c:	001a      	movs	r2, r3
 8000d2e:	2100      	movs	r1, #0
 8000d30:	f001 fbb8 	bl	80024a4 <memset>
  if(hspi->Instance==SPI2)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a1c      	ldr	r2, [pc, #112]	; (8000dac <HAL_SPI_MspInit+0x90>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d132      	bne.n	8000da4 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d3e:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <HAL_SPI_MspInit+0x94>)
 8000d40:	69da      	ldr	r2, [r3, #28]
 8000d42:	4b1b      	ldr	r3, [pc, #108]	; (8000db0 <HAL_SPI_MspInit+0x94>)
 8000d44:	2180      	movs	r1, #128	; 0x80
 8000d46:	01c9      	lsls	r1, r1, #7
 8000d48:	430a      	orrs	r2, r1
 8000d4a:	61da      	str	r2, [r3, #28]
 8000d4c:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <HAL_SPI_MspInit+0x94>)
 8000d4e:	69da      	ldr	r2, [r3, #28]
 8000d50:	2380      	movs	r3, #128	; 0x80
 8000d52:	01db      	lsls	r3, r3, #7
 8000d54:	4013      	ands	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <HAL_SPI_MspInit+0x94>)
 8000d5c:	695a      	ldr	r2, [r3, #20]
 8000d5e:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <HAL_SPI_MspInit+0x94>)
 8000d60:	2180      	movs	r1, #128	; 0x80
 8000d62:	02c9      	lsls	r1, r1, #11
 8000d64:	430a      	orrs	r2, r1
 8000d66:	615a      	str	r2, [r3, #20]
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <HAL_SPI_MspInit+0x94>)
 8000d6a:	695a      	ldr	r2, [r3, #20]
 8000d6c:	2380      	movs	r3, #128	; 0x80
 8000d6e:	02db      	lsls	r3, r3, #11
 8000d70:	4013      	ands	r3, r2
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d76:	2114      	movs	r1, #20
 8000d78:	187b      	adds	r3, r7, r1
 8000d7a:	22f0      	movs	r2, #240	; 0xf0
 8000d7c:	0212      	lsls	r2, r2, #8
 8000d7e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	187b      	adds	r3, r7, r1
 8000d82:	2202      	movs	r2, #2
 8000d84:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	187b      	adds	r3, r7, r1
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d8c:	187b      	adds	r3, r7, r1
 8000d8e:	2203      	movs	r2, #3
 8000d90:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000d92:	187b      	adds	r3, r7, r1
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	4a06      	ldr	r2, [pc, #24]	; (8000db4 <HAL_SPI_MspInit+0x98>)
 8000d9c:	0019      	movs	r1, r3
 8000d9e:	0010      	movs	r0, r2
 8000da0:	f000 f9dc 	bl	800115c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000da4:	46c0      	nop			; (mov r8, r8)
 8000da6:	46bd      	mov	sp, r7
 8000da8:	b00a      	add	sp, #40	; 0x28
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40003800 	.word	0x40003800
 8000db0:	40021000 	.word	0x40021000
 8000db4:	48000400 	.word	0x48000400

08000db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000dbc:	46c0      	nop			; (mov r8, r8)
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <HardFault_Handler+0x4>

08000dc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000dcc:	46c0      	nop			; (mov r8, r8)
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de0:	f000 f8ca 	bl	8000f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de4:	46c0      	nop			; (mov r8, r8)
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <_getpid>:
 8000dea:	b580      	push	{r7, lr}
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	2301      	movs	r3, #1
 8000df0:	0018      	movs	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <_kill>:
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
 8000dfe:	6039      	str	r1, [r7, #0]
 8000e00:	f001 fb12 	bl	8002428 <__errno>
 8000e04:	0003      	movs	r3, r0
 8000e06:	2216      	movs	r2, #22
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	425b      	negs	r3, r3
 8000e0e:	0018      	movs	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	b002      	add	sp, #8
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <_exit>:
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
 8000e1e:	2301      	movs	r3, #1
 8000e20:	425a      	negs	r2, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	0011      	movs	r1, r2
 8000e26:	0018      	movs	r0, r3
 8000e28:	f7ff ffe5 	bl	8000df6 <_kill>
 8000e2c:	e7fe      	b.n	8000e2c <_exit+0x16>
	...

08000e30 <_sbrk>:
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <_sbrk+0x50>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d102      	bne.n	8000e46 <_sbrk+0x16>
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <_sbrk+0x50>)
 8000e42:	4a10      	ldr	r2, [pc, #64]	; (8000e84 <_sbrk+0x54>)
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <_sbrk+0x50>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <_sbrk+0x50>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	18d3      	adds	r3, r2, r3
 8000e54:	466a      	mov	r2, sp
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d907      	bls.n	8000e6a <_sbrk+0x3a>
 8000e5a:	f001 fae5 	bl	8002428 <__errno>
 8000e5e:	0003      	movs	r3, r0
 8000e60:	220c      	movs	r2, #12
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	2301      	movs	r3, #1
 8000e66:	425b      	negs	r3, r3
 8000e68:	e006      	b.n	8000e78 <_sbrk+0x48>
 8000e6a:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <_sbrk+0x50>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	18d2      	adds	r2, r2, r3
 8000e72:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <_sbrk+0x50>)
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	0018      	movs	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	b004      	add	sp, #16
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	200000f0 	.word	0x200000f0
 8000e84:	20000108 	.word	0x20000108

08000e88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000e8c:	46c0      	nop			; (mov r8, r8)
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <Reset_Handler>:
 8000e94:	480d      	ldr	r0, [pc, #52]	; (8000ecc <LoopForever+0x2>)
 8000e96:	4685      	mov	sp, r0
 8000e98:	480d      	ldr	r0, [pc, #52]	; (8000ed0 <LoopForever+0x6>)
 8000e9a:	490e      	ldr	r1, [pc, #56]	; (8000ed4 <LoopForever+0xa>)
 8000e9c:	4a0e      	ldr	r2, [pc, #56]	; (8000ed8 <LoopForever+0xe>)
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e002      	b.n	8000ea8 <LoopCopyDataInit>

08000ea2 <CopyDataInit>:
 8000ea2:	58d4      	ldr	r4, [r2, r3]
 8000ea4:	50c4      	str	r4, [r0, r3]
 8000ea6:	3304      	adds	r3, #4

08000ea8 <LoopCopyDataInit>:
 8000ea8:	18c4      	adds	r4, r0, r3
 8000eaa:	428c      	cmp	r4, r1
 8000eac:	d3f9      	bcc.n	8000ea2 <CopyDataInit>
 8000eae:	4a0b      	ldr	r2, [pc, #44]	; (8000edc <LoopForever+0x12>)
 8000eb0:	4c0b      	ldr	r4, [pc, #44]	; (8000ee0 <LoopForever+0x16>)
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e001      	b.n	8000eba <LoopFillZerobss>

08000eb6 <FillZerobss>:
 8000eb6:	6013      	str	r3, [r2, #0]
 8000eb8:	3204      	adds	r2, #4

08000eba <LoopFillZerobss>:
 8000eba:	42a2      	cmp	r2, r4
 8000ebc:	d3fb      	bcc.n	8000eb6 <FillZerobss>
 8000ebe:	f7ff ffe3 	bl	8000e88 <SystemInit>
 8000ec2:	f001 fab7 	bl	8002434 <__libc_init_array>
 8000ec6:	f7ff fd29 	bl	800091c <main>

08000eca <LoopForever>:
 8000eca:	e7fe      	b.n	8000eca <LoopForever>
 8000ecc:	20002000 	.word	0x20002000
 8000ed0:	20000000 	.word	0x20000000
 8000ed4:	20000070 	.word	0x20000070
 8000ed8:	08002790 	.word	0x08002790
 8000edc:	20000070 	.word	0x20000070
 8000ee0:	20000108 	.word	0x20000108

08000ee4 <ADC1_IRQHandler>:
 8000ee4:	e7fe      	b.n	8000ee4 <ADC1_IRQHandler>
	...

08000ee8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eec:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <HAL_Init+0x24>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_Init+0x24>)
 8000ef2:	2110      	movs	r1, #16
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f000 f809 	bl	8000f10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000efe:	f7ff fee9 	bl	8000cd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f02:	2300      	movs	r3, #0
}
 8000f04:	0018      	movs	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	40022000 	.word	0x40022000

08000f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f10:	b590      	push	{r4, r7, lr}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f18:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <HAL_InitTick+0x5c>)
 8000f1a:	681c      	ldr	r4, [r3, #0]
 8000f1c:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <HAL_InitTick+0x60>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	0019      	movs	r1, r3
 8000f22:	23fa      	movs	r3, #250	; 0xfa
 8000f24:	0098      	lsls	r0, r3, #2
 8000f26:	f7ff f8ef 	bl	8000108 <__udivsi3>
 8000f2a:	0003      	movs	r3, r0
 8000f2c:	0019      	movs	r1, r3
 8000f2e:	0020      	movs	r0, r4
 8000f30:	f7ff f8ea 	bl	8000108 <__udivsi3>
 8000f34:	0003      	movs	r3, r0
 8000f36:	0018      	movs	r0, r3
 8000f38:	f000 f903 	bl	8001142 <HAL_SYSTICK_Config>
 8000f3c:	1e03      	subs	r3, r0, #0
 8000f3e:	d001      	beq.n	8000f44 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	e00f      	b.n	8000f64 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b03      	cmp	r3, #3
 8000f48:	d80b      	bhi.n	8000f62 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	425b      	negs	r3, r3
 8000f50:	2200      	movs	r2, #0
 8000f52:	0018      	movs	r0, r3
 8000f54:	f000 f8e0 	bl	8001118 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_InitTick+0x64>)
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	e000      	b.n	8000f64 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
}
 8000f64:	0018      	movs	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	b003      	add	sp, #12
 8000f6a:	bd90      	pop	{r4, r7, pc}
 8000f6c:	20000000 	.word	0x20000000
 8000f70:	20000008 	.word	0x20000008
 8000f74:	20000004 	.word	0x20000004

08000f78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <HAL_IncTick+0x1c>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	001a      	movs	r2, r3
 8000f82:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <HAL_IncTick+0x20>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	18d2      	adds	r2, r2, r3
 8000f88:	4b03      	ldr	r3, [pc, #12]	; (8000f98 <HAL_IncTick+0x20>)
 8000f8a:	601a      	str	r2, [r3, #0]
}
 8000f8c:	46c0      	nop			; (mov r8, r8)
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	20000008 	.word	0x20000008
 8000f98:	20000100 	.word	0x20000100

08000f9c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa0:	4b02      	ldr	r3, [pc, #8]	; (8000fac <HAL_GetTick+0x10>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
}
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	20000100 	.word	0x20000100

08000fb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb8:	f7ff fff0 	bl	8000f9c <HAL_GetTick>
 8000fbc:	0003      	movs	r3, r0
 8000fbe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	d005      	beq.n	8000fd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <HAL_Delay+0x40>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	001a      	movs	r2, r3
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	189b      	adds	r3, r3, r2
 8000fd4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	f7ff ffe0 	bl	8000f9c <HAL_GetTick>
 8000fdc:	0002      	movs	r2, r0
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d8f7      	bhi.n	8000fd8 <HAL_Delay+0x28>
  {
  }
}
 8000fe8:	46c0      	nop			; (mov r8, r8)
 8000fea:	46bd      	mov	sp, r7
 8000fec:	b004      	add	sp, #16
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000008 	.word	0x20000008

08000ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff4:	b590      	push	{r4, r7, lr}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	0002      	movs	r2, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	1dfb      	adds	r3, r7, #7
 8001000:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001002:	1dfb      	adds	r3, r7, #7
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b7f      	cmp	r3, #127	; 0x7f
 8001008:	d828      	bhi.n	800105c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800100a:	4a2f      	ldr	r2, [pc, #188]	; (80010c8 <__NVIC_SetPriority+0xd4>)
 800100c:	1dfb      	adds	r3, r7, #7
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	b25b      	sxtb	r3, r3
 8001012:	089b      	lsrs	r3, r3, #2
 8001014:	33c0      	adds	r3, #192	; 0xc0
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	589b      	ldr	r3, [r3, r2]
 800101a:	1dfa      	adds	r2, r7, #7
 800101c:	7812      	ldrb	r2, [r2, #0]
 800101e:	0011      	movs	r1, r2
 8001020:	2203      	movs	r2, #3
 8001022:	400a      	ands	r2, r1
 8001024:	00d2      	lsls	r2, r2, #3
 8001026:	21ff      	movs	r1, #255	; 0xff
 8001028:	4091      	lsls	r1, r2
 800102a:	000a      	movs	r2, r1
 800102c:	43d2      	mvns	r2, r2
 800102e:	401a      	ands	r2, r3
 8001030:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	019b      	lsls	r3, r3, #6
 8001036:	22ff      	movs	r2, #255	; 0xff
 8001038:	401a      	ands	r2, r3
 800103a:	1dfb      	adds	r3, r7, #7
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	0018      	movs	r0, r3
 8001040:	2303      	movs	r3, #3
 8001042:	4003      	ands	r3, r0
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001048:	481f      	ldr	r0, [pc, #124]	; (80010c8 <__NVIC_SetPriority+0xd4>)
 800104a:	1dfb      	adds	r3, r7, #7
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	b25b      	sxtb	r3, r3
 8001050:	089b      	lsrs	r3, r3, #2
 8001052:	430a      	orrs	r2, r1
 8001054:	33c0      	adds	r3, #192	; 0xc0
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800105a:	e031      	b.n	80010c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800105c:	4a1b      	ldr	r2, [pc, #108]	; (80010cc <__NVIC_SetPriority+0xd8>)
 800105e:	1dfb      	adds	r3, r7, #7
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	0019      	movs	r1, r3
 8001064:	230f      	movs	r3, #15
 8001066:	400b      	ands	r3, r1
 8001068:	3b08      	subs	r3, #8
 800106a:	089b      	lsrs	r3, r3, #2
 800106c:	3306      	adds	r3, #6
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	18d3      	adds	r3, r2, r3
 8001072:	3304      	adds	r3, #4
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	1dfa      	adds	r2, r7, #7
 8001078:	7812      	ldrb	r2, [r2, #0]
 800107a:	0011      	movs	r1, r2
 800107c:	2203      	movs	r2, #3
 800107e:	400a      	ands	r2, r1
 8001080:	00d2      	lsls	r2, r2, #3
 8001082:	21ff      	movs	r1, #255	; 0xff
 8001084:	4091      	lsls	r1, r2
 8001086:	000a      	movs	r2, r1
 8001088:	43d2      	mvns	r2, r2
 800108a:	401a      	ands	r2, r3
 800108c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	019b      	lsls	r3, r3, #6
 8001092:	22ff      	movs	r2, #255	; 0xff
 8001094:	401a      	ands	r2, r3
 8001096:	1dfb      	adds	r3, r7, #7
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	0018      	movs	r0, r3
 800109c:	2303      	movs	r3, #3
 800109e:	4003      	ands	r3, r0
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010a4:	4809      	ldr	r0, [pc, #36]	; (80010cc <__NVIC_SetPriority+0xd8>)
 80010a6:	1dfb      	adds	r3, r7, #7
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	001c      	movs	r4, r3
 80010ac:	230f      	movs	r3, #15
 80010ae:	4023      	ands	r3, r4
 80010b0:	3b08      	subs	r3, #8
 80010b2:	089b      	lsrs	r3, r3, #2
 80010b4:	430a      	orrs	r2, r1
 80010b6:	3306      	adds	r3, #6
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	18c3      	adds	r3, r0, r3
 80010bc:	3304      	adds	r3, #4
 80010be:	601a      	str	r2, [r3, #0]
}
 80010c0:	46c0      	nop			; (mov r8, r8)
 80010c2:	46bd      	mov	sp, r7
 80010c4:	b003      	add	sp, #12
 80010c6:	bd90      	pop	{r4, r7, pc}
 80010c8:	e000e100 	.word	0xe000e100
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3b01      	subs	r3, #1
 80010dc:	4a0c      	ldr	r2, [pc, #48]	; (8001110 <SysTick_Config+0x40>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d901      	bls.n	80010e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010e2:	2301      	movs	r3, #1
 80010e4:	e010      	b.n	8001108 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e6:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <SysTick_Config+0x44>)
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	3a01      	subs	r2, #1
 80010ec:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ee:	2301      	movs	r3, #1
 80010f0:	425b      	negs	r3, r3
 80010f2:	2103      	movs	r1, #3
 80010f4:	0018      	movs	r0, r3
 80010f6:	f7ff ff7d 	bl	8000ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <SysTick_Config+0x44>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001100:	4b04      	ldr	r3, [pc, #16]	; (8001114 <SysTick_Config+0x44>)
 8001102:	2207      	movs	r2, #7
 8001104:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001106:	2300      	movs	r3, #0
}
 8001108:	0018      	movs	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	b002      	add	sp, #8
 800110e:	bd80      	pop	{r7, pc}
 8001110:	00ffffff 	.word	0x00ffffff
 8001114:	e000e010 	.word	0xe000e010

08001118 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	60b9      	str	r1, [r7, #8]
 8001120:	607a      	str	r2, [r7, #4]
 8001122:	210f      	movs	r1, #15
 8001124:	187b      	adds	r3, r7, r1
 8001126:	1c02      	adds	r2, r0, #0
 8001128:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	187b      	adds	r3, r7, r1
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	b25b      	sxtb	r3, r3
 8001132:	0011      	movs	r1, r2
 8001134:	0018      	movs	r0, r3
 8001136:	f7ff ff5d 	bl	8000ff4 <__NVIC_SetPriority>
}
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	46bd      	mov	sp, r7
 800113e:	b004      	add	sp, #16
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	0018      	movs	r0, r3
 800114e:	f7ff ffbf 	bl	80010d0 <SysTick_Config>
 8001152:	0003      	movs	r3, r0
}
 8001154:	0018      	movs	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	b002      	add	sp, #8
 800115a:	bd80      	pop	{r7, pc}

0800115c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800116a:	e14f      	b.n	800140c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2101      	movs	r1, #1
 8001172:	697a      	ldr	r2, [r7, #20]
 8001174:	4091      	lsls	r1, r2
 8001176:	000a      	movs	r2, r1
 8001178:	4013      	ands	r3, r2
 800117a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d100      	bne.n	8001184 <HAL_GPIO_Init+0x28>
 8001182:	e140      	b.n	8001406 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	2b02      	cmp	r3, #2
 800118a:	d003      	beq.n	8001194 <HAL_GPIO_Init+0x38>
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	2b12      	cmp	r3, #18
 8001192:	d123      	bne.n	80011dc <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	08da      	lsrs	r2, r3, #3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3208      	adds	r2, #8
 800119c:	0092      	lsls	r2, r2, #2
 800119e:	58d3      	ldr	r3, [r2, r3]
 80011a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	2207      	movs	r2, #7
 80011a6:	4013      	ands	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	220f      	movs	r2, #15
 80011ac:	409a      	lsls	r2, r3
 80011ae:	0013      	movs	r3, r2
 80011b0:	43da      	mvns	r2, r3
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	4013      	ands	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	691a      	ldr	r2, [r3, #16]
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	2107      	movs	r1, #7
 80011c0:	400b      	ands	r3, r1
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	409a      	lsls	r2, r3
 80011c6:	0013      	movs	r3, r2
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	08da      	lsrs	r2, r3, #3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	3208      	adds	r2, #8
 80011d6:	0092      	lsls	r2, r2, #2
 80011d8:	6939      	ldr	r1, [r7, #16]
 80011da:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	2203      	movs	r2, #3
 80011e8:	409a      	lsls	r2, r3
 80011ea:	0013      	movs	r3, r2
 80011ec:	43da      	mvns	r2, r3
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	4013      	ands	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	2203      	movs	r2, #3
 80011fa:	401a      	ands	r2, r3
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	409a      	lsls	r2, r3
 8001202:	0013      	movs	r3, r2
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	4313      	orrs	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d00b      	beq.n	8001230 <HAL_GPIO_Init+0xd4>
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	2b02      	cmp	r3, #2
 800121e:	d007      	beq.n	8001230 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001224:	2b11      	cmp	r3, #17
 8001226:	d003      	beq.n	8001230 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2b12      	cmp	r3, #18
 800122e:	d130      	bne.n	8001292 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	2203      	movs	r2, #3
 800123c:	409a      	lsls	r2, r3
 800123e:	0013      	movs	r3, r2
 8001240:	43da      	mvns	r2, r3
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	68da      	ldr	r2, [r3, #12]
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	409a      	lsls	r2, r3
 8001252:	0013      	movs	r3, r2
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	4313      	orrs	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001266:	2201      	movs	r2, #1
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	409a      	lsls	r2, r3
 800126c:	0013      	movs	r3, r2
 800126e:	43da      	mvns	r2, r3
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4013      	ands	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	091b      	lsrs	r3, r3, #4
 800127c:	2201      	movs	r2, #1
 800127e:	401a      	ands	r2, r3
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	409a      	lsls	r2, r3
 8001284:	0013      	movs	r3, r2
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4313      	orrs	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	2203      	movs	r2, #3
 800129e:	409a      	lsls	r2, r3
 80012a0:	0013      	movs	r3, r2
 80012a2:	43da      	mvns	r2, r3
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	4013      	ands	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	689a      	ldr	r2, [r3, #8]
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	409a      	lsls	r2, r3
 80012b4:	0013      	movs	r3, r2
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685a      	ldr	r2, [r3, #4]
 80012c6:	2380      	movs	r3, #128	; 0x80
 80012c8:	055b      	lsls	r3, r3, #21
 80012ca:	4013      	ands	r3, r2
 80012cc:	d100      	bne.n	80012d0 <HAL_GPIO_Init+0x174>
 80012ce:	e09a      	b.n	8001406 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d0:	4b54      	ldr	r3, [pc, #336]	; (8001424 <HAL_GPIO_Init+0x2c8>)
 80012d2:	699a      	ldr	r2, [r3, #24]
 80012d4:	4b53      	ldr	r3, [pc, #332]	; (8001424 <HAL_GPIO_Init+0x2c8>)
 80012d6:	2101      	movs	r1, #1
 80012d8:	430a      	orrs	r2, r1
 80012da:	619a      	str	r2, [r3, #24]
 80012dc:	4b51      	ldr	r3, [pc, #324]	; (8001424 <HAL_GPIO_Init+0x2c8>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	2201      	movs	r2, #1
 80012e2:	4013      	ands	r3, r2
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012e8:	4a4f      	ldr	r2, [pc, #316]	; (8001428 <HAL_GPIO_Init+0x2cc>)
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	089b      	lsrs	r3, r3, #2
 80012ee:	3302      	adds	r3, #2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	589b      	ldr	r3, [r3, r2]
 80012f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	2203      	movs	r2, #3
 80012fa:	4013      	ands	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	220f      	movs	r2, #15
 8001300:	409a      	lsls	r2, r3
 8001302:	0013      	movs	r3, r2
 8001304:	43da      	mvns	r2, r3
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	4013      	ands	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	2390      	movs	r3, #144	; 0x90
 8001310:	05db      	lsls	r3, r3, #23
 8001312:	429a      	cmp	r2, r3
 8001314:	d013      	beq.n	800133e <HAL_GPIO_Init+0x1e2>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a44      	ldr	r2, [pc, #272]	; (800142c <HAL_GPIO_Init+0x2d0>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d00d      	beq.n	800133a <HAL_GPIO_Init+0x1de>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a43      	ldr	r2, [pc, #268]	; (8001430 <HAL_GPIO_Init+0x2d4>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d007      	beq.n	8001336 <HAL_GPIO_Init+0x1da>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a42      	ldr	r2, [pc, #264]	; (8001434 <HAL_GPIO_Init+0x2d8>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d101      	bne.n	8001332 <HAL_GPIO_Init+0x1d6>
 800132e:	2303      	movs	r3, #3
 8001330:	e006      	b.n	8001340 <HAL_GPIO_Init+0x1e4>
 8001332:	2305      	movs	r3, #5
 8001334:	e004      	b.n	8001340 <HAL_GPIO_Init+0x1e4>
 8001336:	2302      	movs	r3, #2
 8001338:	e002      	b.n	8001340 <HAL_GPIO_Init+0x1e4>
 800133a:	2301      	movs	r3, #1
 800133c:	e000      	b.n	8001340 <HAL_GPIO_Init+0x1e4>
 800133e:	2300      	movs	r3, #0
 8001340:	697a      	ldr	r2, [r7, #20]
 8001342:	2103      	movs	r1, #3
 8001344:	400a      	ands	r2, r1
 8001346:	0092      	lsls	r2, r2, #2
 8001348:	4093      	lsls	r3, r2
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	4313      	orrs	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001350:	4935      	ldr	r1, [pc, #212]	; (8001428 <HAL_GPIO_Init+0x2cc>)
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	089b      	lsrs	r3, r3, #2
 8001356:	3302      	adds	r3, #2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800135e:	4b36      	ldr	r3, [pc, #216]	; (8001438 <HAL_GPIO_Init+0x2dc>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	43da      	mvns	r2, r3
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	4013      	ands	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	2380      	movs	r3, #128	; 0x80
 8001374:	025b      	lsls	r3, r3, #9
 8001376:	4013      	ands	r3, r2
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4313      	orrs	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001382:	4b2d      	ldr	r3, [pc, #180]	; (8001438 <HAL_GPIO_Init+0x2dc>)
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001388:	4b2b      	ldr	r3, [pc, #172]	; (8001438 <HAL_GPIO_Init+0x2dc>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	43da      	mvns	r2, r3
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	2380      	movs	r3, #128	; 0x80
 800139e:	029b      	lsls	r3, r3, #10
 80013a0:	4013      	ands	r3, r2
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013ac:	4b22      	ldr	r3, [pc, #136]	; (8001438 <HAL_GPIO_Init+0x2dc>)
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013b2:	4b21      	ldr	r3, [pc, #132]	; (8001438 <HAL_GPIO_Init+0x2dc>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	43da      	mvns	r2, r3
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4013      	ands	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	2380      	movs	r3, #128	; 0x80
 80013c8:	035b      	lsls	r3, r3, #13
 80013ca:	4013      	ands	r3, r2
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013d6:	4b18      	ldr	r3, [pc, #96]	; (8001438 <HAL_GPIO_Init+0x2dc>)
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80013dc:	4b16      	ldr	r3, [pc, #88]	; (8001438 <HAL_GPIO_Init+0x2dc>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	43da      	mvns	r2, r3
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	4013      	ands	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	039b      	lsls	r3, r3, #14
 80013f4:	4013      	ands	r3, r2
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001400:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <HAL_GPIO_Init+0x2dc>)
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	3301      	adds	r3, #1
 800140a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	40da      	lsrs	r2, r3
 8001414:	1e13      	subs	r3, r2, #0
 8001416:	d000      	beq.n	800141a <HAL_GPIO_Init+0x2be>
 8001418:	e6a8      	b.n	800116c <HAL_GPIO_Init+0x10>
  } 
}
 800141a:	46c0      	nop			; (mov r8, r8)
 800141c:	46bd      	mov	sp, r7
 800141e:	b006      	add	sp, #24
 8001420:	bd80      	pop	{r7, pc}
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	40021000 	.word	0x40021000
 8001428:	40010000 	.word	0x40010000
 800142c:	48000400 	.word	0x48000400
 8001430:	48000800 	.word	0x48000800
 8001434:	48000c00 	.word	0x48000c00
 8001438:	40010400 	.word	0x40010400

0800143c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	000a      	movs	r2, r1
 8001446:	1cbb      	adds	r3, r7, #2
 8001448:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	1cba      	adds	r2, r7, #2
 8001450:	8812      	ldrh	r2, [r2, #0]
 8001452:	4013      	ands	r3, r2
 8001454:	d004      	beq.n	8001460 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001456:	230f      	movs	r3, #15
 8001458:	18fb      	adds	r3, r7, r3
 800145a:	2201      	movs	r2, #1
 800145c:	701a      	strb	r2, [r3, #0]
 800145e:	e003      	b.n	8001468 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001460:	230f      	movs	r3, #15
 8001462:	18fb      	adds	r3, r7, r3
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001468:	230f      	movs	r3, #15
 800146a:	18fb      	adds	r3, r7, r3
 800146c:	781b      	ldrb	r3, [r3, #0]
  }
 800146e:	0018      	movs	r0, r3
 8001470:	46bd      	mov	sp, r7
 8001472:	b004      	add	sp, #16
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
 800147e:	0008      	movs	r0, r1
 8001480:	0011      	movs	r1, r2
 8001482:	1cbb      	adds	r3, r7, #2
 8001484:	1c02      	adds	r2, r0, #0
 8001486:	801a      	strh	r2, [r3, #0]
 8001488:	1c7b      	adds	r3, r7, #1
 800148a:	1c0a      	adds	r2, r1, #0
 800148c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800148e:	1c7b      	adds	r3, r7, #1
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d004      	beq.n	80014a0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001496:	1cbb      	adds	r3, r7, #2
 8001498:	881a      	ldrh	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800149e:	e003      	b.n	80014a8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014a0:	1cbb      	adds	r3, r7, #2
 80014a2:	881a      	ldrh	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014a8:	46c0      	nop			; (mov r8, r8)
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b002      	add	sp, #8
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b088      	sub	sp, #32
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e303      	b.n	8001aca <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2201      	movs	r2, #1
 80014c8:	4013      	ands	r3, r2
 80014ca:	d100      	bne.n	80014ce <HAL_RCC_OscConfig+0x1e>
 80014cc:	e08d      	b.n	80015ea <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014ce:	4bc4      	ldr	r3, [pc, #784]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	220c      	movs	r2, #12
 80014d4:	4013      	ands	r3, r2
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	d00e      	beq.n	80014f8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014da:	4bc1      	ldr	r3, [pc, #772]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	220c      	movs	r2, #12
 80014e0:	4013      	ands	r3, r2
 80014e2:	2b08      	cmp	r3, #8
 80014e4:	d116      	bne.n	8001514 <HAL_RCC_OscConfig+0x64>
 80014e6:	4bbe      	ldr	r3, [pc, #760]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	2380      	movs	r3, #128	; 0x80
 80014ec:	025b      	lsls	r3, r3, #9
 80014ee:	401a      	ands	r2, r3
 80014f0:	2380      	movs	r3, #128	; 0x80
 80014f2:	025b      	lsls	r3, r3, #9
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d10d      	bne.n	8001514 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f8:	4bb9      	ldr	r3, [pc, #740]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	2380      	movs	r3, #128	; 0x80
 80014fe:	029b      	lsls	r3, r3, #10
 8001500:	4013      	ands	r3, r2
 8001502:	d100      	bne.n	8001506 <HAL_RCC_OscConfig+0x56>
 8001504:	e070      	b.n	80015e8 <HAL_RCC_OscConfig+0x138>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d000      	beq.n	8001510 <HAL_RCC_OscConfig+0x60>
 800150e:	e06b      	b.n	80015e8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e2da      	b.n	8001aca <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d107      	bne.n	800152c <HAL_RCC_OscConfig+0x7c>
 800151c:	4bb0      	ldr	r3, [pc, #704]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4baf      	ldr	r3, [pc, #700]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 8001522:	2180      	movs	r1, #128	; 0x80
 8001524:	0249      	lsls	r1, r1, #9
 8001526:	430a      	orrs	r2, r1
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	e02f      	b.n	800158c <HAL_RCC_OscConfig+0xdc>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d10c      	bne.n	800154e <HAL_RCC_OscConfig+0x9e>
 8001534:	4baa      	ldr	r3, [pc, #680]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4ba9      	ldr	r3, [pc, #676]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 800153a:	49aa      	ldr	r1, [pc, #680]	; (80017e4 <HAL_RCC_OscConfig+0x334>)
 800153c:	400a      	ands	r2, r1
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	4ba7      	ldr	r3, [pc, #668]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4ba6      	ldr	r3, [pc, #664]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 8001546:	49a8      	ldr	r1, [pc, #672]	; (80017e8 <HAL_RCC_OscConfig+0x338>)
 8001548:	400a      	ands	r2, r1
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	e01e      	b.n	800158c <HAL_RCC_OscConfig+0xdc>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b05      	cmp	r3, #5
 8001554:	d10e      	bne.n	8001574 <HAL_RCC_OscConfig+0xc4>
 8001556:	4ba2      	ldr	r3, [pc, #648]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	4ba1      	ldr	r3, [pc, #644]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 800155c:	2180      	movs	r1, #128	; 0x80
 800155e:	02c9      	lsls	r1, r1, #11
 8001560:	430a      	orrs	r2, r1
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	4b9e      	ldr	r3, [pc, #632]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4b9d      	ldr	r3, [pc, #628]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 800156a:	2180      	movs	r1, #128	; 0x80
 800156c:	0249      	lsls	r1, r1, #9
 800156e:	430a      	orrs	r2, r1
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	e00b      	b.n	800158c <HAL_RCC_OscConfig+0xdc>
 8001574:	4b9a      	ldr	r3, [pc, #616]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4b99      	ldr	r3, [pc, #612]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 800157a:	499a      	ldr	r1, [pc, #616]	; (80017e4 <HAL_RCC_OscConfig+0x334>)
 800157c:	400a      	ands	r2, r1
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	4b97      	ldr	r3, [pc, #604]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b96      	ldr	r3, [pc, #600]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 8001586:	4998      	ldr	r1, [pc, #608]	; (80017e8 <HAL_RCC_OscConfig+0x338>)
 8001588:	400a      	ands	r2, r1
 800158a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d014      	beq.n	80015be <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001594:	f7ff fd02 	bl	8000f9c <HAL_GetTick>
 8001598:	0003      	movs	r3, r0
 800159a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800159e:	f7ff fcfd 	bl	8000f9c <HAL_GetTick>
 80015a2:	0002      	movs	r2, r0
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b64      	cmp	r3, #100	; 0x64
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e28c      	b.n	8001aca <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b0:	4b8b      	ldr	r3, [pc, #556]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	2380      	movs	r3, #128	; 0x80
 80015b6:	029b      	lsls	r3, r3, #10
 80015b8:	4013      	ands	r3, r2
 80015ba:	d0f0      	beq.n	800159e <HAL_RCC_OscConfig+0xee>
 80015bc:	e015      	b.n	80015ea <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015be:	f7ff fced 	bl	8000f9c <HAL_GetTick>
 80015c2:	0003      	movs	r3, r0
 80015c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015c8:	f7ff fce8 	bl	8000f9c <HAL_GetTick>
 80015cc:	0002      	movs	r2, r0
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b64      	cmp	r3, #100	; 0x64
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e277      	b.n	8001aca <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015da:	4b81      	ldr	r3, [pc, #516]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	2380      	movs	r3, #128	; 0x80
 80015e0:	029b      	lsls	r3, r3, #10
 80015e2:	4013      	ands	r3, r2
 80015e4:	d1f0      	bne.n	80015c8 <HAL_RCC_OscConfig+0x118>
 80015e6:	e000      	b.n	80015ea <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2202      	movs	r2, #2
 80015f0:	4013      	ands	r3, r2
 80015f2:	d100      	bne.n	80015f6 <HAL_RCC_OscConfig+0x146>
 80015f4:	e069      	b.n	80016ca <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80015f6:	4b7a      	ldr	r3, [pc, #488]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	220c      	movs	r2, #12
 80015fc:	4013      	ands	r3, r2
 80015fe:	d00b      	beq.n	8001618 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001600:	4b77      	ldr	r3, [pc, #476]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	220c      	movs	r2, #12
 8001606:	4013      	ands	r3, r2
 8001608:	2b08      	cmp	r3, #8
 800160a:	d11c      	bne.n	8001646 <HAL_RCC_OscConfig+0x196>
 800160c:	4b74      	ldr	r3, [pc, #464]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	2380      	movs	r3, #128	; 0x80
 8001612:	025b      	lsls	r3, r3, #9
 8001614:	4013      	ands	r3, r2
 8001616:	d116      	bne.n	8001646 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001618:	4b71      	ldr	r3, [pc, #452]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2202      	movs	r2, #2
 800161e:	4013      	ands	r3, r2
 8001620:	d005      	beq.n	800162e <HAL_RCC_OscConfig+0x17e>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d001      	beq.n	800162e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e24d      	b.n	8001aca <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800162e:	4b6c      	ldr	r3, [pc, #432]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	22f8      	movs	r2, #248	; 0xf8
 8001634:	4393      	bics	r3, r2
 8001636:	0019      	movs	r1, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	00da      	lsls	r2, r3, #3
 800163e:	4b68      	ldr	r3, [pc, #416]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 8001640:	430a      	orrs	r2, r1
 8001642:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001644:	e041      	b.n	80016ca <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d024      	beq.n	8001698 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800164e:	4b64      	ldr	r3, [pc, #400]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4b63      	ldr	r3, [pc, #396]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 8001654:	2101      	movs	r1, #1
 8001656:	430a      	orrs	r2, r1
 8001658:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165a:	f7ff fc9f 	bl	8000f9c <HAL_GetTick>
 800165e:	0003      	movs	r3, r0
 8001660:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001664:	f7ff fc9a 	bl	8000f9c <HAL_GetTick>
 8001668:	0002      	movs	r2, r0
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e229      	b.n	8001aca <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001676:	4b5a      	ldr	r3, [pc, #360]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2202      	movs	r2, #2
 800167c:	4013      	ands	r3, r2
 800167e:	d0f1      	beq.n	8001664 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001680:	4b57      	ldr	r3, [pc, #348]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	22f8      	movs	r2, #248	; 0xf8
 8001686:	4393      	bics	r3, r2
 8001688:	0019      	movs	r1, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	00da      	lsls	r2, r3, #3
 8001690:	4b53      	ldr	r3, [pc, #332]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 8001692:	430a      	orrs	r2, r1
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	e018      	b.n	80016ca <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001698:	4b51      	ldr	r3, [pc, #324]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	4b50      	ldr	r3, [pc, #320]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 800169e:	2101      	movs	r1, #1
 80016a0:	438a      	bics	r2, r1
 80016a2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a4:	f7ff fc7a 	bl	8000f9c <HAL_GetTick>
 80016a8:	0003      	movs	r3, r0
 80016aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016ae:	f7ff fc75 	bl	8000f9c <HAL_GetTick>
 80016b2:	0002      	movs	r2, r0
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e204      	b.n	8001aca <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016c0:	4b47      	ldr	r3, [pc, #284]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2202      	movs	r2, #2
 80016c6:	4013      	ands	r3, r2
 80016c8:	d1f1      	bne.n	80016ae <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2208      	movs	r2, #8
 80016d0:	4013      	ands	r3, r2
 80016d2:	d036      	beq.n	8001742 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	69db      	ldr	r3, [r3, #28]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d019      	beq.n	8001710 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016dc:	4b40      	ldr	r3, [pc, #256]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 80016de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016e0:	4b3f      	ldr	r3, [pc, #252]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 80016e2:	2101      	movs	r1, #1
 80016e4:	430a      	orrs	r2, r1
 80016e6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e8:	f7ff fc58 	bl	8000f9c <HAL_GetTick>
 80016ec:	0003      	movs	r3, r0
 80016ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016f2:	f7ff fc53 	bl	8000f9c <HAL_GetTick>
 80016f6:	0002      	movs	r2, r0
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e1e2      	b.n	8001aca <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001704:	4b36      	ldr	r3, [pc, #216]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 8001706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001708:	2202      	movs	r2, #2
 800170a:	4013      	ands	r3, r2
 800170c:	d0f1      	beq.n	80016f2 <HAL_RCC_OscConfig+0x242>
 800170e:	e018      	b.n	8001742 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001710:	4b33      	ldr	r3, [pc, #204]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 8001712:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001714:	4b32      	ldr	r3, [pc, #200]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 8001716:	2101      	movs	r1, #1
 8001718:	438a      	bics	r2, r1
 800171a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800171c:	f7ff fc3e 	bl	8000f9c <HAL_GetTick>
 8001720:	0003      	movs	r3, r0
 8001722:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001726:	f7ff fc39 	bl	8000f9c <HAL_GetTick>
 800172a:	0002      	movs	r2, r0
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e1c8      	b.n	8001aca <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001738:	4b29      	ldr	r3, [pc, #164]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173c:	2202      	movs	r2, #2
 800173e:	4013      	ands	r3, r2
 8001740:	d1f1      	bne.n	8001726 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2204      	movs	r2, #4
 8001748:	4013      	ands	r3, r2
 800174a:	d100      	bne.n	800174e <HAL_RCC_OscConfig+0x29e>
 800174c:	e0b6      	b.n	80018bc <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800174e:	231f      	movs	r3, #31
 8001750:	18fb      	adds	r3, r7, r3
 8001752:	2200      	movs	r2, #0
 8001754:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001756:	4b22      	ldr	r3, [pc, #136]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 8001758:	69da      	ldr	r2, [r3, #28]
 800175a:	2380      	movs	r3, #128	; 0x80
 800175c:	055b      	lsls	r3, r3, #21
 800175e:	4013      	ands	r3, r2
 8001760:	d111      	bne.n	8001786 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001762:	4b1f      	ldr	r3, [pc, #124]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 8001764:	69da      	ldr	r2, [r3, #28]
 8001766:	4b1e      	ldr	r3, [pc, #120]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 8001768:	2180      	movs	r1, #128	; 0x80
 800176a:	0549      	lsls	r1, r1, #21
 800176c:	430a      	orrs	r2, r1
 800176e:	61da      	str	r2, [r3, #28]
 8001770:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 8001772:	69da      	ldr	r2, [r3, #28]
 8001774:	2380      	movs	r3, #128	; 0x80
 8001776:	055b      	lsls	r3, r3, #21
 8001778:	4013      	ands	r3, r2
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800177e:	231f      	movs	r3, #31
 8001780:	18fb      	adds	r3, r7, r3
 8001782:	2201      	movs	r2, #1
 8001784:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001786:	4b19      	ldr	r3, [pc, #100]	; (80017ec <HAL_RCC_OscConfig+0x33c>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	2380      	movs	r3, #128	; 0x80
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	4013      	ands	r3, r2
 8001790:	d11a      	bne.n	80017c8 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001792:	4b16      	ldr	r3, [pc, #88]	; (80017ec <HAL_RCC_OscConfig+0x33c>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <HAL_RCC_OscConfig+0x33c>)
 8001798:	2180      	movs	r1, #128	; 0x80
 800179a:	0049      	lsls	r1, r1, #1
 800179c:	430a      	orrs	r2, r1
 800179e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017a0:	f7ff fbfc 	bl	8000f9c <HAL_GetTick>
 80017a4:	0003      	movs	r3, r0
 80017a6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a8:	e008      	b.n	80017bc <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017aa:	f7ff fbf7 	bl	8000f9c <HAL_GetTick>
 80017ae:	0002      	movs	r2, r0
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b64      	cmp	r3, #100	; 0x64
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e186      	b.n	8001aca <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <HAL_RCC_OscConfig+0x33c>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	2380      	movs	r3, #128	; 0x80
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	4013      	ands	r3, r2
 80017c6:	d0f0      	beq.n	80017aa <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d10f      	bne.n	80017f0 <HAL_RCC_OscConfig+0x340>
 80017d0:	4b03      	ldr	r3, [pc, #12]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 80017d2:	6a1a      	ldr	r2, [r3, #32]
 80017d4:	4b02      	ldr	r3, [pc, #8]	; (80017e0 <HAL_RCC_OscConfig+0x330>)
 80017d6:	2101      	movs	r1, #1
 80017d8:	430a      	orrs	r2, r1
 80017da:	621a      	str	r2, [r3, #32]
 80017dc:	e036      	b.n	800184c <HAL_RCC_OscConfig+0x39c>
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	40021000 	.word	0x40021000
 80017e4:	fffeffff 	.word	0xfffeffff
 80017e8:	fffbffff 	.word	0xfffbffff
 80017ec:	40007000 	.word	0x40007000
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d10c      	bne.n	8001812 <HAL_RCC_OscConfig+0x362>
 80017f8:	4bb6      	ldr	r3, [pc, #728]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 80017fa:	6a1a      	ldr	r2, [r3, #32]
 80017fc:	4bb5      	ldr	r3, [pc, #724]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 80017fe:	2101      	movs	r1, #1
 8001800:	438a      	bics	r2, r1
 8001802:	621a      	str	r2, [r3, #32]
 8001804:	4bb3      	ldr	r3, [pc, #716]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 8001806:	6a1a      	ldr	r2, [r3, #32]
 8001808:	4bb2      	ldr	r3, [pc, #712]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 800180a:	2104      	movs	r1, #4
 800180c:	438a      	bics	r2, r1
 800180e:	621a      	str	r2, [r3, #32]
 8001810:	e01c      	b.n	800184c <HAL_RCC_OscConfig+0x39c>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	2b05      	cmp	r3, #5
 8001818:	d10c      	bne.n	8001834 <HAL_RCC_OscConfig+0x384>
 800181a:	4bae      	ldr	r3, [pc, #696]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 800181c:	6a1a      	ldr	r2, [r3, #32]
 800181e:	4bad      	ldr	r3, [pc, #692]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 8001820:	2104      	movs	r1, #4
 8001822:	430a      	orrs	r2, r1
 8001824:	621a      	str	r2, [r3, #32]
 8001826:	4bab      	ldr	r3, [pc, #684]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 8001828:	6a1a      	ldr	r2, [r3, #32]
 800182a:	4baa      	ldr	r3, [pc, #680]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 800182c:	2101      	movs	r1, #1
 800182e:	430a      	orrs	r2, r1
 8001830:	621a      	str	r2, [r3, #32]
 8001832:	e00b      	b.n	800184c <HAL_RCC_OscConfig+0x39c>
 8001834:	4ba7      	ldr	r3, [pc, #668]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 8001836:	6a1a      	ldr	r2, [r3, #32]
 8001838:	4ba6      	ldr	r3, [pc, #664]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 800183a:	2101      	movs	r1, #1
 800183c:	438a      	bics	r2, r1
 800183e:	621a      	str	r2, [r3, #32]
 8001840:	4ba4      	ldr	r3, [pc, #656]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 8001842:	6a1a      	ldr	r2, [r3, #32]
 8001844:	4ba3      	ldr	r3, [pc, #652]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 8001846:	2104      	movs	r1, #4
 8001848:	438a      	bics	r2, r1
 800184a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d014      	beq.n	800187e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001854:	f7ff fba2 	bl	8000f9c <HAL_GetTick>
 8001858:	0003      	movs	r3, r0
 800185a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800185c:	e009      	b.n	8001872 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800185e:	f7ff fb9d 	bl	8000f9c <HAL_GetTick>
 8001862:	0002      	movs	r2, r0
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	4a9b      	ldr	r2, [pc, #620]	; (8001ad8 <HAL_RCC_OscConfig+0x628>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e12b      	b.n	8001aca <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001872:	4b98      	ldr	r3, [pc, #608]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 8001874:	6a1b      	ldr	r3, [r3, #32]
 8001876:	2202      	movs	r2, #2
 8001878:	4013      	ands	r3, r2
 800187a:	d0f0      	beq.n	800185e <HAL_RCC_OscConfig+0x3ae>
 800187c:	e013      	b.n	80018a6 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187e:	f7ff fb8d 	bl	8000f9c <HAL_GetTick>
 8001882:	0003      	movs	r3, r0
 8001884:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001886:	e009      	b.n	800189c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001888:	f7ff fb88 	bl	8000f9c <HAL_GetTick>
 800188c:	0002      	movs	r2, r0
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	4a91      	ldr	r2, [pc, #580]	; (8001ad8 <HAL_RCC_OscConfig+0x628>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e116      	b.n	8001aca <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800189c:	4b8d      	ldr	r3, [pc, #564]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	2202      	movs	r2, #2
 80018a2:	4013      	ands	r3, r2
 80018a4:	d1f0      	bne.n	8001888 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018a6:	231f      	movs	r3, #31
 80018a8:	18fb      	adds	r3, r7, r3
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d105      	bne.n	80018bc <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018b0:	4b88      	ldr	r3, [pc, #544]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 80018b2:	69da      	ldr	r2, [r3, #28]
 80018b4:	4b87      	ldr	r3, [pc, #540]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 80018b6:	4989      	ldr	r1, [pc, #548]	; (8001adc <HAL_RCC_OscConfig+0x62c>)
 80018b8:	400a      	ands	r2, r1
 80018ba:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2210      	movs	r2, #16
 80018c2:	4013      	ands	r3, r2
 80018c4:	d063      	beq.n	800198e <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d12a      	bne.n	8001924 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80018ce:	4b81      	ldr	r3, [pc, #516]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 80018d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018d2:	4b80      	ldr	r3, [pc, #512]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 80018d4:	2104      	movs	r1, #4
 80018d6:	430a      	orrs	r2, r1
 80018d8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80018da:	4b7e      	ldr	r3, [pc, #504]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 80018dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018de:	4b7d      	ldr	r3, [pc, #500]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 80018e0:	2101      	movs	r1, #1
 80018e2:	430a      	orrs	r2, r1
 80018e4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e6:	f7ff fb59 	bl	8000f9c <HAL_GetTick>
 80018ea:	0003      	movs	r3, r0
 80018ec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80018f0:	f7ff fb54 	bl	8000f9c <HAL_GetTick>
 80018f4:	0002      	movs	r2, r0
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e0e3      	b.n	8001aca <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001902:	4b74      	ldr	r3, [pc, #464]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 8001904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001906:	2202      	movs	r2, #2
 8001908:	4013      	ands	r3, r2
 800190a:	d0f1      	beq.n	80018f0 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800190c:	4b71      	ldr	r3, [pc, #452]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 800190e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001910:	22f8      	movs	r2, #248	; 0xf8
 8001912:	4393      	bics	r3, r2
 8001914:	0019      	movs	r1, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	00da      	lsls	r2, r3, #3
 800191c:	4b6d      	ldr	r3, [pc, #436]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 800191e:	430a      	orrs	r2, r1
 8001920:	635a      	str	r2, [r3, #52]	; 0x34
 8001922:	e034      	b.n	800198e <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	695b      	ldr	r3, [r3, #20]
 8001928:	3305      	adds	r3, #5
 800192a:	d111      	bne.n	8001950 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800192c:	4b69      	ldr	r3, [pc, #420]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 800192e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001930:	4b68      	ldr	r3, [pc, #416]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 8001932:	2104      	movs	r1, #4
 8001934:	438a      	bics	r2, r1
 8001936:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001938:	4b66      	ldr	r3, [pc, #408]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 800193a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800193c:	22f8      	movs	r2, #248	; 0xf8
 800193e:	4393      	bics	r3, r2
 8001940:	0019      	movs	r1, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	00da      	lsls	r2, r3, #3
 8001948:	4b62      	ldr	r3, [pc, #392]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 800194a:	430a      	orrs	r2, r1
 800194c:	635a      	str	r2, [r3, #52]	; 0x34
 800194e:	e01e      	b.n	800198e <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001950:	4b60      	ldr	r3, [pc, #384]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 8001952:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001954:	4b5f      	ldr	r3, [pc, #380]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 8001956:	2104      	movs	r1, #4
 8001958:	430a      	orrs	r2, r1
 800195a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800195c:	4b5d      	ldr	r3, [pc, #372]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 800195e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001960:	4b5c      	ldr	r3, [pc, #368]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 8001962:	2101      	movs	r1, #1
 8001964:	438a      	bics	r2, r1
 8001966:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001968:	f7ff fb18 	bl	8000f9c <HAL_GetTick>
 800196c:	0003      	movs	r3, r0
 800196e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001972:	f7ff fb13 	bl	8000f9c <HAL_GetTick>
 8001976:	0002      	movs	r2, r0
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e0a2      	b.n	8001aca <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001984:	4b53      	ldr	r3, [pc, #332]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 8001986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001988:	2202      	movs	r2, #2
 800198a:	4013      	ands	r3, r2
 800198c:	d1f1      	bne.n	8001972 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d100      	bne.n	8001998 <HAL_RCC_OscConfig+0x4e8>
 8001996:	e097      	b.n	8001ac8 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001998:	4b4e      	ldr	r3, [pc, #312]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	220c      	movs	r2, #12
 800199e:	4013      	ands	r3, r2
 80019a0:	2b08      	cmp	r3, #8
 80019a2:	d100      	bne.n	80019a6 <HAL_RCC_OscConfig+0x4f6>
 80019a4:	e06b      	b.n	8001a7e <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d14c      	bne.n	8001a48 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ae:	4b49      	ldr	r3, [pc, #292]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	4b48      	ldr	r3, [pc, #288]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 80019b4:	494a      	ldr	r1, [pc, #296]	; (8001ae0 <HAL_RCC_OscConfig+0x630>)
 80019b6:	400a      	ands	r2, r1
 80019b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ba:	f7ff faef 	bl	8000f9c <HAL_GetTick>
 80019be:	0003      	movs	r3, r0
 80019c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c4:	f7ff faea 	bl	8000f9c <HAL_GetTick>
 80019c8:	0002      	movs	r2, r0
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e079      	b.n	8001aca <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d6:	4b3f      	ldr	r3, [pc, #252]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	2380      	movs	r3, #128	; 0x80
 80019dc:	049b      	lsls	r3, r3, #18
 80019de:	4013      	ands	r3, r2
 80019e0:	d1f0      	bne.n	80019c4 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019e2:	4b3c      	ldr	r3, [pc, #240]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 80019e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e6:	220f      	movs	r2, #15
 80019e8:	4393      	bics	r3, r2
 80019ea:	0019      	movs	r1, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019f0:	4b38      	ldr	r3, [pc, #224]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 80019f2:	430a      	orrs	r2, r1
 80019f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80019f6:	4b37      	ldr	r3, [pc, #220]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	4a3a      	ldr	r2, [pc, #232]	; (8001ae4 <HAL_RCC_OscConfig+0x634>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	0019      	movs	r1, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a08:	431a      	orrs	r2, r3
 8001a0a:	4b32      	ldr	r3, [pc, #200]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a10:	4b30      	ldr	r3, [pc, #192]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b2f      	ldr	r3, [pc, #188]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 8001a16:	2180      	movs	r1, #128	; 0x80
 8001a18:	0449      	lsls	r1, r1, #17
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1e:	f7ff fabd 	bl	8000f9c <HAL_GetTick>
 8001a22:	0003      	movs	r3, r0
 8001a24:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a28:	f7ff fab8 	bl	8000f9c <HAL_GetTick>
 8001a2c:	0002      	movs	r2, r0
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e047      	b.n	8001aca <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a3a:	4b26      	ldr	r3, [pc, #152]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	2380      	movs	r3, #128	; 0x80
 8001a40:	049b      	lsls	r3, r3, #18
 8001a42:	4013      	ands	r3, r2
 8001a44:	d0f0      	beq.n	8001a28 <HAL_RCC_OscConfig+0x578>
 8001a46:	e03f      	b.n	8001ac8 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a48:	4b22      	ldr	r3, [pc, #136]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	4b21      	ldr	r3, [pc, #132]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 8001a4e:	4924      	ldr	r1, [pc, #144]	; (8001ae0 <HAL_RCC_OscConfig+0x630>)
 8001a50:	400a      	ands	r2, r1
 8001a52:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a54:	f7ff faa2 	bl	8000f9c <HAL_GetTick>
 8001a58:	0003      	movs	r3, r0
 8001a5a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a5e:	f7ff fa9d 	bl	8000f9c <HAL_GetTick>
 8001a62:	0002      	movs	r2, r0
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e02c      	b.n	8001aca <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a70:	4b18      	ldr	r3, [pc, #96]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	2380      	movs	r3, #128	; 0x80
 8001a76:	049b      	lsls	r3, r3, #18
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d1f0      	bne.n	8001a5e <HAL_RCC_OscConfig+0x5ae>
 8001a7c:	e024      	b.n	8001ac8 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a1b      	ldr	r3, [r3, #32]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d101      	bne.n	8001a8a <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e01f      	b.n	8001aca <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001a8a:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001a90:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 8001a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a94:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	025b      	lsls	r3, r3, #9
 8001a9c:	401a      	ands	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d10e      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	220f      	movs	r2, #15
 8001aaa:	401a      	ands	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d107      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	23f0      	movs	r3, #240	; 0xf0
 8001ab8:	039b      	lsls	r3, r3, #14
 8001aba:	401a      	ands	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d001      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e000      	b.n	8001aca <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	0018      	movs	r0, r3
 8001acc:	46bd      	mov	sp, r7
 8001ace:	b008      	add	sp, #32
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	46c0      	nop			; (mov r8, r8)
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	00001388 	.word	0x00001388
 8001adc:	efffffff 	.word	0xefffffff
 8001ae0:	feffffff 	.word	0xfeffffff
 8001ae4:	ffc2ffff 	.word	0xffc2ffff

08001ae8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e0b3      	b.n	8001c64 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001afc:	4b5b      	ldr	r3, [pc, #364]	; (8001c6c <HAL_RCC_ClockConfig+0x184>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2201      	movs	r2, #1
 8001b02:	4013      	ands	r3, r2
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d911      	bls.n	8001b2e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0a:	4b58      	ldr	r3, [pc, #352]	; (8001c6c <HAL_RCC_ClockConfig+0x184>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	4393      	bics	r3, r2
 8001b12:	0019      	movs	r1, r3
 8001b14:	4b55      	ldr	r3, [pc, #340]	; (8001c6c <HAL_RCC_ClockConfig+0x184>)
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1c:	4b53      	ldr	r3, [pc, #332]	; (8001c6c <HAL_RCC_ClockConfig+0x184>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2201      	movs	r2, #1
 8001b22:	4013      	ands	r3, r2
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d001      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e09a      	b.n	8001c64 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2202      	movs	r2, #2
 8001b34:	4013      	ands	r3, r2
 8001b36:	d015      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2204      	movs	r2, #4
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d006      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b42:	4b4b      	ldr	r3, [pc, #300]	; (8001c70 <HAL_RCC_ClockConfig+0x188>)
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	4b4a      	ldr	r3, [pc, #296]	; (8001c70 <HAL_RCC_ClockConfig+0x188>)
 8001b48:	21e0      	movs	r1, #224	; 0xe0
 8001b4a:	00c9      	lsls	r1, r1, #3
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b50:	4b47      	ldr	r3, [pc, #284]	; (8001c70 <HAL_RCC_ClockConfig+0x188>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	22f0      	movs	r2, #240	; 0xf0
 8001b56:	4393      	bics	r3, r2
 8001b58:	0019      	movs	r1, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	4b44      	ldr	r3, [pc, #272]	; (8001c70 <HAL_RCC_ClockConfig+0x188>)
 8001b60:	430a      	orrs	r2, r1
 8001b62:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d040      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d107      	bne.n	8001b86 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b76:	4b3e      	ldr	r3, [pc, #248]	; (8001c70 <HAL_RCC_ClockConfig+0x188>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	029b      	lsls	r3, r3, #10
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d114      	bne.n	8001bac <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e06e      	b.n	8001c64 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d107      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b8e:	4b38      	ldr	r3, [pc, #224]	; (8001c70 <HAL_RCC_ClockConfig+0x188>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	2380      	movs	r3, #128	; 0x80
 8001b94:	049b      	lsls	r3, r3, #18
 8001b96:	4013      	ands	r3, r2
 8001b98:	d108      	bne.n	8001bac <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e062      	b.n	8001c64 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b9e:	4b34      	ldr	r3, [pc, #208]	; (8001c70 <HAL_RCC_ClockConfig+0x188>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d101      	bne.n	8001bac <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e05b      	b.n	8001c64 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bac:	4b30      	ldr	r3, [pc, #192]	; (8001c70 <HAL_RCC_ClockConfig+0x188>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2203      	movs	r2, #3
 8001bb2:	4393      	bics	r3, r2
 8001bb4:	0019      	movs	r1, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	4b2d      	ldr	r3, [pc, #180]	; (8001c70 <HAL_RCC_ClockConfig+0x188>)
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bc0:	f7ff f9ec 	bl	8000f9c <HAL_GetTick>
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc8:	e009      	b.n	8001bde <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bca:	f7ff f9e7 	bl	8000f9c <HAL_GetTick>
 8001bce:	0002      	movs	r2, r0
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	4a27      	ldr	r2, [pc, #156]	; (8001c74 <HAL_RCC_ClockConfig+0x18c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e042      	b.n	8001c64 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bde:	4b24      	ldr	r3, [pc, #144]	; (8001c70 <HAL_RCC_ClockConfig+0x188>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	220c      	movs	r2, #12
 8001be4:	401a      	ands	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d1ec      	bne.n	8001bca <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bf0:	4b1e      	ldr	r3, [pc, #120]	; (8001c6c <HAL_RCC_ClockConfig+0x184>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d211      	bcs.n	8001c22 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfe:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <HAL_RCC_ClockConfig+0x184>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2201      	movs	r2, #1
 8001c04:	4393      	bics	r3, r2
 8001c06:	0019      	movs	r1, r3
 8001c08:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <HAL_RCC_ClockConfig+0x184>)
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c10:	4b16      	ldr	r3, [pc, #88]	; (8001c6c <HAL_RCC_ClockConfig+0x184>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2201      	movs	r2, #1
 8001c16:	4013      	ands	r3, r2
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d001      	beq.n	8001c22 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e020      	b.n	8001c64 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2204      	movs	r2, #4
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d009      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c2c:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <HAL_RCC_ClockConfig+0x188>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	4a11      	ldr	r2, [pc, #68]	; (8001c78 <HAL_RCC_ClockConfig+0x190>)
 8001c32:	4013      	ands	r3, r2
 8001c34:	0019      	movs	r1, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68da      	ldr	r2, [r3, #12]
 8001c3a:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <HAL_RCC_ClockConfig+0x188>)
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c40:	f000 f820 	bl	8001c84 <HAL_RCC_GetSysClockFreq>
 8001c44:	0001      	movs	r1, r0
 8001c46:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <HAL_RCC_ClockConfig+0x188>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	091b      	lsrs	r3, r3, #4
 8001c4c:	220f      	movs	r2, #15
 8001c4e:	4013      	ands	r3, r2
 8001c50:	4a0a      	ldr	r2, [pc, #40]	; (8001c7c <HAL_RCC_ClockConfig+0x194>)
 8001c52:	5cd3      	ldrb	r3, [r2, r3]
 8001c54:	000a      	movs	r2, r1
 8001c56:	40da      	lsrs	r2, r3
 8001c58:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <HAL_RCC_ClockConfig+0x198>)
 8001c5a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	f7ff f957 	bl	8000f10 <HAL_InitTick>
  
  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	0018      	movs	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	b004      	add	sp, #16
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40022000 	.word	0x40022000
 8001c70:	40021000 	.word	0x40021000
 8001c74:	00001388 	.word	0x00001388
 8001c78:	fffff8ff 	.word	0xfffff8ff
 8001c7c:	08002778 	.word	0x08002778
 8001c80:	20000000 	.word	0x20000000

08001c84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c84:	b590      	push	{r4, r7, lr}
 8001c86:	b08f      	sub	sp, #60	; 0x3c
 8001c88:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001c8a:	2314      	movs	r3, #20
 8001c8c:	18fb      	adds	r3, r7, r3
 8001c8e:	4a2b      	ldr	r2, [pc, #172]	; (8001d3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c90:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001c92:	c313      	stmia	r3!, {r0, r1, r4}
 8001c94:	6812      	ldr	r2, [r2, #0]
 8001c96:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001c98:	1d3b      	adds	r3, r7, #4
 8001c9a:	4a29      	ldr	r2, [pc, #164]	; (8001d40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c9c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001c9e:	c313      	stmia	r3!, {r0, r1, r4}
 8001ca0:	6812      	ldr	r2, [r2, #0]
 8001ca2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ca8:	2300      	movs	r3, #0
 8001caa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cac:	2300      	movs	r3, #0
 8001cae:	637b      	str	r3, [r7, #52]	; 0x34
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001cb8:	4b22      	ldr	r3, [pc, #136]	; (8001d44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc0:	220c      	movs	r2, #12
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	2b04      	cmp	r3, #4
 8001cc6:	d002      	beq.n	8001cce <HAL_RCC_GetSysClockFreq+0x4a>
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d003      	beq.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x50>
 8001ccc:	e02d      	b.n	8001d2a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cce:	4b1e      	ldr	r3, [pc, #120]	; (8001d48 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001cd0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cd2:	e02d      	b.n	8001d30 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd6:	0c9b      	lsrs	r3, r3, #18
 8001cd8:	220f      	movs	r2, #15
 8001cda:	4013      	ands	r3, r2
 8001cdc:	2214      	movs	r2, #20
 8001cde:	18ba      	adds	r2, r7, r2
 8001ce0:	5cd3      	ldrb	r3, [r2, r3]
 8001ce2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001ce4:	4b17      	ldr	r3, [pc, #92]	; (8001d44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce8:	220f      	movs	r2, #15
 8001cea:	4013      	ands	r3, r2
 8001cec:	1d3a      	adds	r2, r7, #4
 8001cee:	5cd3      	ldrb	r3, [r2, r3]
 8001cf0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001cf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cf4:	2380      	movs	r3, #128	; 0x80
 8001cf6:	025b      	lsls	r3, r3, #9
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d009      	beq.n	8001d10 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001cfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001cfe:	4812      	ldr	r0, [pc, #72]	; (8001d48 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d00:	f7fe fa02 	bl	8000108 <__udivsi3>
 8001d04:	0003      	movs	r3, r0
 8001d06:	001a      	movs	r2, r3
 8001d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0a:	4353      	muls	r3, r2
 8001d0c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d0e:	e009      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001d10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d12:	000a      	movs	r2, r1
 8001d14:	0152      	lsls	r2, r2, #5
 8001d16:	1a52      	subs	r2, r2, r1
 8001d18:	0193      	lsls	r3, r2, #6
 8001d1a:	1a9b      	subs	r3, r3, r2
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	185b      	adds	r3, r3, r1
 8001d20:	021b      	lsls	r3, r3, #8
 8001d22:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d26:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d28:	e002      	b.n	8001d30 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d2a:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d2c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d2e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001d32:	0018      	movs	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	b00f      	add	sp, #60	; 0x3c
 8001d38:	bd90      	pop	{r4, r7, pc}
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	080026e8 	.word	0x080026e8
 8001d40:	080026f8 	.word	0x080026f8
 8001d44:	40021000 	.word	0x40021000
 8001d48:	007a1200 	.word	0x007a1200

08001d4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e08a      	b.n	8001e74 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	225d      	movs	r2, #93	; 0x5d
 8001d68:	5c9b      	ldrb	r3, [r3, r2]
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d107      	bne.n	8001d80 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	225c      	movs	r2, #92	; 0x5c
 8001d74:	2100      	movs	r1, #0
 8001d76:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	f7fe ffce 	bl	8000d1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	225d      	movs	r2, #93	; 0x5d
 8001d84:	2102      	movs	r1, #2
 8001d86:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2140      	movs	r1, #64	; 0x40
 8001d94:	438a      	bics	r2, r1
 8001d96:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68da      	ldr	r2, [r3, #12]
 8001d9c:	23e0      	movs	r3, #224	; 0xe0
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d902      	bls.n	8001daa <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001da4:	2300      	movs	r3, #0
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	e002      	b.n	8001db0 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001daa:	2380      	movs	r3, #128	; 0x80
 8001dac:	015b      	lsls	r3, r3, #5
 8001dae:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68da      	ldr	r2, [r3, #12]
 8001db4:	23f0      	movs	r3, #240	; 0xf0
 8001db6:	011b      	lsls	r3, r3, #4
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d008      	beq.n	8001dce <HAL_SPI_Init+0x82>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68da      	ldr	r2, [r3, #12]
 8001dc0:	23e0      	movs	r3, #224	; 0xe0
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d002      	beq.n	8001dce <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10c      	bne.n	8001df0 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68da      	ldr	r2, [r3, #12]
 8001dda:	23e0      	movs	r3, #224	; 0xe0
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d903      	bls.n	8001dea <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2202      	movs	r2, #2
 8001de6:	631a      	str	r2, [r3, #48]	; 0x30
 8001de8:	e002      	b.n	8001df0 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	431a      	orrs	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6999      	ldr	r1, [r3, #24]
 8001e0a:	2380      	movs	r3, #128	; 0x80
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	400b      	ands	r3, r1
 8001e10:	431a      	orrs	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	0011      	movs	r1, r2
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	0c1b      	lsrs	r3, r3, #16
 8001e32:	2204      	movs	r2, #4
 8001e34:	401a      	ands	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e40:	431a      	orrs	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	431a      	orrs	r2, r3
 8001e48:	0011      	movs	r1, r2
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	69da      	ldr	r2, [r3, #28]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4907      	ldr	r1, [pc, #28]	; (8001e7c <HAL_SPI_Init+0x130>)
 8001e60:	400a      	ands	r2, r1
 8001e62:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	225d      	movs	r2, #93	; 0x5d
 8001e6e:	2101      	movs	r1, #1
 8001e70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	0018      	movs	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	b004      	add	sp, #16
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	fffff7ff 	.word	0xfffff7ff

08001e80 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	603b      	str	r3, [r7, #0]
 8001e8c:	1dbb      	adds	r3, r7, #6
 8001e8e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e90:	231f      	movs	r3, #31
 8001e92:	18fb      	adds	r3, r7, r3
 8001e94:	2200      	movs	r2, #0
 8001e96:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	225c      	movs	r2, #92	; 0x5c
 8001e9c:	5c9b      	ldrb	r3, [r3, r2]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d101      	bne.n	8001ea6 <HAL_SPI_Transmit+0x26>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e169      	b.n	800217a <HAL_SPI_Transmit+0x2fa>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	225c      	movs	r2, #92	; 0x5c
 8001eaa:	2101      	movs	r1, #1
 8001eac:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001eae:	f7ff f875 	bl	8000f9c <HAL_GetTick>
 8001eb2:	0003      	movs	r3, r0
 8001eb4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001eb6:	2316      	movs	r3, #22
 8001eb8:	18fb      	adds	r3, r7, r3
 8001eba:	1dba      	adds	r2, r7, #6
 8001ebc:	8812      	ldrh	r2, [r2, #0]
 8001ebe:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	225d      	movs	r2, #93	; 0x5d
 8001ec4:	5c9b      	ldrb	r3, [r3, r2]
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d004      	beq.n	8001ed6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001ecc:	231f      	movs	r3, #31
 8001ece:	18fb      	adds	r3, r7, r3
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	701a      	strb	r2, [r3, #0]
    goto error;
 8001ed4:	e146      	b.n	8002164 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <HAL_SPI_Transmit+0x64>
 8001edc:	1dbb      	adds	r3, r7, #6
 8001ede:	881b      	ldrh	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d104      	bne.n	8001eee <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001ee4:	231f      	movs	r3, #31
 8001ee6:	18fb      	adds	r3, r7, r3
 8001ee8:	2201      	movs	r2, #1
 8001eea:	701a      	strb	r2, [r3, #0]
    goto error;
 8001eec:	e13a      	b.n	8002164 <HAL_SPI_Transmit+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	225d      	movs	r2, #93	; 0x5d
 8001ef2:	2103      	movs	r1, #3
 8001ef4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	1dba      	adds	r2, r7, #6
 8001f06:	8812      	ldrh	r2, [r2, #0]
 8001f08:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	1dba      	adds	r2, r7, #6
 8001f0e:	8812      	ldrh	r2, [r2, #0]
 8001f10:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2244      	movs	r2, #68	; 0x44
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2246      	movs	r2, #70	; 0x46
 8001f24:	2100      	movs	r1, #0
 8001f26:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	2380      	movs	r3, #128	; 0x80
 8001f3a:	021b      	lsls	r3, r3, #8
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d108      	bne.n	8001f52 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2180      	movs	r1, #128	; 0x80
 8001f4c:	01c9      	lsls	r1, r1, #7
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2240      	movs	r2, #64	; 0x40
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	2b40      	cmp	r3, #64	; 0x40
 8001f5e:	d007      	beq.n	8001f70 <HAL_SPI_Transmit+0xf0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2140      	movs	r1, #64	; 0x40
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	68da      	ldr	r2, [r3, #12]
 8001f74:	23e0      	movs	r3, #224	; 0xe0
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d94e      	bls.n	800201a <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d004      	beq.n	8001f8e <HAL_SPI_Transmit+0x10e>
 8001f84:	2316      	movs	r3, #22
 8001f86:	18fb      	adds	r3, r7, r3
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d13f      	bne.n	800200e <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f92:	881a      	ldrh	r2, [r3, #0]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9e:	1c9a      	adds	r2, r3, #2
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	3b01      	subs	r3, #1
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001fb2:	e02c      	b.n	800200e <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	2202      	movs	r2, #2
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d112      	bne.n	8001fe8 <HAL_SPI_Transmit+0x168>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc6:	881a      	ldrh	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd2:	1c9a      	adds	r2, r3, #2
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001fe6:	e012      	b.n	800200e <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fe8:	f7fe ffd8 	bl	8000f9c <HAL_GetTick>
 8001fec:	0002      	movs	r2, r0
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d802      	bhi.n	8001ffe <HAL_SPI_Transmit+0x17e>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	d102      	bne.n	8002004 <HAL_SPI_Transmit+0x184>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d104      	bne.n	800200e <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8002004:	231f      	movs	r3, #31
 8002006:	18fb      	adds	r3, r7, r3
 8002008:	2203      	movs	r2, #3
 800200a:	701a      	strb	r2, [r3, #0]
          goto error;
 800200c:	e0aa      	b.n	8002164 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002012:	b29b      	uxth	r3, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1cd      	bne.n	8001fb4 <HAL_SPI_Transmit+0x134>
 8002018:	e080      	b.n	800211c <HAL_SPI_Transmit+0x29c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d005      	beq.n	800202e <HAL_SPI_Transmit+0x1ae>
 8002022:	2316      	movs	r3, #22
 8002024:	18fb      	adds	r3, r7, r3
 8002026:	881b      	ldrh	r3, [r3, #0]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d000      	beq.n	800202e <HAL_SPI_Transmit+0x1ae>
 800202c:	e071      	b.n	8002112 <HAL_SPI_Transmit+0x292>
    {
      if (hspi->TxXferCount > 1U)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002032:	b29b      	uxth	r3, r3
 8002034:	2b01      	cmp	r3, #1
 8002036:	d912      	bls.n	800205e <HAL_SPI_Transmit+0x1de>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800203c:	881a      	ldrh	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002048:	1c9a      	adds	r2, r3, #2
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002052:	b29b      	uxth	r3, r3
 8002054:	3b02      	subs	r3, #2
 8002056:	b29a      	uxth	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800205c:	e059      	b.n	8002112 <HAL_SPI_Transmit+0x292>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	330c      	adds	r3, #12
 8002068:	7812      	ldrb	r2, [r2, #0]
 800206a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002070:	1c5a      	adds	r2, r3, #1
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800207a:	b29b      	uxth	r3, r3
 800207c:	3b01      	subs	r3, #1
 800207e:	b29a      	uxth	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002084:	e045      	b.n	8002112 <HAL_SPI_Transmit+0x292>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	2202      	movs	r2, #2
 800208e:	4013      	ands	r3, r2
 8002090:	2b02      	cmp	r3, #2
 8002092:	d12b      	bne.n	80020ec <HAL_SPI_Transmit+0x26c>
      {
        if (hspi->TxXferCount > 1U)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002098:	b29b      	uxth	r3, r3
 800209a:	2b01      	cmp	r3, #1
 800209c:	d912      	bls.n	80020c4 <HAL_SPI_Transmit+0x244>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a2:	881a      	ldrh	r2, [r3, #0]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ae:	1c9a      	adds	r2, r3, #2
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	3b02      	subs	r3, #2
 80020bc:	b29a      	uxth	r2, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80020c2:	e026      	b.n	8002112 <HAL_SPI_Transmit+0x292>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	330c      	adds	r3, #12
 80020ce:	7812      	ldrb	r2, [r2, #0]
 80020d0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	3b01      	subs	r3, #1
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80020ea:	e012      	b.n	8002112 <HAL_SPI_Transmit+0x292>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020ec:	f7fe ff56 	bl	8000f9c <HAL_GetTick>
 80020f0:	0002      	movs	r2, r0
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d802      	bhi.n	8002102 <HAL_SPI_Transmit+0x282>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	3301      	adds	r3, #1
 8002100:	d102      	bne.n	8002108 <HAL_SPI_Transmit+0x288>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d104      	bne.n	8002112 <HAL_SPI_Transmit+0x292>
        {
          errorcode = HAL_TIMEOUT;
 8002108:	231f      	movs	r3, #31
 800210a:	18fb      	adds	r3, r7, r3
 800210c:	2203      	movs	r2, #3
 800210e:	701a      	strb	r2, [r3, #0]
          goto error;
 8002110:	e028      	b.n	8002164 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002116:	b29b      	uxth	r3, r3
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1b4      	bne.n	8002086 <HAL_SPI_Transmit+0x206>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	6839      	ldr	r1, [r7, #0]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	0018      	movs	r0, r3
 8002124:	f000 f912 	bl	800234c <SPI_EndRxTxTransaction>
 8002128:	1e03      	subs	r3, r0, #0
 800212a:	d002      	beq.n	8002132 <HAL_SPI_Transmit+0x2b2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2220      	movs	r2, #32
 8002130:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10a      	bne.n	8002150 <HAL_SPI_Transmit+0x2d0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800213a:	2300      	movs	r3, #0
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002154:	2b00      	cmp	r3, #0
 8002156:	d004      	beq.n	8002162 <HAL_SPI_Transmit+0x2e2>
  {
    errorcode = HAL_ERROR;
 8002158:	231f      	movs	r3, #31
 800215a:	18fb      	adds	r3, r7, r3
 800215c:	2201      	movs	r2, #1
 800215e:	701a      	strb	r2, [r3, #0]
 8002160:	e000      	b.n	8002164 <HAL_SPI_Transmit+0x2e4>
  }

error:
 8002162:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	225d      	movs	r2, #93	; 0x5d
 8002168:	2101      	movs	r1, #1
 800216a:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	225c      	movs	r2, #92	; 0x5c
 8002170:	2100      	movs	r1, #0
 8002172:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002174:	231f      	movs	r3, #31
 8002176:	18fb      	adds	r3, r7, r3
 8002178:	781b      	ldrb	r3, [r3, #0]
}
 800217a:	0018      	movs	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	b008      	add	sp, #32
 8002180:	bd80      	pop	{r7, pc}
	...

08002184 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	603b      	str	r3, [r7, #0]
 8002190:	1dfb      	adds	r3, r7, #7
 8002192:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002194:	e050      	b.n	8002238 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	3301      	adds	r3, #1
 800219a:	d04d      	beq.n	8002238 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800219c:	f7fe fefe 	bl	8000f9c <HAL_GetTick>
 80021a0:	0002      	movs	r2, r0
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d902      	bls.n	80021b2 <SPI_WaitFlagStateUntilTimeout+0x2e>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d142      	bne.n	8002238 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	21e0      	movs	r1, #224	; 0xe0
 80021be:	438a      	bics	r2, r1
 80021c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	2382      	movs	r3, #130	; 0x82
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d113      	bne.n	80021f6 <SPI_WaitFlagStateUntilTimeout+0x72>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	2380      	movs	r3, #128	; 0x80
 80021d4:	021b      	lsls	r3, r3, #8
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d005      	beq.n	80021e6 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	689a      	ldr	r2, [r3, #8]
 80021de:	2380      	movs	r3, #128	; 0x80
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d107      	bne.n	80021f6 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2140      	movs	r1, #64	; 0x40
 80021f2:	438a      	bics	r2, r1
 80021f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021fa:	2380      	movs	r3, #128	; 0x80
 80021fc:	019b      	lsls	r3, r3, #6
 80021fe:	429a      	cmp	r2, r3
 8002200:	d110      	bne.n	8002224 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4914      	ldr	r1, [pc, #80]	; (8002260 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 800220e:	400a      	ands	r2, r1
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2180      	movs	r1, #128	; 0x80
 800221e:	0189      	lsls	r1, r1, #6
 8002220:	430a      	orrs	r2, r1
 8002222:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	225d      	movs	r2, #93	; 0x5d
 8002228:	2101      	movs	r1, #1
 800222a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	225c      	movs	r2, #92	; 0x5c
 8002230:	2100      	movs	r1, #0
 8002232:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e00f      	b.n	8002258 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	4013      	ands	r3, r2
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	425a      	negs	r2, r3
 8002248:	4153      	adcs	r3, r2
 800224a:	b2db      	uxtb	r3, r3
 800224c:	001a      	movs	r2, r3
 800224e:	1dfb      	adds	r3, r7, #7
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	429a      	cmp	r2, r3
 8002254:	d19f      	bne.n	8002196 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	0018      	movs	r0, r3
 800225a:	46bd      	mov	sp, r7
 800225c:	b004      	add	sp, #16
 800225e:	bd80      	pop	{r7, pc}
 8002260:	ffffdfff 	.word	0xffffdfff

08002264 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8002272:	e05c      	b.n	800232e <SPI_WaitFifoStateUntilTimeout+0xca>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002274:	68ba      	ldr	r2, [r7, #8]
 8002276:	23c0      	movs	r3, #192	; 0xc0
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	429a      	cmp	r2, r3
 800227c:	d106      	bne.n	800228c <SPI_WaitFifoStateUntilTimeout+0x28>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d103      	bne.n	800228c <SPI_WaitFifoStateUntilTimeout+0x28>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	330c      	adds	r3, #12
 800228a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	3301      	adds	r3, #1
 8002290:	d04d      	beq.n	800232e <SPI_WaitFifoStateUntilTimeout+0xca>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002292:	f7fe fe83 	bl	8000f9c <HAL_GetTick>
 8002296:	0002      	movs	r2, r0
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d902      	bls.n	80022a8 <SPI_WaitFifoStateUntilTimeout+0x44>
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d142      	bne.n	800232e <SPI_WaitFifoStateUntilTimeout+0xca>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	21e0      	movs	r1, #224	; 0xe0
 80022b4:	438a      	bics	r2, r1
 80022b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	2382      	movs	r3, #130	; 0x82
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d113      	bne.n	80022ec <SPI_WaitFifoStateUntilTimeout+0x88>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	2380      	movs	r3, #128	; 0x80
 80022ca:	021b      	lsls	r3, r3, #8
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d005      	beq.n	80022dc <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	429a      	cmp	r2, r3
 80022da:	d107      	bne.n	80022ec <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2140      	movs	r1, #64	; 0x40
 80022e8:	438a      	bics	r2, r1
 80022ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022f0:	2380      	movs	r3, #128	; 0x80
 80022f2:	019b      	lsls	r3, r3, #6
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d110      	bne.n	800231a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          SPI_RESET_CRC(hspi);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4911      	ldr	r1, [pc, #68]	; (8002348 <SPI_WaitFifoStateUntilTimeout+0xe4>)
 8002304:	400a      	ands	r2, r1
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2180      	movs	r1, #128	; 0x80
 8002314:	0189      	lsls	r1, r1, #6
 8002316:	430a      	orrs	r2, r1
 8002318:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	225d      	movs	r2, #93	; 0x5d
 800231e:	2101      	movs	r1, #1
 8002320:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	225c      	movs	r2, #92	; 0x5c
 8002326:	2100      	movs	r1, #0
 8002328:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e008      	b.n	8002340 <SPI_WaitFifoStateUntilTimeout+0xdc>
  while ((hspi->Instance->SR & Fifo) != State)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	4013      	ands	r3, r2
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	429a      	cmp	r2, r3
 800233c:	d19a      	bne.n	8002274 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	0018      	movs	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	b004      	add	sp, #16
 8002346:	bd80      	pop	{r7, pc}
 8002348:	ffffdfff 	.word	0xffffdfff

0800234c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af02      	add	r7, sp, #8
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	23c0      	movs	r3, #192	; 0xc0
 800235c:	0159      	lsls	r1, r3, #5
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	0013      	movs	r3, r2
 8002366:	2200      	movs	r2, #0
 8002368:	f7ff ff7c 	bl	8002264 <SPI_WaitFifoStateUntilTimeout>
 800236c:	1e03      	subs	r3, r0, #0
 800236e:	d007      	beq.n	8002380 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002374:	2220      	movs	r2, #32
 8002376:	431a      	orrs	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e027      	b.n	80023d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002380:	68ba      	ldr	r2, [r7, #8]
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	0013      	movs	r3, r2
 800238a:	2200      	movs	r2, #0
 800238c:	2180      	movs	r1, #128	; 0x80
 800238e:	f7ff fef9 	bl	8002184 <SPI_WaitFlagStateUntilTimeout>
 8002392:	1e03      	subs	r3, r0, #0
 8002394:	d007      	beq.n	80023a6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800239a:	2220      	movs	r2, #32
 800239c:	431a      	orrs	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e014      	b.n	80023d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	23c0      	movs	r3, #192	; 0xc0
 80023aa:	00d9      	lsls	r1, r3, #3
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	0013      	movs	r3, r2
 80023b4:	2200      	movs	r2, #0
 80023b6:	f7ff ff55 	bl	8002264 <SPI_WaitFifoStateUntilTimeout>
 80023ba:	1e03      	subs	r3, r0, #0
 80023bc:	d007      	beq.n	80023ce <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023c2:	2220      	movs	r2, #32
 80023c4:	431a      	orrs	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e000      	b.n	80023d0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	0018      	movs	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	b004      	add	sp, #16
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <_ZdlPvj>:
 80023d8:	b510      	push	{r4, lr}
 80023da:	f000 f819 	bl	8002410 <_ZdlPv>
 80023de:	bd10      	pop	{r4, pc}

080023e0 <_Znwj>:
 80023e0:	b510      	push	{r4, lr}
 80023e2:	1e04      	subs	r4, r0, #0
 80023e4:	d100      	bne.n	80023e8 <_Znwj+0x8>
 80023e6:	3401      	adds	r4, #1
 80023e8:	0020      	movs	r0, r4
 80023ea:	f000 f847 	bl	800247c <malloc>
 80023ee:	2800      	cmp	r0, #0
 80023f0:	d107      	bne.n	8002402 <_Znwj+0x22>
 80023f2:	f000 f807 	bl	8002404 <_ZSt15get_new_handlerv>
 80023f6:	2800      	cmp	r0, #0
 80023f8:	d101      	bne.n	80023fe <_Znwj+0x1e>
 80023fa:	f000 f80d 	bl	8002418 <abort>
 80023fe:	4780      	blx	r0
 8002400:	e7f2      	b.n	80023e8 <_Znwj+0x8>
 8002402:	bd10      	pop	{r4, pc}

08002404 <_ZSt15get_new_handlerv>:
 8002404:	4b01      	ldr	r3, [pc, #4]	; (800240c <_ZSt15get_new_handlerv+0x8>)
 8002406:	6818      	ldr	r0, [r3, #0]
 8002408:	4770      	bx	lr
 800240a:	46c0      	nop			; (mov r8, r8)
 800240c:	200000f4 	.word	0x200000f4

08002410 <_ZdlPv>:
 8002410:	b510      	push	{r4, lr}
 8002412:	f000 f83d 	bl	8002490 <free>
 8002416:	bd10      	pop	{r4, pc}

08002418 <abort>:
 8002418:	b510      	push	{r4, lr}
 800241a:	2006      	movs	r0, #6
 800241c:	f000 f92e 	bl	800267c <raise>
 8002420:	2001      	movs	r0, #1
 8002422:	f7fe fcf8 	bl	8000e16 <_exit>
	...

08002428 <__errno>:
 8002428:	4b01      	ldr	r3, [pc, #4]	; (8002430 <__errno+0x8>)
 800242a:	6818      	ldr	r0, [r3, #0]
 800242c:	4770      	bx	lr
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	2000000c 	.word	0x2000000c

08002434 <__libc_init_array>:
 8002434:	b570      	push	{r4, r5, r6, lr}
 8002436:	2600      	movs	r6, #0
 8002438:	4d0c      	ldr	r5, [pc, #48]	; (800246c <__libc_init_array+0x38>)
 800243a:	4c0d      	ldr	r4, [pc, #52]	; (8002470 <__libc_init_array+0x3c>)
 800243c:	1b64      	subs	r4, r4, r5
 800243e:	10a4      	asrs	r4, r4, #2
 8002440:	42a6      	cmp	r6, r4
 8002442:	d109      	bne.n	8002458 <__libc_init_array+0x24>
 8002444:	2600      	movs	r6, #0
 8002446:	f000 f93b 	bl	80026c0 <_init>
 800244a:	4d0a      	ldr	r5, [pc, #40]	; (8002474 <__libc_init_array+0x40>)
 800244c:	4c0a      	ldr	r4, [pc, #40]	; (8002478 <__libc_init_array+0x44>)
 800244e:	1b64      	subs	r4, r4, r5
 8002450:	10a4      	asrs	r4, r4, #2
 8002452:	42a6      	cmp	r6, r4
 8002454:	d105      	bne.n	8002462 <__libc_init_array+0x2e>
 8002456:	bd70      	pop	{r4, r5, r6, pc}
 8002458:	00b3      	lsls	r3, r6, #2
 800245a:	58eb      	ldr	r3, [r5, r3]
 800245c:	4798      	blx	r3
 800245e:	3601      	adds	r6, #1
 8002460:	e7ee      	b.n	8002440 <__libc_init_array+0xc>
 8002462:	00b3      	lsls	r3, r6, #2
 8002464:	58eb      	ldr	r3, [r5, r3]
 8002466:	4798      	blx	r3
 8002468:	3601      	adds	r6, #1
 800246a:	e7f2      	b.n	8002452 <__libc_init_array+0x1e>
 800246c:	08002788 	.word	0x08002788
 8002470:	08002788 	.word	0x08002788
 8002474:	08002788 	.word	0x08002788
 8002478:	0800278c 	.word	0x0800278c

0800247c <malloc>:
 800247c:	b510      	push	{r4, lr}
 800247e:	4b03      	ldr	r3, [pc, #12]	; (800248c <malloc+0x10>)
 8002480:	0001      	movs	r1, r0
 8002482:	6818      	ldr	r0, [r3, #0]
 8002484:	f000 f860 	bl	8002548 <_malloc_r>
 8002488:	bd10      	pop	{r4, pc}
 800248a:	46c0      	nop			; (mov r8, r8)
 800248c:	2000000c 	.word	0x2000000c

08002490 <free>:
 8002490:	b510      	push	{r4, lr}
 8002492:	4b03      	ldr	r3, [pc, #12]	; (80024a0 <free+0x10>)
 8002494:	0001      	movs	r1, r0
 8002496:	6818      	ldr	r0, [r3, #0]
 8002498:	f000 f80c 	bl	80024b4 <_free_r>
 800249c:	bd10      	pop	{r4, pc}
 800249e:	46c0      	nop			; (mov r8, r8)
 80024a0:	2000000c 	.word	0x2000000c

080024a4 <memset>:
 80024a4:	0003      	movs	r3, r0
 80024a6:	1812      	adds	r2, r2, r0
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d100      	bne.n	80024ae <memset+0xa>
 80024ac:	4770      	bx	lr
 80024ae:	7019      	strb	r1, [r3, #0]
 80024b0:	3301      	adds	r3, #1
 80024b2:	e7f9      	b.n	80024a8 <memset+0x4>

080024b4 <_free_r>:
 80024b4:	b570      	push	{r4, r5, r6, lr}
 80024b6:	0005      	movs	r5, r0
 80024b8:	2900      	cmp	r1, #0
 80024ba:	d010      	beq.n	80024de <_free_r+0x2a>
 80024bc:	1f0c      	subs	r4, r1, #4
 80024be:	6823      	ldr	r3, [r4, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	da00      	bge.n	80024c6 <_free_r+0x12>
 80024c4:	18e4      	adds	r4, r4, r3
 80024c6:	0028      	movs	r0, r5
 80024c8:	f000 f8f8 	bl	80026bc <__malloc_lock>
 80024cc:	4a1d      	ldr	r2, [pc, #116]	; (8002544 <_free_r+0x90>)
 80024ce:	6813      	ldr	r3, [r2, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d105      	bne.n	80024e0 <_free_r+0x2c>
 80024d4:	6063      	str	r3, [r4, #4]
 80024d6:	6014      	str	r4, [r2, #0]
 80024d8:	0028      	movs	r0, r5
 80024da:	f000 f8f0 	bl	80026be <__malloc_unlock>
 80024de:	bd70      	pop	{r4, r5, r6, pc}
 80024e0:	42a3      	cmp	r3, r4
 80024e2:	d909      	bls.n	80024f8 <_free_r+0x44>
 80024e4:	6821      	ldr	r1, [r4, #0]
 80024e6:	1860      	adds	r0, r4, r1
 80024e8:	4283      	cmp	r3, r0
 80024ea:	d1f3      	bne.n	80024d4 <_free_r+0x20>
 80024ec:	6818      	ldr	r0, [r3, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	1841      	adds	r1, r0, r1
 80024f2:	6021      	str	r1, [r4, #0]
 80024f4:	e7ee      	b.n	80024d4 <_free_r+0x20>
 80024f6:	0013      	movs	r3, r2
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	2a00      	cmp	r2, #0
 80024fc:	d001      	beq.n	8002502 <_free_r+0x4e>
 80024fe:	42a2      	cmp	r2, r4
 8002500:	d9f9      	bls.n	80024f6 <_free_r+0x42>
 8002502:	6819      	ldr	r1, [r3, #0]
 8002504:	1858      	adds	r0, r3, r1
 8002506:	42a0      	cmp	r0, r4
 8002508:	d10b      	bne.n	8002522 <_free_r+0x6e>
 800250a:	6820      	ldr	r0, [r4, #0]
 800250c:	1809      	adds	r1, r1, r0
 800250e:	1858      	adds	r0, r3, r1
 8002510:	6019      	str	r1, [r3, #0]
 8002512:	4282      	cmp	r2, r0
 8002514:	d1e0      	bne.n	80024d8 <_free_r+0x24>
 8002516:	6810      	ldr	r0, [r2, #0]
 8002518:	6852      	ldr	r2, [r2, #4]
 800251a:	1841      	adds	r1, r0, r1
 800251c:	6019      	str	r1, [r3, #0]
 800251e:	605a      	str	r2, [r3, #4]
 8002520:	e7da      	b.n	80024d8 <_free_r+0x24>
 8002522:	42a0      	cmp	r0, r4
 8002524:	d902      	bls.n	800252c <_free_r+0x78>
 8002526:	230c      	movs	r3, #12
 8002528:	602b      	str	r3, [r5, #0]
 800252a:	e7d5      	b.n	80024d8 <_free_r+0x24>
 800252c:	6821      	ldr	r1, [r4, #0]
 800252e:	1860      	adds	r0, r4, r1
 8002530:	4282      	cmp	r2, r0
 8002532:	d103      	bne.n	800253c <_free_r+0x88>
 8002534:	6810      	ldr	r0, [r2, #0]
 8002536:	6852      	ldr	r2, [r2, #4]
 8002538:	1841      	adds	r1, r0, r1
 800253a:	6021      	str	r1, [r4, #0]
 800253c:	6062      	str	r2, [r4, #4]
 800253e:	605c      	str	r4, [r3, #4]
 8002540:	e7ca      	b.n	80024d8 <_free_r+0x24>
 8002542:	46c0      	nop			; (mov r8, r8)
 8002544:	200000f8 	.word	0x200000f8

08002548 <_malloc_r>:
 8002548:	2303      	movs	r3, #3
 800254a:	b570      	push	{r4, r5, r6, lr}
 800254c:	1ccd      	adds	r5, r1, #3
 800254e:	439d      	bics	r5, r3
 8002550:	3508      	adds	r5, #8
 8002552:	0006      	movs	r6, r0
 8002554:	2d0c      	cmp	r5, #12
 8002556:	d21e      	bcs.n	8002596 <_malloc_r+0x4e>
 8002558:	250c      	movs	r5, #12
 800255a:	42a9      	cmp	r1, r5
 800255c:	d81d      	bhi.n	800259a <_malloc_r+0x52>
 800255e:	0030      	movs	r0, r6
 8002560:	f000 f8ac 	bl	80026bc <__malloc_lock>
 8002564:	4a25      	ldr	r2, [pc, #148]	; (80025fc <_malloc_r+0xb4>)
 8002566:	6814      	ldr	r4, [r2, #0]
 8002568:	0021      	movs	r1, r4
 800256a:	2900      	cmp	r1, #0
 800256c:	d119      	bne.n	80025a2 <_malloc_r+0x5a>
 800256e:	4c24      	ldr	r4, [pc, #144]	; (8002600 <_malloc_r+0xb8>)
 8002570:	6823      	ldr	r3, [r4, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d103      	bne.n	800257e <_malloc_r+0x36>
 8002576:	0030      	movs	r0, r6
 8002578:	f000 f844 	bl	8002604 <_sbrk_r>
 800257c:	6020      	str	r0, [r4, #0]
 800257e:	0029      	movs	r1, r5
 8002580:	0030      	movs	r0, r6
 8002582:	f000 f83f 	bl	8002604 <_sbrk_r>
 8002586:	1c43      	adds	r3, r0, #1
 8002588:	d12b      	bne.n	80025e2 <_malloc_r+0x9a>
 800258a:	230c      	movs	r3, #12
 800258c:	0030      	movs	r0, r6
 800258e:	6033      	str	r3, [r6, #0]
 8002590:	f000 f895 	bl	80026be <__malloc_unlock>
 8002594:	e003      	b.n	800259e <_malloc_r+0x56>
 8002596:	2d00      	cmp	r5, #0
 8002598:	dadf      	bge.n	800255a <_malloc_r+0x12>
 800259a:	230c      	movs	r3, #12
 800259c:	6033      	str	r3, [r6, #0]
 800259e:	2000      	movs	r0, #0
 80025a0:	bd70      	pop	{r4, r5, r6, pc}
 80025a2:	680b      	ldr	r3, [r1, #0]
 80025a4:	1b5b      	subs	r3, r3, r5
 80025a6:	d419      	bmi.n	80025dc <_malloc_r+0x94>
 80025a8:	2b0b      	cmp	r3, #11
 80025aa:	d903      	bls.n	80025b4 <_malloc_r+0x6c>
 80025ac:	600b      	str	r3, [r1, #0]
 80025ae:	18cc      	adds	r4, r1, r3
 80025b0:	6025      	str	r5, [r4, #0]
 80025b2:	e003      	b.n	80025bc <_malloc_r+0x74>
 80025b4:	684b      	ldr	r3, [r1, #4]
 80025b6:	428c      	cmp	r4, r1
 80025b8:	d10d      	bne.n	80025d6 <_malloc_r+0x8e>
 80025ba:	6013      	str	r3, [r2, #0]
 80025bc:	0030      	movs	r0, r6
 80025be:	f000 f87e 	bl	80026be <__malloc_unlock>
 80025c2:	0020      	movs	r0, r4
 80025c4:	2207      	movs	r2, #7
 80025c6:	300b      	adds	r0, #11
 80025c8:	1d23      	adds	r3, r4, #4
 80025ca:	4390      	bics	r0, r2
 80025cc:	1ac3      	subs	r3, r0, r3
 80025ce:	d0e7      	beq.n	80025a0 <_malloc_r+0x58>
 80025d0:	425a      	negs	r2, r3
 80025d2:	50e2      	str	r2, [r4, r3]
 80025d4:	e7e4      	b.n	80025a0 <_malloc_r+0x58>
 80025d6:	6063      	str	r3, [r4, #4]
 80025d8:	000c      	movs	r4, r1
 80025da:	e7ef      	b.n	80025bc <_malloc_r+0x74>
 80025dc:	000c      	movs	r4, r1
 80025de:	6849      	ldr	r1, [r1, #4]
 80025e0:	e7c3      	b.n	800256a <_malloc_r+0x22>
 80025e2:	2303      	movs	r3, #3
 80025e4:	1cc4      	adds	r4, r0, #3
 80025e6:	439c      	bics	r4, r3
 80025e8:	42a0      	cmp	r0, r4
 80025ea:	d0e1      	beq.n	80025b0 <_malloc_r+0x68>
 80025ec:	1a21      	subs	r1, r4, r0
 80025ee:	0030      	movs	r0, r6
 80025f0:	f000 f808 	bl	8002604 <_sbrk_r>
 80025f4:	1c43      	adds	r3, r0, #1
 80025f6:	d1db      	bne.n	80025b0 <_malloc_r+0x68>
 80025f8:	e7c7      	b.n	800258a <_malloc_r+0x42>
 80025fa:	46c0      	nop			; (mov r8, r8)
 80025fc:	200000f8 	.word	0x200000f8
 8002600:	200000fc 	.word	0x200000fc

08002604 <_sbrk_r>:
 8002604:	2300      	movs	r3, #0
 8002606:	b570      	push	{r4, r5, r6, lr}
 8002608:	4c06      	ldr	r4, [pc, #24]	; (8002624 <_sbrk_r+0x20>)
 800260a:	0005      	movs	r5, r0
 800260c:	0008      	movs	r0, r1
 800260e:	6023      	str	r3, [r4, #0]
 8002610:	f7fe fc0e 	bl	8000e30 <_sbrk>
 8002614:	1c43      	adds	r3, r0, #1
 8002616:	d103      	bne.n	8002620 <_sbrk_r+0x1c>
 8002618:	6823      	ldr	r3, [r4, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d000      	beq.n	8002620 <_sbrk_r+0x1c>
 800261e:	602b      	str	r3, [r5, #0]
 8002620:	bd70      	pop	{r4, r5, r6, pc}
 8002622:	46c0      	nop			; (mov r8, r8)
 8002624:	20000104 	.word	0x20000104

08002628 <_raise_r>:
 8002628:	b570      	push	{r4, r5, r6, lr}
 800262a:	0004      	movs	r4, r0
 800262c:	000d      	movs	r5, r1
 800262e:	291f      	cmp	r1, #31
 8002630:	d904      	bls.n	800263c <_raise_r+0x14>
 8002632:	2316      	movs	r3, #22
 8002634:	6003      	str	r3, [r0, #0]
 8002636:	2001      	movs	r0, #1
 8002638:	4240      	negs	r0, r0
 800263a:	bd70      	pop	{r4, r5, r6, pc}
 800263c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800263e:	2b00      	cmp	r3, #0
 8002640:	d004      	beq.n	800264c <_raise_r+0x24>
 8002642:	008a      	lsls	r2, r1, #2
 8002644:	189b      	adds	r3, r3, r2
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	2a00      	cmp	r2, #0
 800264a:	d108      	bne.n	800265e <_raise_r+0x36>
 800264c:	0020      	movs	r0, r4
 800264e:	f000 f831 	bl	80026b4 <_getpid_r>
 8002652:	002a      	movs	r2, r5
 8002654:	0001      	movs	r1, r0
 8002656:	0020      	movs	r0, r4
 8002658:	f000 f81a 	bl	8002690 <_kill_r>
 800265c:	e7ed      	b.n	800263a <_raise_r+0x12>
 800265e:	2000      	movs	r0, #0
 8002660:	2a01      	cmp	r2, #1
 8002662:	d0ea      	beq.n	800263a <_raise_r+0x12>
 8002664:	1c51      	adds	r1, r2, #1
 8002666:	d103      	bne.n	8002670 <_raise_r+0x48>
 8002668:	2316      	movs	r3, #22
 800266a:	3001      	adds	r0, #1
 800266c:	6023      	str	r3, [r4, #0]
 800266e:	e7e4      	b.n	800263a <_raise_r+0x12>
 8002670:	2400      	movs	r4, #0
 8002672:	0028      	movs	r0, r5
 8002674:	601c      	str	r4, [r3, #0]
 8002676:	4790      	blx	r2
 8002678:	0020      	movs	r0, r4
 800267a:	e7de      	b.n	800263a <_raise_r+0x12>

0800267c <raise>:
 800267c:	b510      	push	{r4, lr}
 800267e:	4b03      	ldr	r3, [pc, #12]	; (800268c <raise+0x10>)
 8002680:	0001      	movs	r1, r0
 8002682:	6818      	ldr	r0, [r3, #0]
 8002684:	f7ff ffd0 	bl	8002628 <_raise_r>
 8002688:	bd10      	pop	{r4, pc}
 800268a:	46c0      	nop			; (mov r8, r8)
 800268c:	2000000c 	.word	0x2000000c

08002690 <_kill_r>:
 8002690:	2300      	movs	r3, #0
 8002692:	b570      	push	{r4, r5, r6, lr}
 8002694:	4c06      	ldr	r4, [pc, #24]	; (80026b0 <_kill_r+0x20>)
 8002696:	0005      	movs	r5, r0
 8002698:	0008      	movs	r0, r1
 800269a:	0011      	movs	r1, r2
 800269c:	6023      	str	r3, [r4, #0]
 800269e:	f7fe fbaa 	bl	8000df6 <_kill>
 80026a2:	1c43      	adds	r3, r0, #1
 80026a4:	d103      	bne.n	80026ae <_kill_r+0x1e>
 80026a6:	6823      	ldr	r3, [r4, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d000      	beq.n	80026ae <_kill_r+0x1e>
 80026ac:	602b      	str	r3, [r5, #0]
 80026ae:	bd70      	pop	{r4, r5, r6, pc}
 80026b0:	20000104 	.word	0x20000104

080026b4 <_getpid_r>:
 80026b4:	b510      	push	{r4, lr}
 80026b6:	f7fe fb98 	bl	8000dea <_getpid>
 80026ba:	bd10      	pop	{r4, pc}

080026bc <__malloc_lock>:
 80026bc:	4770      	bx	lr

080026be <__malloc_unlock>:
 80026be:	4770      	bx	lr

080026c0 <_init>:
 80026c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026c2:	46c0      	nop			; (mov r8, r8)
 80026c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026c6:	bc08      	pop	{r3}
 80026c8:	469e      	mov	lr, r3
 80026ca:	4770      	bx	lr

080026cc <_fini>:
 80026cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026d2:	bc08      	pop	{r3}
 80026d4:	469e      	mov	lr, r3
 80026d6:	4770      	bx	lr
