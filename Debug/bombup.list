
bombup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d60  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08001e20  08001e20  00011e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ec0  08001ec0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08001ec0  08001ec0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ec0  08001ec0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ec0  08001ec0  00011ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ec4  08001ec4  00011ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08001ec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000070  08001f38  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08001f38  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000050e6  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b81  00000000  00000000  0002517e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000598  00000000  00000000  00026d00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000490  00000000  00000000  00027298  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000d431  00000000  00000000  00027728  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004c8d  00000000  00000000  00034b59  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0004212f  00000000  00000000  000397e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0007b915  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013e8  00000000  00000000  0007b990  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001e08 	.word	0x08001e08

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08001e08 	.word	0x08001e08

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <_ZN10ControllerC1Ev>:
 *      Author: youri
 */

#include "Controller.h"

Controller::Controller() {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	4a03      	ldr	r2, [pc, #12]	; (8000238 <_ZN10ControllerC1Ev+0x18>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	0018      	movs	r0, r3
 8000232:	46bd      	mov	sp, r7
 8000234:	b002      	add	sp, #8
 8000236:	bd80      	pop	{r7, pc}
 8000238:	08001e58 	.word	0x08001e58

0800023c <_ZN10ControllerD1Ev>:

Controller::~Controller() {
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	4a03      	ldr	r2, [pc, #12]	; (8000254 <_ZN10ControllerD1Ev+0x18>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	0018      	movs	r0, r3
 800024e:	46bd      	mov	sp, r7
 8000250:	b002      	add	sp, #8
 8000252:	bd80      	pop	{r7, pc}
 8000254:	08001e58 	.word	0x08001e58

08000258 <_ZN10ControllerD0Ev>:
Controller::~Controller() {
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
}
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	0018      	movs	r0, r3
 8000264:	f7ff ffea 	bl	800023c <_ZN10ControllerD1Ev>
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2108      	movs	r1, #8
 800026c:	0018      	movs	r0, r3
 800026e:	f001 fc57 	bl	8001b20 <_ZdlPvj>
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	0018      	movs	r0, r3
 8000276:	46bd      	mov	sp, r7
 8000278:	b002      	add	sp, #8
 800027a:	bd80      	pop	{r7, pc}

0800027c <_ZN10Controller16setButtonPressedE6Button>:

void Controller::setButtonPressed(Button btn)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
 8000284:	6039      	str	r1, [r7, #0]
	this->btn = btn;
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	683a      	ldr	r2, [r7, #0]
 800028a:	605a      	str	r2, [r3, #4]
}
 800028c:	46c0      	nop			; (mov r8, r8)
 800028e:	46bd      	mov	sp, r7
 8000290:	b002      	add	sp, #8
 8000292:	bd80      	pop	{r7, pc}

08000294 <_ZN10Controller16getButtonPressedEv>:

Button Controller::getButtonPressed()
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
	return this->btn;
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	685b      	ldr	r3, [r3, #4]
}
 80002a0:	0018      	movs	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	b002      	add	sp, #8
 80002a6:	bd80      	pop	{r7, pc}

080002a8 <_ZN6EntityC1Ev>:

#include "Entity.h"

//Values to add to the x and y coordinates

Entity::Entity() {
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	4a03      	ldr	r2, [pc, #12]	; (80002c0 <_ZN6EntityC1Ev+0x18>)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	0018      	movs	r0, r3
 80002ba:	46bd      	mov	sp, r7
 80002bc:	b002      	add	sp, #8
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	08001e68 	.word	0x08001e68

080002c4 <_ZN6EntityC1Eii>:

Entity::Entity(int x, int y) {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	60f8      	str	r0, [r7, #12]
 80002cc:	60b9      	str	r1, [r7, #8]
 80002ce:	607a      	str	r2, [r7, #4]
 80002d0:	4a06      	ldr	r2, [pc, #24]	; (80002ec <_ZN6EntityC1Eii+0x28>)
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	601a      	str	r2, [r3, #0]
	this->x = x;
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	68ba      	ldr	r2, [r7, #8]
 80002da:	605a      	str	r2, [r3, #4]
	this->y = y;
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	687a      	ldr	r2, [r7, #4]
 80002e0:	609a      	str	r2, [r3, #8]
}
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	0018      	movs	r0, r3
 80002e6:	46bd      	mov	sp, r7
 80002e8:	b004      	add	sp, #16
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	08001e68 	.word	0x08001e68

080002f0 <_ZN6EntityD1Ev>:

Entity::~Entity() {
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	4a03      	ldr	r2, [pc, #12]	; (8000308 <_ZN6EntityD1Ev+0x18>)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	0018      	movs	r0, r3
 8000302:	46bd      	mov	sp, r7
 8000304:	b002      	add	sp, #8
 8000306:	bd80      	pop	{r7, pc}
 8000308:	08001e68 	.word	0x08001e68

0800030c <_ZN6EntityD0Ev>:
Entity::~Entity() {
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
}
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	0018      	movs	r0, r3
 8000318:	f7ff ffea 	bl	80002f0 <_ZN6EntityD1Ev>
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	210c      	movs	r1, #12
 8000320:	0018      	movs	r0, r3
 8000322:	f001 fbfd 	bl	8001b20 <_ZdlPvj>
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	0018      	movs	r0, r3
 800032a:	46bd      	mov	sp, r7
 800032c:	b002      	add	sp, #8
 800032e:	bd80      	pop	{r7, pc}

08000330 <_ZN6Entity4moveE9Direction>:
{
	return this->y;
}

void Entity::move(Direction dir)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	6039      	str	r1, [r7, #0]
	switch(dir)
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	2b01      	cmp	r3, #1
 800033e:	d00d      	beq.n	800035c <_ZN6Entity4moveE9Direction+0x2c>
 8000340:	dc02      	bgt.n	8000348 <_ZN6Entity4moveE9Direction+0x18>
 8000342:	2b00      	cmp	r3, #0
 8000344:	d005      	beq.n	8000352 <_ZN6Entity4moveE9Direction+0x22>
		case Direction::Right:
			this->x += 1;
	}
	//this->x += dir[0];
	//this->y += dir[1];
}
 8000346:	e018      	b.n	800037a <_ZN6Entity4moveE9Direction+0x4a>
	switch(dir)
 8000348:	2b02      	cmp	r3, #2
 800034a:	d00c      	beq.n	8000366 <_ZN6Entity4moveE9Direction+0x36>
 800034c:	2b03      	cmp	r3, #3
 800034e:	d00f      	beq.n	8000370 <_ZN6Entity4moveE9Direction+0x40>
}
 8000350:	e013      	b.n	800037a <_ZN6Entity4moveE9Direction+0x4a>
			this->y -= 1;
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	689b      	ldr	r3, [r3, #8]
 8000356:	1e5a      	subs	r2, r3, #1
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	609a      	str	r2, [r3, #8]
			this->y += 1;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	689b      	ldr	r3, [r3, #8]
 8000360:	1c5a      	adds	r2, r3, #1
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	609a      	str	r2, [r3, #8]
			this->x -= 1;
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	685b      	ldr	r3, [r3, #4]
 800036a:	1e5a      	subs	r2, r3, #1
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	605a      	str	r2, [r3, #4]
			this->x += 1;
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	685b      	ldr	r3, [r3, #4]
 8000374:	1c5a      	adds	r2, r3, #1
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	605a      	str	r2, [r3, #4]
}
 800037a:	46c0      	nop			; (mov r8, r8)
 800037c:	46bd      	mov	sp, r7
 800037e:	b002      	add	sp, #8
 8000380:	bd80      	pop	{r7, pc}
	...

08000384 <_ZN4GameC1Ev>:

#define WIDTH 8
#define HEIGHT 8
#define PLAYER_COUNT 1

Game::Game() {
 8000384:	b590      	push	{r4, r7, lr}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	4a0a      	ldr	r2, [pc, #40]	; (80003b8 <_ZN4GameC1Ev+0x34>)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	this->lvl = new Level(WIDTH, HEIGHT, PLAYER_COUNT);
 8000392:	4b0a      	ldr	r3, [pc, #40]	; (80003bc <_ZN4GameC1Ev+0x38>)
 8000394:	0018      	movs	r0, r3
 8000396:	f001 fbc7 	bl	8001b28 <_Znwj>
 800039a:	0003      	movs	r3, r0
 800039c:	001c      	movs	r4, r3
 800039e:	2301      	movs	r3, #1
 80003a0:	2208      	movs	r2, #8
 80003a2:	2108      	movs	r1, #8
 80003a4:	0020      	movs	r0, r4
 80003a6:	f000 f855 	bl	8000454 <_ZN5LevelC1Eiii>
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	60dc      	str	r4, [r3, #12]
}
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	0018      	movs	r0, r3
 80003b2:	46bd      	mov	sp, r7
 80003b4:	b003      	add	sp, #12
 80003b6:	bd90      	pop	{r4, r7, pc}
 80003b8:	08001e78 	.word	0x08001e78
 80003bc:	00000644 	.word	0x00000644

080003c0 <_ZN4GameD1Ev>:

Game::~Game() {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
 80003c8:	4a03      	ldr	r2, [pc, #12]	; (80003d8 <_ZN4GameD1Ev+0x18>)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	0018      	movs	r0, r3
 80003d2:	46bd      	mov	sp, r7
 80003d4:	b002      	add	sp, #8
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	08001e78 	.word	0x08001e78

080003dc <_ZN4GameD0Ev>:
Game::~Game() {
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
}
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	0018      	movs	r0, r3
 80003e8:	f7ff ffea 	bl	80003c0 <_ZN4GameD1Ev>
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	2110      	movs	r1, #16
 80003f0:	0018      	movs	r0, r3
 80003f2:	f001 fb95 	bl	8001b20 <_ZdlPvj>
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	0018      	movs	r0, r3
 80003fa:	46bd      	mov	sp, r7
 80003fc:	b002      	add	sp, #8
 80003fe:	bd80      	pop	{r7, pc}

08000400 <_ZN4Game6updateEv>:

void Game::update()
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
	this->lvl->update(this->controller1, this->controller2);
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	68d8      	ldr	r0, [r3, #12]
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	6859      	ldr	r1, [r3, #4]
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	689b      	ldr	r3, [r3, #8]
 8000414:	001a      	movs	r2, r3
 8000416:	f000 f8cb 	bl	80005b0 <_ZN5Level6updateEP10ControllerS1_>
		this->lvl->update(this->controller1, this->controller2);
		//if fpga ready pin = HIGH then
		//lvl.draw();
	}*/

}
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	46bd      	mov	sp, r7
 800041e:	b002      	add	sp, #8
 8000420:	bd80      	pop	{r7, pc}

08000422 <_ZN4Game14setController1EP10Controller>:

void Game::setController1(Controller *controller)
{
 8000422:	b580      	push	{r7, lr}
 8000424:	b082      	sub	sp, #8
 8000426:	af00      	add	r7, sp, #0
 8000428:	6078      	str	r0, [r7, #4]
 800042a:	6039      	str	r1, [r7, #0]
	this->controller1 = controller;
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	683a      	ldr	r2, [r7, #0]
 8000430:	605a      	str	r2, [r3, #4]
}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	46bd      	mov	sp, r7
 8000436:	b002      	add	sp, #8
 8000438:	bd80      	pop	{r7, pc}

0800043a <_ZN4Game14setController2EP10Controller>:

void Game::setController2(Controller *controller)
{
 800043a:	b580      	push	{r7, lr}
 800043c:	b082      	sub	sp, #8
 800043e:	af00      	add	r7, sp, #0
 8000440:	6078      	str	r0, [r7, #4]
 8000442:	6039      	str	r1, [r7, #0]
	this->controller2 = controller;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	683a      	ldr	r2, [r7, #0]
 8000448:	609a      	str	r2, [r3, #8]
}
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	46bd      	mov	sp, r7
 800044e:	b002      	add	sp, #8
 8000450:	bd80      	pop	{r7, pc}
	...

08000454 <_ZN5LevelC1Eiii>:
 */

#include "Level.h"
#include "Player.h"

Level::Level(int width, int height, int player_count)
 8000454:	b5b0      	push	{r4, r5, r7, lr}
 8000456:	b084      	sub	sp, #16
 8000458:	af00      	add	r7, sp, #0
 800045a:	60f8      	str	r0, [r7, #12]
 800045c:	60b9      	str	r1, [r7, #8]
 800045e:	607a      	str	r2, [r7, #4]
 8000460:	603b      	str	r3, [r7, #0]
 8000462:	4a24      	ldr	r2, [pc, #144]	; (80004f4 <_ZN5LevelC1Eiii+0xa0>)
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	601a      	str	r2, [r3, #0]
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	3304      	adds	r3, #4
 800046c:	2462      	movs	r4, #98	; 0x62
 800046e:	001d      	movs	r5, r3
 8000470:	2c00      	cmp	r4, #0
 8000472:	db05      	blt.n	8000480 <_ZN5LevelC1Eiii+0x2c>
 8000474:	0028      	movs	r0, r5
 8000476:	f7ff ff17 	bl	80002a8 <_ZN6EntityC1Ev>
 800047a:	350c      	adds	r5, #12
 800047c:	3c01      	subs	r4, #1
 800047e:	e7f7      	b.n	8000470 <_ZN5LevelC1Eiii+0x1c>
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	2295      	movs	r2, #149	; 0x95
 8000484:	00d2      	lsls	r2, r2, #3
 8000486:	4694      	mov	ip, r2
 8000488:	4463      	add	r3, ip
 800048a:	2462      	movs	r4, #98	; 0x62
 800048c:	001d      	movs	r5, r3
 800048e:	2c00      	cmp	r4, #0
 8000490:	db05      	blt.n	800049e <_ZN5LevelC1Eiii+0x4a>
 8000492:	0028      	movs	r0, r5
 8000494:	f000 f918 	bl	80006c8 <_ZN6ObjectC1Ev>
 8000498:	3504      	adds	r5, #4
 800049a:	3c01      	subs	r4, #1
 800049c:	e7f7      	b.n	800048e <_ZN5LevelC1Eiii+0x3a>
{
	this->entityCount = 0;
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	4a15      	ldr	r2, [pc, #84]	; (80004f8 <_ZN5LevelC1Eiii+0xa4>)
 80004a2:	2100      	movs	r1, #0
 80004a4:	5099      	str	r1, [r3, r2]
	this->staticObjectCount = 0;
 80004a6:	68fa      	ldr	r2, [r7, #12]
 80004a8:	23c7      	movs	r3, #199	; 0xc7
 80004aa:	00db      	lsls	r3, r3, #3
 80004ac:	2100      	movs	r1, #0
 80004ae:	50d1      	str	r1, [r2, r3]

	this->player1 = new Player("player1", 0, 0);
 80004b0:	2010      	movs	r0, #16
 80004b2:	f001 fb39 	bl	8001b28 <_Znwj>
 80004b6:	0003      	movs	r3, r0
 80004b8:	001c      	movs	r4, r3
 80004ba:	4910      	ldr	r1, [pc, #64]	; (80004fc <_ZN5LevelC1Eiii+0xa8>)
 80004bc:	2300      	movs	r3, #0
 80004be:	2200      	movs	r2, #0
 80004c0:	0020      	movs	r0, r4
 80004c2:	f000 f92f 	bl	8000724 <_ZN6PlayerC1EPcii>
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	4a0d      	ldr	r2, [pc, #52]	; (8000500 <_ZN5LevelC1Eiii+0xac>)
 80004ca:	509c      	str	r4, [r3, r2]
	//this->player1->move();
	this->player2 = new Player("player2", 0 ,0);
 80004cc:	2010      	movs	r0, #16
 80004ce:	f001 fb2b 	bl	8001b28 <_Znwj>
 80004d2:	0003      	movs	r3, r0
 80004d4:	001c      	movs	r4, r3
 80004d6:	490b      	ldr	r1, [pc, #44]	; (8000504 <_ZN5LevelC1Eiii+0xb0>)
 80004d8:	2300      	movs	r3, #0
 80004da:	2200      	movs	r2, #0
 80004dc:	0020      	movs	r0, r4
 80004de:	f000 f921 	bl	8000724 <_ZN6PlayerC1EPcii>
 80004e2:	68fa      	ldr	r2, [r7, #12]
 80004e4:	23c8      	movs	r3, #200	; 0xc8
 80004e6:	00db      	lsls	r3, r3, #3
 80004e8:	50d4      	str	r4, [r2, r3]
	//this->player2->move(0,0);


}
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	0018      	movs	r0, r3
 80004ee:	46bd      	mov	sp, r7
 80004f0:	b004      	add	sp, #16
 80004f2:	bdb0      	pop	{r4, r5, r7, pc}
 80004f4:	08001e88 	.word	0x08001e88
 80004f8:	00000634 	.word	0x00000634
 80004fc:	08001e20 	.word	0x08001e20
 8000500:	0000063c 	.word	0x0000063c
 8000504:	08001e28 	.word	0x08001e28

08000508 <_ZN5LevelD1Ev>:

Level::~Level()
 8000508:	b590      	push	{r4, r7, lr}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	4a1a      	ldr	r2, [pc, #104]	; (800057c <_ZN5LevelD1Ev+0x74>)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2295      	movs	r2, #149	; 0x95
 800051a:	00d2      	lsls	r2, r2, #3
 800051c:	4694      	mov	ip, r2
 800051e:	4463      	add	r3, ip
 8000520:	2b00      	cmp	r3, #0
 8000522:	d014      	beq.n	800054e <_ZN5LevelD1Ev+0x46>
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2295      	movs	r2, #149	; 0x95
 8000528:	00d2      	lsls	r2, r2, #3
 800052a:	4694      	mov	ip, r2
 800052c:	4463      	add	r3, ip
 800052e:	338d      	adds	r3, #141	; 0x8d
 8000530:	33ff      	adds	r3, #255	; 0xff
 8000532:	001c      	movs	r4, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2295      	movs	r2, #149	; 0x95
 8000538:	00d2      	lsls	r2, r2, #3
 800053a:	4694      	mov	ip, r2
 800053c:	4463      	add	r3, ip
 800053e:	429c      	cmp	r4, r3
 8000540:	d005      	beq.n	800054e <_ZN5LevelD1Ev+0x46>
 8000542:	3c04      	subs	r4, #4
 8000544:	6823      	ldr	r3, [r4, #0]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	0020      	movs	r0, r4
 800054a:	4798      	blx	r3
 800054c:	e7f2      	b.n	8000534 <_ZN5LevelD1Ev+0x2c>
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	3304      	adds	r3, #4
 8000552:	2b00      	cmp	r3, #0
 8000554:	d00d      	beq.n	8000572 <_ZN5LevelD1Ev+0x6a>
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	3304      	adds	r3, #4
 800055a:	4a09      	ldr	r2, [pc, #36]	; (8000580 <_ZN5LevelD1Ev+0x78>)
 800055c:	189c      	adds	r4, r3, r2
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	3304      	adds	r3, #4
 8000562:	429c      	cmp	r4, r3
 8000564:	d005      	beq.n	8000572 <_ZN5LevelD1Ev+0x6a>
 8000566:	3c0c      	subs	r4, #12
 8000568:	6823      	ldr	r3, [r4, #0]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	0020      	movs	r0, r4
 800056e:	4798      	blx	r3
 8000570:	e7f5      	b.n	800055e <_ZN5LevelD1Ev+0x56>
{
	// TODO Auto-generated destructor stub
}
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	0018      	movs	r0, r3
 8000576:	46bd      	mov	sp, r7
 8000578:	b003      	add	sp, #12
 800057a:	bd90      	pop	{r4, r7, pc}
 800057c:	08001e88 	.word	0x08001e88
 8000580:	000004a4 	.word	0x000004a4

08000584 <_ZN5LevelD0Ev>:
Level::~Level()
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
}
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	0018      	movs	r0, r3
 8000590:	f7ff ffba 	bl	8000508 <_ZN5LevelD1Ev>
 8000594:	4a05      	ldr	r2, [pc, #20]	; (80005ac <_ZN5LevelD0Ev+0x28>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	0011      	movs	r1, r2
 800059a:	0018      	movs	r0, r3
 800059c:	f001 fac0 	bl	8001b20 <_ZdlPvj>
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	0018      	movs	r0, r3
 80005a4:	46bd      	mov	sp, r7
 80005a6:	b002      	add	sp, #8
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	00000644 	.word	0x00000644

080005b0 <_ZN5Level6updateEP10ControllerS1_>:

void Level::update(Controller *controller1, Controller *controller2)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
	switch(controller1->getButtonPressed())
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	0018      	movs	r0, r3
 80005c0:	f7ff fe68 	bl	8000294 <_ZN10Controller16getButtonPressedEv>
 80005c4:	0003      	movs	r3, r0
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d010      	beq.n	80005ec <_ZN5Level6updateEP10ControllerS1_+0x3c>
 80005ca:	dc02      	bgt.n	80005d2 <_ZN5Level6updateEP10ControllerS1_+0x22>
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d005      	beq.n	80005dc <_ZN5Level6updateEP10ControllerS1_+0x2c>
 80005d0:	e024      	b.n	800061c <_ZN5Level6updateEP10ControllerS1_+0x6c>
 80005d2:	2b02      	cmp	r3, #2
 80005d4:	d012      	beq.n	80005fc <_ZN5Level6updateEP10ControllerS1_+0x4c>
 80005d6:	2b03      	cmp	r3, #3
 80005d8:	d018      	beq.n	800060c <_ZN5Level6updateEP10ControllerS1_+0x5c>
 80005da:	e01f      	b.n	800061c <_ZN5Level6updateEP10ControllerS1_+0x6c>
	{
		case Button::Up:
			this->player1->move(Direction::Up);
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	4a38      	ldr	r2, [pc, #224]	; (80006c0 <_ZN5Level6updateEP10ControllerS1_+0x110>)
 80005e0:	589b      	ldr	r3, [r3, r2]
 80005e2:	2100      	movs	r1, #0
 80005e4:	0018      	movs	r0, r3
 80005e6:	f7ff fea3 	bl	8000330 <_ZN6Entity4moveE9Direction>
		break;
 80005ea:	e017      	b.n	800061c <_ZN5Level6updateEP10ControllerS1_+0x6c>
		case Button::Down:
			this->player1->move(Direction::Down);
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	4a34      	ldr	r2, [pc, #208]	; (80006c0 <_ZN5Level6updateEP10ControllerS1_+0x110>)
 80005f0:	589b      	ldr	r3, [r3, r2]
 80005f2:	2101      	movs	r1, #1
 80005f4:	0018      	movs	r0, r3
 80005f6:	f7ff fe9b 	bl	8000330 <_ZN6Entity4moveE9Direction>
		break;
 80005fa:	e00f      	b.n	800061c <_ZN5Level6updateEP10ControllerS1_+0x6c>
		case Button::Left:
			this->player1->move(Direction::Left);
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	4a30      	ldr	r2, [pc, #192]	; (80006c0 <_ZN5Level6updateEP10ControllerS1_+0x110>)
 8000600:	589b      	ldr	r3, [r3, r2]
 8000602:	2102      	movs	r1, #2
 8000604:	0018      	movs	r0, r3
 8000606:	f7ff fe93 	bl	8000330 <_ZN6Entity4moveE9Direction>
		break;
 800060a:	e007      	b.n	800061c <_ZN5Level6updateEP10ControllerS1_+0x6c>
		case Button::Right:
			this->player1->move(Direction::Right);
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	4a2c      	ldr	r2, [pc, #176]	; (80006c0 <_ZN5Level6updateEP10ControllerS1_+0x110>)
 8000610:	589b      	ldr	r3, [r3, r2]
 8000612:	2103      	movs	r1, #3
 8000614:	0018      	movs	r0, r3
 8000616:	f7ff fe8b 	bl	8000330 <_ZN6Entity4moveE9Direction>
		break;
 800061a:	46c0      	nop			; (mov r8, r8)
	}

	switch(controller1->getButtonPressed())
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	0018      	movs	r0, r3
 8000620:	f7ff fe38 	bl	8000294 <_ZN10Controller16getButtonPressedEv>
 8000624:	0003      	movs	r3, r0
 8000626:	2b01      	cmp	r3, #1
 8000628:	d011      	beq.n	800064e <_ZN5Level6updateEP10ControllerS1_+0x9e>
 800062a:	dc02      	bgt.n	8000632 <_ZN5Level6updateEP10ControllerS1_+0x82>
 800062c:	2b00      	cmp	r3, #0
 800062e:	d005      	beq.n	800063c <_ZN5Level6updateEP10ControllerS1_+0x8c>
 8000630:	e028      	b.n	8000684 <_ZN5Level6updateEP10ControllerS1_+0xd4>
 8000632:	2b02      	cmp	r3, #2
 8000634:	d014      	beq.n	8000660 <_ZN5Level6updateEP10ControllerS1_+0xb0>
 8000636:	2b03      	cmp	r3, #3
 8000638:	d01b      	beq.n	8000672 <_ZN5Level6updateEP10ControllerS1_+0xc2>
 800063a:	e023      	b.n	8000684 <_ZN5Level6updateEP10ControllerS1_+0xd4>
		{
			case Button::Up:
				this->player2->move(Direction::Up);
 800063c:	68fa      	ldr	r2, [r7, #12]
 800063e:	23c8      	movs	r3, #200	; 0xc8
 8000640:	00db      	lsls	r3, r3, #3
 8000642:	58d3      	ldr	r3, [r2, r3]
 8000644:	2100      	movs	r1, #0
 8000646:	0018      	movs	r0, r3
 8000648:	f7ff fe72 	bl	8000330 <_ZN6Entity4moveE9Direction>
			break;
 800064c:	e01a      	b.n	8000684 <_ZN5Level6updateEP10ControllerS1_+0xd4>
			case Button::Down:
				this->player2->move(Direction::Down);
 800064e:	68fa      	ldr	r2, [r7, #12]
 8000650:	23c8      	movs	r3, #200	; 0xc8
 8000652:	00db      	lsls	r3, r3, #3
 8000654:	58d3      	ldr	r3, [r2, r3]
 8000656:	2101      	movs	r1, #1
 8000658:	0018      	movs	r0, r3
 800065a:	f7ff fe69 	bl	8000330 <_ZN6Entity4moveE9Direction>
			break;
 800065e:	e011      	b.n	8000684 <_ZN5Level6updateEP10ControllerS1_+0xd4>
			case Button::Left:
				this->player2->move(Direction::Left);
 8000660:	68fa      	ldr	r2, [r7, #12]
 8000662:	23c8      	movs	r3, #200	; 0xc8
 8000664:	00db      	lsls	r3, r3, #3
 8000666:	58d3      	ldr	r3, [r2, r3]
 8000668:	2102      	movs	r1, #2
 800066a:	0018      	movs	r0, r3
 800066c:	f7ff fe60 	bl	8000330 <_ZN6Entity4moveE9Direction>
			break;
 8000670:	e008      	b.n	8000684 <_ZN5Level6updateEP10ControllerS1_+0xd4>
			case Button::Right:
				this->player2->move(Direction::Right);
 8000672:	68fa      	ldr	r2, [r7, #12]
 8000674:	23c8      	movs	r3, #200	; 0xc8
 8000676:	00db      	lsls	r3, r3, #3
 8000678:	58d3      	ldr	r3, [r2, r3]
 800067a:	2103      	movs	r1, #3
 800067c:	0018      	movs	r0, r3
 800067e:	f7ff fe57 	bl	8000330 <_ZN6Entity4moveE9Direction>
			break;
 8000682:	46c0      	nop			; (mov r8, r8)
		}

	for(int i = 0; i < this->entityCount; i++)
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	4a0e      	ldr	r2, [pc, #56]	; (80006c4 <_ZN5Level6updateEP10ControllerS1_+0x114>)
 800068c:	589b      	ldr	r3, [r3, r2]
 800068e:	697a      	ldr	r2, [r7, #20]
 8000690:	429a      	cmp	r2, r3
 8000692:	da03      	bge.n	800069c <_ZN5Level6updateEP10ControllerS1_+0xec>
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	3301      	adds	r3, #1
 8000698:	617b      	str	r3, [r7, #20]
 800069a:	e7f5      	b.n	8000688 <_ZN5Level6updateEP10ControllerS1_+0xd8>
	{

	}

	for(int i = 0; i < this->staticObjectCount; i++)
 800069c:	2300      	movs	r3, #0
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	68fa      	ldr	r2, [r7, #12]
 80006a2:	23c7      	movs	r3, #199	; 0xc7
 80006a4:	00db      	lsls	r3, r3, #3
 80006a6:	58d3      	ldr	r3, [r2, r3]
 80006a8:	693a      	ldr	r2, [r7, #16]
 80006aa:	429a      	cmp	r2, r3
 80006ac:	da03      	bge.n	80006b6 <_ZN5Level6updateEP10ControllerS1_+0x106>
 80006ae:	693b      	ldr	r3, [r7, #16]
 80006b0:	3301      	adds	r3, #1
 80006b2:	613b      	str	r3, [r7, #16]
 80006b4:	e7f4      	b.n	80006a0 <_ZN5Level6updateEP10ControllerS1_+0xf0>
	{

	}
}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	46bd      	mov	sp, r7
 80006ba:	b006      	add	sp, #24
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	0000063c 	.word	0x0000063c
 80006c4:	00000634 	.word	0x00000634

080006c8 <_ZN6ObjectC1Ev>:
 *      Author: youri
 */

#include "Object.h"

Object::Object() {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	4a03      	ldr	r2, [pc, #12]	; (80006e0 <_ZN6ObjectC1Ev+0x18>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	0018      	movs	r0, r3
 80006da:	46bd      	mov	sp, r7
 80006dc:	b002      	add	sp, #8
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	08001e98 	.word	0x08001e98

080006e4 <_ZN6ObjectD1Ev>:

Object::~Object() {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	4a03      	ldr	r2, [pc, #12]	; (80006fc <_ZN6ObjectD1Ev+0x18>)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	0018      	movs	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	b002      	add	sp, #8
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	08001e98 	.word	0x08001e98

08000700 <_ZN6ObjectD0Ev>:
Object::~Object() {
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
}
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	0018      	movs	r0, r3
 800070c:	f7ff ffea 	bl	80006e4 <_ZN6ObjectD1Ev>
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2104      	movs	r1, #4
 8000714:	0018      	movs	r0, r3
 8000716:	f001 fa03 	bl	8001b20 <_ZdlPvj>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	0018      	movs	r0, r3
 800071e:	46bd      	mov	sp, r7
 8000720:	b002      	add	sp, #8
 8000722:	bd80      	pop	{r7, pc}

08000724 <_ZN6PlayerC1EPcii>:
 *      Author: youri
 */

#include "Player.h"

Player::Player(char *name, int x, int y)
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
 8000730:	603b      	str	r3, [r7, #0]
: Entity(x,y) {
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	683a      	ldr	r2, [r7, #0]
 8000736:	6879      	ldr	r1, [r7, #4]
 8000738:	0018      	movs	r0, r3
 800073a:	f7ff fdc3 	bl	80002c4 <_ZN6EntityC1Eii>
 800073e:	4a05      	ldr	r2, [pc, #20]	; (8000754 <_ZN6PlayerC1EPcii+0x30>)
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	this->name = name;
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	68ba      	ldr	r2, [r7, #8]
 8000748:	60da      	str	r2, [r3, #12]
}
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	0018      	movs	r0, r3
 800074e:	46bd      	mov	sp, r7
 8000750:	b004      	add	sp, #16
 8000752:	bd80      	pop	{r7, pc}
 8000754:	08001ea8 	.word	0x08001ea8

08000758 <_ZN6PlayerD1Ev>:

Player::~Player() {
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	4a05      	ldr	r2, [pc, #20]	; (8000778 <_ZN6PlayerD1Ev+0x20>)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	0018      	movs	r0, r3
 800076a:	f7ff fdc1 	bl	80002f0 <_ZN6EntityD1Ev>
	// TODO Auto-generated destructor stub
}
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	0018      	movs	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	b002      	add	sp, #8
 8000776:	bd80      	pop	{r7, pc}
 8000778:	08001ea8 	.word	0x08001ea8

0800077c <_ZN6PlayerD0Ev>:
Player::~Player() {
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
}
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	0018      	movs	r0, r3
 8000788:	f7ff ffe6 	bl	8000758 <_ZN6PlayerD1Ev>
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2110      	movs	r1, #16
 8000790:	0018      	movs	r0, r3
 8000792:	f001 f9c5 	bl	8001b20 <_ZdlPvj>
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	0018      	movs	r0, r3
 800079a:	46bd      	mov	sp, r7
 800079c:	b002      	add	sp, #8
 800079e:	bd80      	pop	{r7, pc}

080007a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a0:	b5b0      	push	{r4, r5, r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a6:	f000 fa89 	bl	8000cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007aa:	f000 f8f3 	bl	8000994 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ae:	f000 f939 	bl	8000a24 <_ZL12MX_GPIO_Initv>





  Controller controller1 = Controller();
 80007b2:	250c      	movs	r5, #12
 80007b4:	197b      	adds	r3, r7, r5
 80007b6:	0018      	movs	r0, r3
 80007b8:	f7ff fd32 	bl	8000220 <_ZN10ControllerC1Ev>
  Controller controller2 = Controller();
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	0018      	movs	r0, r3
 80007c0:	f7ff fd2e 	bl	8000220 <_ZN10ControllerC1Ev>

  controller1.setButtonPressed(Button::Down);
 80007c4:	197b      	adds	r3, r7, r5
 80007c6:	2101      	movs	r1, #1
 80007c8:	0018      	movs	r0, r3
 80007ca:	f7ff fd57 	bl	800027c <_ZN10Controller16setButtonPressedE6Button>
  Game *game = new Game();
 80007ce:	2010      	movs	r0, #16
 80007d0:	f001 f9aa 	bl	8001b28 <_Znwj>
 80007d4:	0003      	movs	r3, r0
 80007d6:	001c      	movs	r4, r3
 80007d8:	0020      	movs	r0, r4
 80007da:	f7ff fdd3 	bl	8000384 <_ZN4GameC1Ev>
 80007de:	617c      	str	r4, [r7, #20]
  game->setController1(&controller1);
 80007e0:	197a      	adds	r2, r7, r5
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	0011      	movs	r1, r2
 80007e6:	0018      	movs	r0, r3
 80007e8:	f7ff fe1b 	bl	8000422 <_ZN4Game14setController1EP10Controller>
  game->setController2(&controller2);
 80007ec:	1d3a      	adds	r2, r7, #4
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	0011      	movs	r1, r2
 80007f2:	0018      	movs	r0, r3
 80007f4:	f7ff fe21 	bl	800043a <_ZN4Game14setController2EP10Controller>
  //game->play();

  controller1.setButtonPressed(Button::Up);
 80007f8:	197b      	adds	r3, r7, r5
 80007fa:	2100      	movs	r1, #0
 80007fc:	0018      	movs	r0, r3
 80007fe:	f7ff fd3d 	bl	800027c <_ZN10Controller16setButtonPressedE6Button>

  game->update();
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	0018      	movs	r0, r3
 8000806:	f7ff fdfb 	bl	8000400 <_ZN4Game6updateEv>
  //Button btn = game->get

  while (1)
  {
    /* USER CODE END WHILE */
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_SET)
 800080a:	2390      	movs	r3, #144	; 0x90
 800080c:	05db      	lsls	r3, r3, #23
 800080e:	2180      	movs	r1, #128	; 0x80
 8000810:	0018      	movs	r0, r3
 8000812:	f000 fcfd 	bl	8001210 <HAL_GPIO_ReadPin>
 8000816:	0003      	movs	r3, r0
 8000818:	3b01      	subs	r3, #1
 800081a:	425a      	negs	r2, r3
 800081c:	4153      	adcs	r3, r2
 800081e:	b2db      	uxtb	r3, r3
 8000820:	2b00      	cmp	r3, #0
 8000822:	d01e      	beq.n	8000862 <main+0xc2>
	  {
		  while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_SET);
 8000824:	2390      	movs	r3, #144	; 0x90
 8000826:	05db      	lsls	r3, r3, #23
 8000828:	2180      	movs	r1, #128	; 0x80
 800082a:	0018      	movs	r0, r3
 800082c:	f000 fcf0 	bl	8001210 <HAL_GPIO_ReadPin>
 8000830:	0003      	movs	r3, r0
 8000832:	3b01      	subs	r3, #1
 8000834:	425a      	negs	r2, r3
 8000836:	4153      	adcs	r3, r2
 8000838:	b2db      	uxtb	r3, r3
 800083a:	2b00      	cmp	r3, #0
 800083c:	d000      	beq.n	8000840 <main+0xa0>
 800083e:	e7f1      	b.n	8000824 <main+0x84>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000840:	2390      	movs	r3, #144	; 0x90
 8000842:	05db      	lsls	r3, r3, #23
 8000844:	2201      	movs	r2, #1
 8000846:	2120      	movs	r1, #32
 8000848:	0018      	movs	r0, r3
 800084a:	f000 fcfe 	bl	800124a <HAL_GPIO_WritePin>
		  HAL_Delay(5);
 800084e:	2005      	movs	r0, #5
 8000850:	f000 fa98 	bl	8000d84 <HAL_Delay>
		  controller1.setButtonPressed(Button::Up);
 8000854:	230c      	movs	r3, #12
 8000856:	18fb      	adds	r3, r7, r3
 8000858:	2100      	movs	r1, #0
 800085a:	0018      	movs	r0, r3
 800085c:	f7ff fd0e 	bl	800027c <_ZN10Controller16setButtonPressedE6Button>
 8000860:	e090      	b.n	8000984 <main+0x1e4>
		  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	  }
	  else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_SET)
 8000862:	2380      	movs	r3, #128	; 0x80
 8000864:	005a      	lsls	r2, r3, #1
 8000866:	2390      	movs	r3, #144	; 0x90
 8000868:	05db      	lsls	r3, r3, #23
 800086a:	0011      	movs	r1, r2
 800086c:	0018      	movs	r0, r3
 800086e:	f000 fccf 	bl	8001210 <HAL_GPIO_ReadPin>
 8000872:	0003      	movs	r3, r0
 8000874:	3b01      	subs	r3, #1
 8000876:	425a      	negs	r2, r3
 8000878:	4153      	adcs	r3, r2
 800087a:	b2db      	uxtb	r3, r3
 800087c:	2b00      	cmp	r3, #0
 800087e:	d020      	beq.n	80008c2 <main+0x122>
	  {
		  while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_SET);
 8000880:	2380      	movs	r3, #128	; 0x80
 8000882:	005a      	lsls	r2, r3, #1
 8000884:	2390      	movs	r3, #144	; 0x90
 8000886:	05db      	lsls	r3, r3, #23
 8000888:	0011      	movs	r1, r2
 800088a:	0018      	movs	r0, r3
 800088c:	f000 fcc0 	bl	8001210 <HAL_GPIO_ReadPin>
 8000890:	0003      	movs	r3, r0
 8000892:	3b01      	subs	r3, #1
 8000894:	425a      	negs	r2, r3
 8000896:	4153      	adcs	r3, r2
 8000898:	b2db      	uxtb	r3, r3
 800089a:	2b00      	cmp	r3, #0
 800089c:	d000      	beq.n	80008a0 <main+0x100>
 800089e:	e7ef      	b.n	8000880 <main+0xe0>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80008a0:	2390      	movs	r3, #144	; 0x90
 80008a2:	05db      	lsls	r3, r3, #23
 80008a4:	2201      	movs	r2, #1
 80008a6:	2120      	movs	r1, #32
 80008a8:	0018      	movs	r0, r3
 80008aa:	f000 fcce 	bl	800124a <HAL_GPIO_WritePin>
		  HAL_Delay(5);
 80008ae:	2005      	movs	r0, #5
 80008b0:	f000 fa68 	bl	8000d84 <HAL_Delay>
		  controller1.setButtonPressed(Button::Left);
 80008b4:	230c      	movs	r3, #12
 80008b6:	18fb      	adds	r3, r7, r3
 80008b8:	2102      	movs	r1, #2
 80008ba:	0018      	movs	r0, r3
 80008bc:	f7ff fcde 	bl	800027c <_ZN10Controller16setButtonPressedE6Button>
 80008c0:	e060      	b.n	8000984 <main+0x1e4>
		  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	  }
	  else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_SET)
 80008c2:	4b33      	ldr	r3, [pc, #204]	; (8000990 <main+0x1f0>)
 80008c4:	2108      	movs	r1, #8
 80008c6:	0018      	movs	r0, r3
 80008c8:	f000 fca2 	bl	8001210 <HAL_GPIO_ReadPin>
 80008cc:	0003      	movs	r3, r0
 80008ce:	3b01      	subs	r3, #1
 80008d0:	425a      	negs	r2, r3
 80008d2:	4153      	adcs	r3, r2
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d01d      	beq.n	8000916 <main+0x176>
	  {
		  while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_SET);
 80008da:	4b2d      	ldr	r3, [pc, #180]	; (8000990 <main+0x1f0>)
 80008dc:	2108      	movs	r1, #8
 80008de:	0018      	movs	r0, r3
 80008e0:	f000 fc96 	bl	8001210 <HAL_GPIO_ReadPin>
 80008e4:	0003      	movs	r3, r0
 80008e6:	3b01      	subs	r3, #1
 80008e8:	425a      	negs	r2, r3
 80008ea:	4153      	adcs	r3, r2
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d000      	beq.n	80008f4 <main+0x154>
 80008f2:	e7f2      	b.n	80008da <main+0x13a>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80008f4:	2390      	movs	r3, #144	; 0x90
 80008f6:	05db      	lsls	r3, r3, #23
 80008f8:	2201      	movs	r2, #1
 80008fa:	2120      	movs	r1, #32
 80008fc:	0018      	movs	r0, r3
 80008fe:	f000 fca4 	bl	800124a <HAL_GPIO_WritePin>
		  HAL_Delay(5);
 8000902:	2005      	movs	r0, #5
 8000904:	f000 fa3e 	bl	8000d84 <HAL_Delay>
		  controller1.setButtonPressed(Button::Right);
 8000908:	230c      	movs	r3, #12
 800090a:	18fb      	adds	r3, r7, r3
 800090c:	2103      	movs	r1, #3
 800090e:	0018      	movs	r0, r3
 8000910:	f7ff fcb4 	bl	800027c <_ZN10Controller16setButtonPressedE6Button>
 8000914:	e036      	b.n	8000984 <main+0x1e4>
		  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	  }
	  else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET)
 8000916:	4b1e      	ldr	r3, [pc, #120]	; (8000990 <main+0x1f0>)
 8000918:	2140      	movs	r1, #64	; 0x40
 800091a:	0018      	movs	r0, r3
 800091c:	f000 fc78 	bl	8001210 <HAL_GPIO_ReadPin>
 8000920:	0003      	movs	r3, r0
 8000922:	3b01      	subs	r3, #1
 8000924:	425a      	negs	r2, r3
 8000926:	4153      	adcs	r3, r2
 8000928:	b2db      	uxtb	r3, r3
 800092a:	2b00      	cmp	r3, #0
 800092c:	d01d      	beq.n	800096a <main+0x1ca>
	  {
		  while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET);
 800092e:	4b18      	ldr	r3, [pc, #96]	; (8000990 <main+0x1f0>)
 8000930:	2140      	movs	r1, #64	; 0x40
 8000932:	0018      	movs	r0, r3
 8000934:	f000 fc6c 	bl	8001210 <HAL_GPIO_ReadPin>
 8000938:	0003      	movs	r3, r0
 800093a:	3b01      	subs	r3, #1
 800093c:	425a      	negs	r2, r3
 800093e:	4153      	adcs	r3, r2
 8000940:	b2db      	uxtb	r3, r3
 8000942:	2b00      	cmp	r3, #0
 8000944:	d000      	beq.n	8000948 <main+0x1a8>
 8000946:	e7f2      	b.n	800092e <main+0x18e>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000948:	2390      	movs	r3, #144	; 0x90
 800094a:	05db      	lsls	r3, r3, #23
 800094c:	2201      	movs	r2, #1
 800094e:	2120      	movs	r1, #32
 8000950:	0018      	movs	r0, r3
 8000952:	f000 fc7a 	bl	800124a <HAL_GPIO_WritePin>
		  HAL_Delay(5);
 8000956:	2005      	movs	r0, #5
 8000958:	f000 fa14 	bl	8000d84 <HAL_Delay>
		  controller1.setButtonPressed(Button::Down);
 800095c:	230c      	movs	r3, #12
 800095e:	18fb      	adds	r3, r7, r3
 8000960:	2101      	movs	r1, #1
 8000962:	0018      	movs	r0, r3
 8000964:	f7ff fc8a 	bl	800027c <_ZN10Controller16setButtonPressedE6Button>
 8000968:	e00c      	b.n	8000984 <main+0x1e4>
		  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800096a:	2390      	movs	r3, #144	; 0x90
 800096c:	05db      	lsls	r3, r3, #23
 800096e:	2200      	movs	r2, #0
 8000970:	2120      	movs	r1, #32
 8000972:	0018      	movs	r0, r3
 8000974:	f000 fc69 	bl	800124a <HAL_GPIO_WritePin>
		  controller1.setButtonPressed(Button::None);
 8000978:	230c      	movs	r3, #12
 800097a:	18fb      	adds	r3, r7, r3
 800097c:	2106      	movs	r1, #6
 800097e:	0018      	movs	r0, r3
 8000980:	f7ff fc7c 	bl	800027c <_ZN10Controller16setButtonPressedE6Button>
	  }
	  game->update();
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	0018      	movs	r0, r3
 8000988:	f7ff fd3a 	bl	8000400 <_ZN4Game6updateEv>
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_SET)
 800098c:	e73d      	b.n	800080a <main+0x6a>
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	48000400 	.word	0x48000400

08000994 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000994:	b590      	push	{r4, r7, lr}
 8000996:	b091      	sub	sp, #68	; 0x44
 8000998:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800099a:	2410      	movs	r4, #16
 800099c:	193b      	adds	r3, r7, r4
 800099e:	0018      	movs	r0, r3
 80009a0:	2330      	movs	r3, #48	; 0x30
 80009a2:	001a      	movs	r2, r3
 80009a4:	2100      	movs	r1, #0
 80009a6:	f001 f921 	bl	8001bec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009aa:	003b      	movs	r3, r7
 80009ac:	0018      	movs	r0, r3
 80009ae:	2310      	movs	r3, #16
 80009b0:	001a      	movs	r2, r3
 80009b2:	2100      	movs	r1, #0
 80009b4:	f001 f91a 	bl	8001bec <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009b8:	0021      	movs	r1, r4
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	2202      	movs	r2, #2
 80009be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	2201      	movs	r2, #1
 80009c4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	2210      	movs	r2, #16
 80009ca:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	2200      	movs	r2, #0
 80009d0:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	0018      	movs	r0, r3
 80009d6:	f000 fc55 	bl	8001284 <HAL_RCC_OscConfig>
 80009da:	0003      	movs	r3, r0
 80009dc:	1e5a      	subs	r2, r3, #1
 80009de:	4193      	sbcs	r3, r2
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <_Z18SystemClock_Configv+0x56>
  {
    Error_Handler();
 80009e6:	f000 f8a7 	bl	8000b38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ea:	003b      	movs	r3, r7
 80009ec:	2207      	movs	r2, #7
 80009ee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009f0:	003b      	movs	r3, r7
 80009f2:	2200      	movs	r2, #0
 80009f4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f6:	003b      	movs	r3, r7
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009fc:	003b      	movs	r3, r7
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a02:	003b      	movs	r3, r7
 8000a04:	2100      	movs	r1, #0
 8000a06:	0018      	movs	r0, r3
 8000a08:	f000 ff58 	bl	80018bc <HAL_RCC_ClockConfig>
 8000a0c:	0003      	movs	r3, r0
 8000a0e:	1e5a      	subs	r2, r3, #1
 8000a10:	4193      	sbcs	r3, r2
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 8000a18:	f000 f88e 	bl	8000b38 <Error_Handler>
  }
}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b011      	add	sp, #68	; 0x44
 8000a22:	bd90      	pop	{r4, r7, pc}

08000a24 <_ZL12MX_GPIO_Initv>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void) {
 8000a24:	b590      	push	{r4, r7, lr}
 8000a26:	b089      	sub	sp, #36	; 0x24
 8000a28:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a2a:	240c      	movs	r4, #12
 8000a2c:	193b      	adds	r3, r7, r4
 8000a2e:	0018      	movs	r0, r3
 8000a30:	2314      	movs	r3, #20
 8000a32:	001a      	movs	r2, r3
 8000a34:	2100      	movs	r1, #0
 8000a36:	f001 f8d9 	bl	8001bec <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3a:	4b3c      	ldr	r3, [pc, #240]	; (8000b2c <_ZL12MX_GPIO_Initv+0x108>)
 8000a3c:	695a      	ldr	r2, [r3, #20]
 8000a3e:	4b3b      	ldr	r3, [pc, #236]	; (8000b2c <_ZL12MX_GPIO_Initv+0x108>)
 8000a40:	2180      	movs	r1, #128	; 0x80
 8000a42:	0309      	lsls	r1, r1, #12
 8000a44:	430a      	orrs	r2, r1
 8000a46:	615a      	str	r2, [r3, #20]
 8000a48:	4b38      	ldr	r3, [pc, #224]	; (8000b2c <_ZL12MX_GPIO_Initv+0x108>)
 8000a4a:	695a      	ldr	r2, [r3, #20]
 8000a4c:	2380      	movs	r3, #128	; 0x80
 8000a4e:	031b      	lsls	r3, r3, #12
 8000a50:	4013      	ands	r3, r2
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	4b35      	ldr	r3, [pc, #212]	; (8000b2c <_ZL12MX_GPIO_Initv+0x108>)
 8000a58:	695a      	ldr	r2, [r3, #20]
 8000a5a:	4b34      	ldr	r3, [pc, #208]	; (8000b2c <_ZL12MX_GPIO_Initv+0x108>)
 8000a5c:	2180      	movs	r1, #128	; 0x80
 8000a5e:	0289      	lsls	r1, r1, #10
 8000a60:	430a      	orrs	r2, r1
 8000a62:	615a      	str	r2, [r3, #20]
 8000a64:	4b31      	ldr	r3, [pc, #196]	; (8000b2c <_ZL12MX_GPIO_Initv+0x108>)
 8000a66:	695a      	ldr	r2, [r3, #20]
 8000a68:	2380      	movs	r3, #128	; 0x80
 8000a6a:	029b      	lsls	r3, r3, #10
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a72:	4b2e      	ldr	r3, [pc, #184]	; (8000b2c <_ZL12MX_GPIO_Initv+0x108>)
 8000a74:	695a      	ldr	r2, [r3, #20]
 8000a76:	4b2d      	ldr	r3, [pc, #180]	; (8000b2c <_ZL12MX_GPIO_Initv+0x108>)
 8000a78:	2180      	movs	r1, #128	; 0x80
 8000a7a:	02c9      	lsls	r1, r1, #11
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	615a      	str	r2, [r3, #20]
 8000a80:	4b2a      	ldr	r3, [pc, #168]	; (8000b2c <_ZL12MX_GPIO_Initv+0x108>)
 8000a82:	695a      	ldr	r2, [r3, #20]
 8000a84:	2380      	movs	r3, #128	; 0x80
 8000a86:	02db      	lsls	r3, r3, #11
 8000a88:	4013      	ands	r3, r2
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a8e:	2390      	movs	r3, #144	; 0x90
 8000a90:	05db      	lsls	r3, r3, #23
 8000a92:	2200      	movs	r2, #0
 8000a94:	2120      	movs	r1, #32
 8000a96:	0018      	movs	r0, r3
 8000a98:	f000 fbd7 	bl	800124a <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a9c:	193b      	adds	r3, r7, r4
 8000a9e:	2280      	movs	r2, #128	; 0x80
 8000aa0:	0192      	lsls	r2, r2, #6
 8000aa2:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa4:	193b      	adds	r3, r7, r4
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	193b      	adds	r3, r7, r4
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab0:	193b      	adds	r3, r7, r4
 8000ab2:	4a1f      	ldr	r2, [pc, #124]	; (8000b30 <_ZL12MX_GPIO_Initv+0x10c>)
 8000ab4:	0019      	movs	r1, r3
 8000ab6:	0010      	movs	r0, r2
 8000ab8:	f000 fa3a 	bl	8000f30 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000abc:	193b      	adds	r3, r7, r4
 8000abe:	2220      	movs	r2, #32
 8000ac0:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac2:	193b      	adds	r3, r7, r4
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	193b      	adds	r3, r7, r4
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	193b      	adds	r3, r7, r4
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad4:	193a      	adds	r2, r7, r4
 8000ad6:	2390      	movs	r3, #144	; 0x90
 8000ad8:	05db      	lsls	r3, r3, #23
 8000ada:	0011      	movs	r1, r2
 8000adc:	0018      	movs	r0, r3
 8000ade:	f000 fa27 	bl	8000f30 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA7 PA8 PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_10;
 8000ae2:	193b      	adds	r3, r7, r4
 8000ae4:	22b0      	movs	r2, #176	; 0xb0
 8000ae6:	00d2      	lsls	r2, r2, #3
 8000ae8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aea:	193b      	adds	r3, r7, r4
 8000aec:	2200      	movs	r2, #0
 8000aee:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	193b      	adds	r3, r7, r4
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af6:	193a      	adds	r2, r7, r4
 8000af8:	2390      	movs	r3, #144	; 0x90
 8000afa:	05db      	lsls	r3, r3, #23
 8000afc:	0011      	movs	r1, r2
 8000afe:	0018      	movs	r0, r3
 8000b00:	f000 fa16 	bl	8000f30 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_3;
 8000b04:	193b      	adds	r3, r7, r4
 8000b06:	2248      	movs	r2, #72	; 0x48
 8000b08:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0a:	193b      	adds	r3, r7, r4
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	193b      	adds	r3, r7, r4
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b16:	193b      	adds	r3, r7, r4
 8000b18:	4a06      	ldr	r2, [pc, #24]	; (8000b34 <_ZL12MX_GPIO_Initv+0x110>)
 8000b1a:	0019      	movs	r1, r3
 8000b1c:	0010      	movs	r0, r2
 8000b1e:	f000 fa07 	bl	8000f30 <HAL_GPIO_Init>
}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	46bd      	mov	sp, r7
 8000b26:	b009      	add	sp, #36	; 0x24
 8000b28:	bd90      	pop	{r4, r7, pc}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	48000800 	.word	0x48000800
 8000b34:	48000400 	.word	0x48000400

08000b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b3c:	46c0      	nop			; (mov r8, r8)
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <HAL_MspInit+0x44>)
 8000b4c:	699a      	ldr	r2, [r3, #24]
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <HAL_MspInit+0x44>)
 8000b50:	2101      	movs	r1, #1
 8000b52:	430a      	orrs	r2, r1
 8000b54:	619a      	str	r2, [r3, #24]
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <HAL_MspInit+0x44>)
 8000b58:	699b      	ldr	r3, [r3, #24]
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <HAL_MspInit+0x44>)
 8000b64:	69da      	ldr	r2, [r3, #28]
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <HAL_MspInit+0x44>)
 8000b68:	2180      	movs	r1, #128	; 0x80
 8000b6a:	0549      	lsls	r1, r1, #21
 8000b6c:	430a      	orrs	r2, r1
 8000b6e:	61da      	str	r2, [r3, #28]
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <HAL_MspInit+0x44>)
 8000b72:	69da      	ldr	r2, [r3, #28]
 8000b74:	2380      	movs	r3, #128	; 0x80
 8000b76:	055b      	lsls	r3, r3, #21
 8000b78:	4013      	ands	r3, r2
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	b002      	add	sp, #8
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	40021000 	.word	0x40021000

08000b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b90:	46c0      	nop			; (mov r8, r8)
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <HardFault_Handler+0x4>

08000b9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ba0:	46c0      	nop			; (mov r8, r8)
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb4:	f000 f8ca 	bl	8000d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb8:	46c0      	nop			; (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <_getpid>:
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <_kill>:
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
 8000bd2:	6039      	str	r1, [r7, #0]
 8000bd4:	f000 ffcc 	bl	8001b70 <__errno>
 8000bd8:	0003      	movs	r3, r0
 8000bda:	2216      	movs	r2, #22
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	2301      	movs	r3, #1
 8000be0:	425b      	negs	r3, r3
 8000be2:	0018      	movs	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b002      	add	sp, #8
 8000be8:	bd80      	pop	{r7, pc}

08000bea <_exit>:
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	425a      	negs	r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	0011      	movs	r1, r2
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f7ff ffe5 	bl	8000bca <_kill>
 8000c00:	e7fe      	b.n	8000c00 <_exit+0x16>
	...

08000c04 <_sbrk>:
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <_sbrk+0x50>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d102      	bne.n	8000c1a <_sbrk+0x16>
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <_sbrk+0x50>)
 8000c16:	4a10      	ldr	r2, [pc, #64]	; (8000c58 <_sbrk+0x54>)
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <_sbrk+0x50>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <_sbrk+0x50>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	18d3      	adds	r3, r2, r3
 8000c28:	466a      	mov	r2, sp
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d907      	bls.n	8000c3e <_sbrk+0x3a>
 8000c2e:	f000 ff9f 	bl	8001b70 <__errno>
 8000c32:	0003      	movs	r3, r0
 8000c34:	220c      	movs	r2, #12
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	2301      	movs	r3, #1
 8000c3a:	425b      	negs	r3, r3
 8000c3c:	e006      	b.n	8000c4c <_sbrk+0x48>
 8000c3e:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <_sbrk+0x50>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	18d2      	adds	r2, r2, r3
 8000c46:	4b03      	ldr	r3, [pc, #12]	; (8000c54 <_sbrk+0x50>)
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	b004      	add	sp, #16
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	2000008c 	.word	0x2000008c
 8000c58:	200000a8 	.word	0x200000a8

08000c5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <Reset_Handler>:
 8000c68:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <LoopForever+0x2>)
 8000c6a:	4685      	mov	sp, r0
 8000c6c:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <LoopForever+0x6>)
 8000c6e:	490e      	ldr	r1, [pc, #56]	; (8000ca8 <LoopForever+0xa>)
 8000c70:	4a0e      	ldr	r2, [pc, #56]	; (8000cac <LoopForever+0xe>)
 8000c72:	2300      	movs	r3, #0
 8000c74:	e002      	b.n	8000c7c <LoopCopyDataInit>

08000c76 <CopyDataInit>:
 8000c76:	58d4      	ldr	r4, [r2, r3]
 8000c78:	50c4      	str	r4, [r0, r3]
 8000c7a:	3304      	adds	r3, #4

08000c7c <LoopCopyDataInit>:
 8000c7c:	18c4      	adds	r4, r0, r3
 8000c7e:	428c      	cmp	r4, r1
 8000c80:	d3f9      	bcc.n	8000c76 <CopyDataInit>
 8000c82:	4a0b      	ldr	r2, [pc, #44]	; (8000cb0 <LoopForever+0x12>)
 8000c84:	4c0b      	ldr	r4, [pc, #44]	; (8000cb4 <LoopForever+0x16>)
 8000c86:	2300      	movs	r3, #0
 8000c88:	e001      	b.n	8000c8e <LoopFillZerobss>

08000c8a <FillZerobss>:
 8000c8a:	6013      	str	r3, [r2, #0]
 8000c8c:	3204      	adds	r2, #4

08000c8e <LoopFillZerobss>:
 8000c8e:	42a2      	cmp	r2, r4
 8000c90:	d3fb      	bcc.n	8000c8a <FillZerobss>
 8000c92:	f7ff ffe3 	bl	8000c5c <SystemInit>
 8000c96:	f000 ff71 	bl	8001b7c <__libc_init_array>
 8000c9a:	f7ff fd81 	bl	80007a0 <main>

08000c9e <LoopForever>:
 8000c9e:	e7fe      	b.n	8000c9e <LoopForever>
 8000ca0:	20002000 	.word	0x20002000
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	20000070 	.word	0x20000070
 8000cac:	08001ec8 	.word	0x08001ec8
 8000cb0:	20000070 	.word	0x20000070
 8000cb4:	200000a4 	.word	0x200000a4

08000cb8 <ADC1_IRQHandler>:
 8000cb8:	e7fe      	b.n	8000cb8 <ADC1_IRQHandler>
	...

08000cbc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc0:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <HAL_Init+0x24>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_Init+0x24>)
 8000cc6:	2110      	movs	r1, #16
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f000 f809 	bl	8000ce4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd2:	f7ff ff37 	bl	8000b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd6:	2300      	movs	r3, #0
}
 8000cd8:	0018      	movs	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	40022000 	.word	0x40022000

08000ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce4:	b590      	push	{r4, r7, lr}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cec:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <HAL_InitTick+0x5c>)
 8000cee:	681c      	ldr	r4, [r3, #0]
 8000cf0:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <HAL_InitTick+0x60>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	0019      	movs	r1, r3
 8000cf6:	23fa      	movs	r3, #250	; 0xfa
 8000cf8:	0098      	lsls	r0, r3, #2
 8000cfa:	f7ff fa05 	bl	8000108 <__udivsi3>
 8000cfe:	0003      	movs	r3, r0
 8000d00:	0019      	movs	r1, r3
 8000d02:	0020      	movs	r0, r4
 8000d04:	f7ff fa00 	bl	8000108 <__udivsi3>
 8000d08:	0003      	movs	r3, r0
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f000 f903 	bl	8000f16 <HAL_SYSTICK_Config>
 8000d10:	1e03      	subs	r3, r0, #0
 8000d12:	d001      	beq.n	8000d18 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d14:	2301      	movs	r3, #1
 8000d16:	e00f      	b.n	8000d38 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2b03      	cmp	r3, #3
 8000d1c:	d80b      	bhi.n	8000d36 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	2301      	movs	r3, #1
 8000d22:	425b      	negs	r3, r3
 8000d24:	2200      	movs	r2, #0
 8000d26:	0018      	movs	r0, r3
 8000d28:	f000 f8e0 	bl	8000eec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_InitTick+0x64>)
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000d32:	2300      	movs	r3, #0
 8000d34:	e000      	b.n	8000d38 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
}
 8000d38:	0018      	movs	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	b003      	add	sp, #12
 8000d3e:	bd90      	pop	{r4, r7, pc}
 8000d40:	20000000 	.word	0x20000000
 8000d44:	20000008 	.word	0x20000008
 8000d48:	20000004 	.word	0x20000004

08000d4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <HAL_IncTick+0x1c>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	001a      	movs	r2, r3
 8000d56:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <HAL_IncTick+0x20>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	18d2      	adds	r2, r2, r3
 8000d5c:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <HAL_IncTick+0x20>)
 8000d5e:	601a      	str	r2, [r3, #0]
}
 8000d60:	46c0      	nop			; (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	20000008 	.word	0x20000008
 8000d6c:	2000009c 	.word	0x2000009c

08000d70 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  return uwTick;
 8000d74:	4b02      	ldr	r3, [pc, #8]	; (8000d80 <HAL_GetTick+0x10>)
 8000d76:	681b      	ldr	r3, [r3, #0]
}
 8000d78:	0018      	movs	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	2000009c 	.word	0x2000009c

08000d84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d8c:	f7ff fff0 	bl	8000d70 <HAL_GetTick>
 8000d90:	0003      	movs	r3, r0
 8000d92:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	d005      	beq.n	8000daa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <HAL_Delay+0x40>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	001a      	movs	r2, r3
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	189b      	adds	r3, r3, r2
 8000da8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	f7ff ffe0 	bl	8000d70 <HAL_GetTick>
 8000db0:	0002      	movs	r2, r0
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	68fa      	ldr	r2, [r7, #12]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d8f7      	bhi.n	8000dac <HAL_Delay+0x28>
  {
  }
}
 8000dbc:	46c0      	nop			; (mov r8, r8)
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	b004      	add	sp, #16
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000008 	.word	0x20000008

08000dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc8:	b590      	push	{r4, r7, lr}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	0002      	movs	r2, r0
 8000dd0:	6039      	str	r1, [r7, #0]
 8000dd2:	1dfb      	adds	r3, r7, #7
 8000dd4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dd6:	1dfb      	adds	r3, r7, #7
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b7f      	cmp	r3, #127	; 0x7f
 8000ddc:	d828      	bhi.n	8000e30 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dde:	4a2f      	ldr	r2, [pc, #188]	; (8000e9c <__NVIC_SetPriority+0xd4>)
 8000de0:	1dfb      	adds	r3, r7, #7
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	b25b      	sxtb	r3, r3
 8000de6:	089b      	lsrs	r3, r3, #2
 8000de8:	33c0      	adds	r3, #192	; 0xc0
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	589b      	ldr	r3, [r3, r2]
 8000dee:	1dfa      	adds	r2, r7, #7
 8000df0:	7812      	ldrb	r2, [r2, #0]
 8000df2:	0011      	movs	r1, r2
 8000df4:	2203      	movs	r2, #3
 8000df6:	400a      	ands	r2, r1
 8000df8:	00d2      	lsls	r2, r2, #3
 8000dfa:	21ff      	movs	r1, #255	; 0xff
 8000dfc:	4091      	lsls	r1, r2
 8000dfe:	000a      	movs	r2, r1
 8000e00:	43d2      	mvns	r2, r2
 8000e02:	401a      	ands	r2, r3
 8000e04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	019b      	lsls	r3, r3, #6
 8000e0a:	22ff      	movs	r2, #255	; 0xff
 8000e0c:	401a      	ands	r2, r3
 8000e0e:	1dfb      	adds	r3, r7, #7
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	0018      	movs	r0, r3
 8000e14:	2303      	movs	r3, #3
 8000e16:	4003      	ands	r3, r0
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e1c:	481f      	ldr	r0, [pc, #124]	; (8000e9c <__NVIC_SetPriority+0xd4>)
 8000e1e:	1dfb      	adds	r3, r7, #7
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	b25b      	sxtb	r3, r3
 8000e24:	089b      	lsrs	r3, r3, #2
 8000e26:	430a      	orrs	r2, r1
 8000e28:	33c0      	adds	r3, #192	; 0xc0
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e2e:	e031      	b.n	8000e94 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e30:	4a1b      	ldr	r2, [pc, #108]	; (8000ea0 <__NVIC_SetPriority+0xd8>)
 8000e32:	1dfb      	adds	r3, r7, #7
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	0019      	movs	r1, r3
 8000e38:	230f      	movs	r3, #15
 8000e3a:	400b      	ands	r3, r1
 8000e3c:	3b08      	subs	r3, #8
 8000e3e:	089b      	lsrs	r3, r3, #2
 8000e40:	3306      	adds	r3, #6
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	18d3      	adds	r3, r2, r3
 8000e46:	3304      	adds	r3, #4
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	1dfa      	adds	r2, r7, #7
 8000e4c:	7812      	ldrb	r2, [r2, #0]
 8000e4e:	0011      	movs	r1, r2
 8000e50:	2203      	movs	r2, #3
 8000e52:	400a      	ands	r2, r1
 8000e54:	00d2      	lsls	r2, r2, #3
 8000e56:	21ff      	movs	r1, #255	; 0xff
 8000e58:	4091      	lsls	r1, r2
 8000e5a:	000a      	movs	r2, r1
 8000e5c:	43d2      	mvns	r2, r2
 8000e5e:	401a      	ands	r2, r3
 8000e60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	019b      	lsls	r3, r3, #6
 8000e66:	22ff      	movs	r2, #255	; 0xff
 8000e68:	401a      	ands	r2, r3
 8000e6a:	1dfb      	adds	r3, r7, #7
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	0018      	movs	r0, r3
 8000e70:	2303      	movs	r3, #3
 8000e72:	4003      	ands	r3, r0
 8000e74:	00db      	lsls	r3, r3, #3
 8000e76:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e78:	4809      	ldr	r0, [pc, #36]	; (8000ea0 <__NVIC_SetPriority+0xd8>)
 8000e7a:	1dfb      	adds	r3, r7, #7
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	001c      	movs	r4, r3
 8000e80:	230f      	movs	r3, #15
 8000e82:	4023      	ands	r3, r4
 8000e84:	3b08      	subs	r3, #8
 8000e86:	089b      	lsrs	r3, r3, #2
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	3306      	adds	r3, #6
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	18c3      	adds	r3, r0, r3
 8000e90:	3304      	adds	r3, #4
 8000e92:	601a      	str	r2, [r3, #0]
}
 8000e94:	46c0      	nop			; (mov r8, r8)
 8000e96:	46bd      	mov	sp, r7
 8000e98:	b003      	add	sp, #12
 8000e9a:	bd90      	pop	{r4, r7, pc}
 8000e9c:	e000e100 	.word	0xe000e100
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	4a0c      	ldr	r2, [pc, #48]	; (8000ee4 <SysTick_Config+0x40>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d901      	bls.n	8000eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e010      	b.n	8000edc <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eba:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <SysTick_Config+0x44>)
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	3a01      	subs	r2, #1
 8000ec0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	425b      	negs	r3, r3
 8000ec6:	2103      	movs	r1, #3
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f7ff ff7d 	bl	8000dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <SysTick_Config+0x44>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed4:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <SysTick_Config+0x44>)
 8000ed6:	2207      	movs	r2, #7
 8000ed8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eda:	2300      	movs	r3, #0
}
 8000edc:	0018      	movs	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	b002      	add	sp, #8
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	00ffffff 	.word	0x00ffffff
 8000ee8:	e000e010 	.word	0xe000e010

08000eec <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60b9      	str	r1, [r7, #8]
 8000ef4:	607a      	str	r2, [r7, #4]
 8000ef6:	210f      	movs	r1, #15
 8000ef8:	187b      	adds	r3, r7, r1
 8000efa:	1c02      	adds	r2, r0, #0
 8000efc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	187b      	adds	r3, r7, r1
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	b25b      	sxtb	r3, r3
 8000f06:	0011      	movs	r1, r2
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f7ff ff5d 	bl	8000dc8 <__NVIC_SetPriority>
}
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	46bd      	mov	sp, r7
 8000f12:	b004      	add	sp, #16
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	0018      	movs	r0, r3
 8000f22:	f7ff ffbf 	bl	8000ea4 <SysTick_Config>
 8000f26:	0003      	movs	r3, r0
}
 8000f28:	0018      	movs	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	b002      	add	sp, #8
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f3e:	e14f      	b.n	80011e0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2101      	movs	r1, #1
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	4091      	lsls	r1, r2
 8000f4a:	000a      	movs	r2, r1
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d100      	bne.n	8000f58 <HAL_GPIO_Init+0x28>
 8000f56:	e140      	b.n	80011da <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d003      	beq.n	8000f68 <HAL_GPIO_Init+0x38>
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	2b12      	cmp	r3, #18
 8000f66:	d123      	bne.n	8000fb0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	08da      	lsrs	r2, r3, #3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3208      	adds	r2, #8
 8000f70:	0092      	lsls	r2, r2, #2
 8000f72:	58d3      	ldr	r3, [r2, r3]
 8000f74:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	2207      	movs	r2, #7
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	220f      	movs	r2, #15
 8000f80:	409a      	lsls	r2, r3
 8000f82:	0013      	movs	r3, r2
 8000f84:	43da      	mvns	r2, r3
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	691a      	ldr	r2, [r3, #16]
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	2107      	movs	r1, #7
 8000f94:	400b      	ands	r3, r1
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	409a      	lsls	r2, r3
 8000f9a:	0013      	movs	r3, r2
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	08da      	lsrs	r2, r3, #3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3208      	adds	r2, #8
 8000faa:	0092      	lsls	r2, r2, #2
 8000fac:	6939      	ldr	r1, [r7, #16]
 8000fae:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	2203      	movs	r2, #3
 8000fbc:	409a      	lsls	r2, r3
 8000fbe:	0013      	movs	r3, r2
 8000fc0:	43da      	mvns	r2, r3
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	2203      	movs	r2, #3
 8000fce:	401a      	ands	r2, r3
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	409a      	lsls	r2, r3
 8000fd6:	0013      	movs	r3, r2
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d00b      	beq.n	8001004 <HAL_GPIO_Init+0xd4>
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d007      	beq.n	8001004 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ff8:	2b11      	cmp	r3, #17
 8000ffa:	d003      	beq.n	8001004 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	2b12      	cmp	r3, #18
 8001002:	d130      	bne.n	8001066 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	2203      	movs	r2, #3
 8001010:	409a      	lsls	r2, r3
 8001012:	0013      	movs	r3, r2
 8001014:	43da      	mvns	r2, r3
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	68da      	ldr	r2, [r3, #12]
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	409a      	lsls	r2, r3
 8001026:	0013      	movs	r3, r2
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	4313      	orrs	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800103a:	2201      	movs	r2, #1
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	409a      	lsls	r2, r3
 8001040:	0013      	movs	r3, r2
 8001042:	43da      	mvns	r2, r3
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	091b      	lsrs	r3, r3, #4
 8001050:	2201      	movs	r2, #1
 8001052:	401a      	ands	r2, r3
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	409a      	lsls	r2, r3
 8001058:	0013      	movs	r3, r2
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	2203      	movs	r2, #3
 8001072:	409a      	lsls	r2, r3
 8001074:	0013      	movs	r3, r2
 8001076:	43da      	mvns	r2, r3
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	4013      	ands	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	689a      	ldr	r2, [r3, #8]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	409a      	lsls	r2, r3
 8001088:	0013      	movs	r3, r2
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685a      	ldr	r2, [r3, #4]
 800109a:	2380      	movs	r3, #128	; 0x80
 800109c:	055b      	lsls	r3, r3, #21
 800109e:	4013      	ands	r3, r2
 80010a0:	d100      	bne.n	80010a4 <HAL_GPIO_Init+0x174>
 80010a2:	e09a      	b.n	80011da <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a4:	4b54      	ldr	r3, [pc, #336]	; (80011f8 <HAL_GPIO_Init+0x2c8>)
 80010a6:	699a      	ldr	r2, [r3, #24]
 80010a8:	4b53      	ldr	r3, [pc, #332]	; (80011f8 <HAL_GPIO_Init+0x2c8>)
 80010aa:	2101      	movs	r1, #1
 80010ac:	430a      	orrs	r2, r1
 80010ae:	619a      	str	r2, [r3, #24]
 80010b0:	4b51      	ldr	r3, [pc, #324]	; (80011f8 <HAL_GPIO_Init+0x2c8>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	2201      	movs	r2, #1
 80010b6:	4013      	ands	r3, r2
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010bc:	4a4f      	ldr	r2, [pc, #316]	; (80011fc <HAL_GPIO_Init+0x2cc>)
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	089b      	lsrs	r3, r3, #2
 80010c2:	3302      	adds	r3, #2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	589b      	ldr	r3, [r3, r2]
 80010c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	2203      	movs	r2, #3
 80010ce:	4013      	ands	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	220f      	movs	r2, #15
 80010d4:	409a      	lsls	r2, r3
 80010d6:	0013      	movs	r3, r2
 80010d8:	43da      	mvns	r2, r3
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	2390      	movs	r3, #144	; 0x90
 80010e4:	05db      	lsls	r3, r3, #23
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d013      	beq.n	8001112 <HAL_GPIO_Init+0x1e2>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a44      	ldr	r2, [pc, #272]	; (8001200 <HAL_GPIO_Init+0x2d0>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d00d      	beq.n	800110e <HAL_GPIO_Init+0x1de>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a43      	ldr	r2, [pc, #268]	; (8001204 <HAL_GPIO_Init+0x2d4>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d007      	beq.n	800110a <HAL_GPIO_Init+0x1da>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a42      	ldr	r2, [pc, #264]	; (8001208 <HAL_GPIO_Init+0x2d8>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d101      	bne.n	8001106 <HAL_GPIO_Init+0x1d6>
 8001102:	2303      	movs	r3, #3
 8001104:	e006      	b.n	8001114 <HAL_GPIO_Init+0x1e4>
 8001106:	2305      	movs	r3, #5
 8001108:	e004      	b.n	8001114 <HAL_GPIO_Init+0x1e4>
 800110a:	2302      	movs	r3, #2
 800110c:	e002      	b.n	8001114 <HAL_GPIO_Init+0x1e4>
 800110e:	2301      	movs	r3, #1
 8001110:	e000      	b.n	8001114 <HAL_GPIO_Init+0x1e4>
 8001112:	2300      	movs	r3, #0
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	2103      	movs	r1, #3
 8001118:	400a      	ands	r2, r1
 800111a:	0092      	lsls	r2, r2, #2
 800111c:	4093      	lsls	r3, r2
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001124:	4935      	ldr	r1, [pc, #212]	; (80011fc <HAL_GPIO_Init+0x2cc>)
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	089b      	lsrs	r3, r3, #2
 800112a:	3302      	adds	r3, #2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001132:	4b36      	ldr	r3, [pc, #216]	; (800120c <HAL_GPIO_Init+0x2dc>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	43da      	mvns	r2, r3
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	4013      	ands	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685a      	ldr	r2, [r3, #4]
 8001146:	2380      	movs	r3, #128	; 0x80
 8001148:	025b      	lsls	r3, r3, #9
 800114a:	4013      	ands	r3, r2
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4313      	orrs	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001156:	4b2d      	ldr	r3, [pc, #180]	; (800120c <HAL_GPIO_Init+0x2dc>)
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800115c:	4b2b      	ldr	r3, [pc, #172]	; (800120c <HAL_GPIO_Init+0x2dc>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	43da      	mvns	r2, r3
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685a      	ldr	r2, [r3, #4]
 8001170:	2380      	movs	r3, #128	; 0x80
 8001172:	029b      	lsls	r3, r3, #10
 8001174:	4013      	ands	r3, r2
 8001176:	d003      	beq.n	8001180 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001180:	4b22      	ldr	r3, [pc, #136]	; (800120c <HAL_GPIO_Init+0x2dc>)
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001186:	4b21      	ldr	r3, [pc, #132]	; (800120c <HAL_GPIO_Init+0x2dc>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	43da      	mvns	r2, r3
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	2380      	movs	r3, #128	; 0x80
 800119c:	035b      	lsls	r3, r3, #13
 800119e:	4013      	ands	r3, r2
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011aa:	4b18      	ldr	r3, [pc, #96]	; (800120c <HAL_GPIO_Init+0x2dc>)
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80011b0:	4b16      	ldr	r3, [pc, #88]	; (800120c <HAL_GPIO_Init+0x2dc>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	43da      	mvns	r2, r3
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	2380      	movs	r3, #128	; 0x80
 80011c6:	039b      	lsls	r3, r3, #14
 80011c8:	4013      	ands	r3, r2
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011d4:	4b0d      	ldr	r3, [pc, #52]	; (800120c <HAL_GPIO_Init+0x2dc>)
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	3301      	adds	r3, #1
 80011de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	40da      	lsrs	r2, r3
 80011e8:	1e13      	subs	r3, r2, #0
 80011ea:	d000      	beq.n	80011ee <HAL_GPIO_Init+0x2be>
 80011ec:	e6a8      	b.n	8000f40 <HAL_GPIO_Init+0x10>
  } 
}
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	46bd      	mov	sp, r7
 80011f2:	b006      	add	sp, #24
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40010000 	.word	0x40010000
 8001200:	48000400 	.word	0x48000400
 8001204:	48000800 	.word	0x48000800
 8001208:	48000c00 	.word	0x48000c00
 800120c:	40010400 	.word	0x40010400

08001210 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	000a      	movs	r2, r1
 800121a:	1cbb      	adds	r3, r7, #2
 800121c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	1cba      	adds	r2, r7, #2
 8001224:	8812      	ldrh	r2, [r2, #0]
 8001226:	4013      	ands	r3, r2
 8001228:	d004      	beq.n	8001234 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800122a:	230f      	movs	r3, #15
 800122c:	18fb      	adds	r3, r7, r3
 800122e:	2201      	movs	r2, #1
 8001230:	701a      	strb	r2, [r3, #0]
 8001232:	e003      	b.n	800123c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001234:	230f      	movs	r3, #15
 8001236:	18fb      	adds	r3, r7, r3
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800123c:	230f      	movs	r3, #15
 800123e:	18fb      	adds	r3, r7, r3
 8001240:	781b      	ldrb	r3, [r3, #0]
  }
 8001242:	0018      	movs	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	b004      	add	sp, #16
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
 8001252:	0008      	movs	r0, r1
 8001254:	0011      	movs	r1, r2
 8001256:	1cbb      	adds	r3, r7, #2
 8001258:	1c02      	adds	r2, r0, #0
 800125a:	801a      	strh	r2, [r3, #0]
 800125c:	1c7b      	adds	r3, r7, #1
 800125e:	1c0a      	adds	r2, r1, #0
 8001260:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001262:	1c7b      	adds	r3, r7, #1
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d004      	beq.n	8001274 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800126a:	1cbb      	adds	r3, r7, #2
 800126c:	881a      	ldrh	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001272:	e003      	b.n	800127c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001274:	1cbb      	adds	r3, r7, #2
 8001276:	881a      	ldrh	r2, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800127c:	46c0      	nop			; (mov r8, r8)
 800127e:	46bd      	mov	sp, r7
 8001280:	b002      	add	sp, #8
 8001282:	bd80      	pop	{r7, pc}

08001284 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e303      	b.n	800189e <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2201      	movs	r2, #1
 800129c:	4013      	ands	r3, r2
 800129e:	d100      	bne.n	80012a2 <HAL_RCC_OscConfig+0x1e>
 80012a0:	e08d      	b.n	80013be <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80012a2:	4bc4      	ldr	r3, [pc, #784]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	220c      	movs	r2, #12
 80012a8:	4013      	ands	r3, r2
 80012aa:	2b04      	cmp	r3, #4
 80012ac:	d00e      	beq.n	80012cc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012ae:	4bc1      	ldr	r3, [pc, #772]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	220c      	movs	r2, #12
 80012b4:	4013      	ands	r3, r2
 80012b6:	2b08      	cmp	r3, #8
 80012b8:	d116      	bne.n	80012e8 <HAL_RCC_OscConfig+0x64>
 80012ba:	4bbe      	ldr	r3, [pc, #760]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	2380      	movs	r3, #128	; 0x80
 80012c0:	025b      	lsls	r3, r3, #9
 80012c2:	401a      	ands	r2, r3
 80012c4:	2380      	movs	r3, #128	; 0x80
 80012c6:	025b      	lsls	r3, r3, #9
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d10d      	bne.n	80012e8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012cc:	4bb9      	ldr	r3, [pc, #740]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	2380      	movs	r3, #128	; 0x80
 80012d2:	029b      	lsls	r3, r3, #10
 80012d4:	4013      	ands	r3, r2
 80012d6:	d100      	bne.n	80012da <HAL_RCC_OscConfig+0x56>
 80012d8:	e070      	b.n	80013bc <HAL_RCC_OscConfig+0x138>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d000      	beq.n	80012e4 <HAL_RCC_OscConfig+0x60>
 80012e2:	e06b      	b.n	80013bc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e2da      	b.n	800189e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d107      	bne.n	8001300 <HAL_RCC_OscConfig+0x7c>
 80012f0:	4bb0      	ldr	r3, [pc, #704]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4baf      	ldr	r3, [pc, #700]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 80012f6:	2180      	movs	r1, #128	; 0x80
 80012f8:	0249      	lsls	r1, r1, #9
 80012fa:	430a      	orrs	r2, r1
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	e02f      	b.n	8001360 <HAL_RCC_OscConfig+0xdc>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d10c      	bne.n	8001322 <HAL_RCC_OscConfig+0x9e>
 8001308:	4baa      	ldr	r3, [pc, #680]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4ba9      	ldr	r3, [pc, #676]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 800130e:	49aa      	ldr	r1, [pc, #680]	; (80015b8 <HAL_RCC_OscConfig+0x334>)
 8001310:	400a      	ands	r2, r1
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	4ba7      	ldr	r3, [pc, #668]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4ba6      	ldr	r3, [pc, #664]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 800131a:	49a8      	ldr	r1, [pc, #672]	; (80015bc <HAL_RCC_OscConfig+0x338>)
 800131c:	400a      	ands	r2, r1
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	e01e      	b.n	8001360 <HAL_RCC_OscConfig+0xdc>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b05      	cmp	r3, #5
 8001328:	d10e      	bne.n	8001348 <HAL_RCC_OscConfig+0xc4>
 800132a:	4ba2      	ldr	r3, [pc, #648]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	4ba1      	ldr	r3, [pc, #644]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 8001330:	2180      	movs	r1, #128	; 0x80
 8001332:	02c9      	lsls	r1, r1, #11
 8001334:	430a      	orrs	r2, r1
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	4b9e      	ldr	r3, [pc, #632]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4b9d      	ldr	r3, [pc, #628]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 800133e:	2180      	movs	r1, #128	; 0x80
 8001340:	0249      	lsls	r1, r1, #9
 8001342:	430a      	orrs	r2, r1
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	e00b      	b.n	8001360 <HAL_RCC_OscConfig+0xdc>
 8001348:	4b9a      	ldr	r3, [pc, #616]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	4b99      	ldr	r3, [pc, #612]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 800134e:	499a      	ldr	r1, [pc, #616]	; (80015b8 <HAL_RCC_OscConfig+0x334>)
 8001350:	400a      	ands	r2, r1
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	4b97      	ldr	r3, [pc, #604]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b96      	ldr	r3, [pc, #600]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 800135a:	4998      	ldr	r1, [pc, #608]	; (80015bc <HAL_RCC_OscConfig+0x338>)
 800135c:	400a      	ands	r2, r1
 800135e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d014      	beq.n	8001392 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001368:	f7ff fd02 	bl	8000d70 <HAL_GetTick>
 800136c:	0003      	movs	r3, r0
 800136e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001370:	e008      	b.n	8001384 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001372:	f7ff fcfd 	bl	8000d70 <HAL_GetTick>
 8001376:	0002      	movs	r2, r0
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b64      	cmp	r3, #100	; 0x64
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e28c      	b.n	800189e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001384:	4b8b      	ldr	r3, [pc, #556]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	2380      	movs	r3, #128	; 0x80
 800138a:	029b      	lsls	r3, r3, #10
 800138c:	4013      	ands	r3, r2
 800138e:	d0f0      	beq.n	8001372 <HAL_RCC_OscConfig+0xee>
 8001390:	e015      	b.n	80013be <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001392:	f7ff fced 	bl	8000d70 <HAL_GetTick>
 8001396:	0003      	movs	r3, r0
 8001398:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800139c:	f7ff fce8 	bl	8000d70 <HAL_GetTick>
 80013a0:	0002      	movs	r2, r0
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b64      	cmp	r3, #100	; 0x64
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e277      	b.n	800189e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ae:	4b81      	ldr	r3, [pc, #516]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	2380      	movs	r3, #128	; 0x80
 80013b4:	029b      	lsls	r3, r3, #10
 80013b6:	4013      	ands	r3, r2
 80013b8:	d1f0      	bne.n	800139c <HAL_RCC_OscConfig+0x118>
 80013ba:	e000      	b.n	80013be <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013bc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2202      	movs	r2, #2
 80013c4:	4013      	ands	r3, r2
 80013c6:	d100      	bne.n	80013ca <HAL_RCC_OscConfig+0x146>
 80013c8:	e069      	b.n	800149e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80013ca:	4b7a      	ldr	r3, [pc, #488]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	220c      	movs	r2, #12
 80013d0:	4013      	ands	r3, r2
 80013d2:	d00b      	beq.n	80013ec <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013d4:	4b77      	ldr	r3, [pc, #476]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	220c      	movs	r2, #12
 80013da:	4013      	ands	r3, r2
 80013dc:	2b08      	cmp	r3, #8
 80013de:	d11c      	bne.n	800141a <HAL_RCC_OscConfig+0x196>
 80013e0:	4b74      	ldr	r3, [pc, #464]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 80013e2:	685a      	ldr	r2, [r3, #4]
 80013e4:	2380      	movs	r3, #128	; 0x80
 80013e6:	025b      	lsls	r3, r3, #9
 80013e8:	4013      	ands	r3, r2
 80013ea:	d116      	bne.n	800141a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ec:	4b71      	ldr	r3, [pc, #452]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2202      	movs	r2, #2
 80013f2:	4013      	ands	r3, r2
 80013f4:	d005      	beq.n	8001402 <HAL_RCC_OscConfig+0x17e>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d001      	beq.n	8001402 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e24d      	b.n	800189e <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001402:	4b6c      	ldr	r3, [pc, #432]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	22f8      	movs	r2, #248	; 0xf8
 8001408:	4393      	bics	r3, r2
 800140a:	0019      	movs	r1, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	691b      	ldr	r3, [r3, #16]
 8001410:	00da      	lsls	r2, r3, #3
 8001412:	4b68      	ldr	r3, [pc, #416]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 8001414:	430a      	orrs	r2, r1
 8001416:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001418:	e041      	b.n	800149e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d024      	beq.n	800146c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001422:	4b64      	ldr	r3, [pc, #400]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	4b63      	ldr	r3, [pc, #396]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 8001428:	2101      	movs	r1, #1
 800142a:	430a      	orrs	r2, r1
 800142c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142e:	f7ff fc9f 	bl	8000d70 <HAL_GetTick>
 8001432:	0003      	movs	r3, r0
 8001434:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001438:	f7ff fc9a 	bl	8000d70 <HAL_GetTick>
 800143c:	0002      	movs	r2, r0
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e229      	b.n	800189e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144a:	4b5a      	ldr	r3, [pc, #360]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2202      	movs	r2, #2
 8001450:	4013      	ands	r3, r2
 8001452:	d0f1      	beq.n	8001438 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001454:	4b57      	ldr	r3, [pc, #348]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	22f8      	movs	r2, #248	; 0xf8
 800145a:	4393      	bics	r3, r2
 800145c:	0019      	movs	r1, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	00da      	lsls	r2, r3, #3
 8001464:	4b53      	ldr	r3, [pc, #332]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 8001466:	430a      	orrs	r2, r1
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	e018      	b.n	800149e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800146c:	4b51      	ldr	r3, [pc, #324]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4b50      	ldr	r3, [pc, #320]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 8001472:	2101      	movs	r1, #1
 8001474:	438a      	bics	r2, r1
 8001476:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001478:	f7ff fc7a 	bl	8000d70 <HAL_GetTick>
 800147c:	0003      	movs	r3, r0
 800147e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001482:	f7ff fc75 	bl	8000d70 <HAL_GetTick>
 8001486:	0002      	movs	r2, r0
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e204      	b.n	800189e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001494:	4b47      	ldr	r3, [pc, #284]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2202      	movs	r2, #2
 800149a:	4013      	ands	r3, r2
 800149c:	d1f1      	bne.n	8001482 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2208      	movs	r2, #8
 80014a4:	4013      	ands	r3, r2
 80014a6:	d036      	beq.n	8001516 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	69db      	ldr	r3, [r3, #28]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d019      	beq.n	80014e4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014b0:	4b40      	ldr	r3, [pc, #256]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 80014b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014b4:	4b3f      	ldr	r3, [pc, #252]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 80014b6:	2101      	movs	r1, #1
 80014b8:	430a      	orrs	r2, r1
 80014ba:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014bc:	f7ff fc58 	bl	8000d70 <HAL_GetTick>
 80014c0:	0003      	movs	r3, r0
 80014c2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c6:	f7ff fc53 	bl	8000d70 <HAL_GetTick>
 80014ca:	0002      	movs	r2, r0
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e1e2      	b.n	800189e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d8:	4b36      	ldr	r3, [pc, #216]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 80014da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014dc:	2202      	movs	r2, #2
 80014de:	4013      	ands	r3, r2
 80014e0:	d0f1      	beq.n	80014c6 <HAL_RCC_OscConfig+0x242>
 80014e2:	e018      	b.n	8001516 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e4:	4b33      	ldr	r3, [pc, #204]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 80014e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014e8:	4b32      	ldr	r3, [pc, #200]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 80014ea:	2101      	movs	r1, #1
 80014ec:	438a      	bics	r2, r1
 80014ee:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f0:	f7ff fc3e 	bl	8000d70 <HAL_GetTick>
 80014f4:	0003      	movs	r3, r0
 80014f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014fa:	f7ff fc39 	bl	8000d70 <HAL_GetTick>
 80014fe:	0002      	movs	r2, r0
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e1c8      	b.n	800189e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800150c:	4b29      	ldr	r3, [pc, #164]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 800150e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001510:	2202      	movs	r2, #2
 8001512:	4013      	ands	r3, r2
 8001514:	d1f1      	bne.n	80014fa <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2204      	movs	r2, #4
 800151c:	4013      	ands	r3, r2
 800151e:	d100      	bne.n	8001522 <HAL_RCC_OscConfig+0x29e>
 8001520:	e0b6      	b.n	8001690 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001522:	231f      	movs	r3, #31
 8001524:	18fb      	adds	r3, r7, r3
 8001526:	2200      	movs	r2, #0
 8001528:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800152a:	4b22      	ldr	r3, [pc, #136]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 800152c:	69da      	ldr	r2, [r3, #28]
 800152e:	2380      	movs	r3, #128	; 0x80
 8001530:	055b      	lsls	r3, r3, #21
 8001532:	4013      	ands	r3, r2
 8001534:	d111      	bne.n	800155a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001536:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 8001538:	69da      	ldr	r2, [r3, #28]
 800153a:	4b1e      	ldr	r3, [pc, #120]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 800153c:	2180      	movs	r1, #128	; 0x80
 800153e:	0549      	lsls	r1, r1, #21
 8001540:	430a      	orrs	r2, r1
 8001542:	61da      	str	r2, [r3, #28]
 8001544:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 8001546:	69da      	ldr	r2, [r3, #28]
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	055b      	lsls	r3, r3, #21
 800154c:	4013      	ands	r3, r2
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001552:	231f      	movs	r3, #31
 8001554:	18fb      	adds	r3, r7, r3
 8001556:	2201      	movs	r2, #1
 8001558:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155a:	4b19      	ldr	r3, [pc, #100]	; (80015c0 <HAL_RCC_OscConfig+0x33c>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	2380      	movs	r3, #128	; 0x80
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	4013      	ands	r3, r2
 8001564:	d11a      	bne.n	800159c <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001566:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <HAL_RCC_OscConfig+0x33c>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <HAL_RCC_OscConfig+0x33c>)
 800156c:	2180      	movs	r1, #128	; 0x80
 800156e:	0049      	lsls	r1, r1, #1
 8001570:	430a      	orrs	r2, r1
 8001572:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001574:	f7ff fbfc 	bl	8000d70 <HAL_GetTick>
 8001578:	0003      	movs	r3, r0
 800157a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800157e:	f7ff fbf7 	bl	8000d70 <HAL_GetTick>
 8001582:	0002      	movs	r2, r0
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b64      	cmp	r3, #100	; 0x64
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e186      	b.n	800189e <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <HAL_RCC_OscConfig+0x33c>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	2380      	movs	r3, #128	; 0x80
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	4013      	ands	r3, r2
 800159a:	d0f0      	beq.n	800157e <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d10f      	bne.n	80015c4 <HAL_RCC_OscConfig+0x340>
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 80015a6:	6a1a      	ldr	r2, [r3, #32]
 80015a8:	4b02      	ldr	r3, [pc, #8]	; (80015b4 <HAL_RCC_OscConfig+0x330>)
 80015aa:	2101      	movs	r1, #1
 80015ac:	430a      	orrs	r2, r1
 80015ae:	621a      	str	r2, [r3, #32]
 80015b0:	e036      	b.n	8001620 <HAL_RCC_OscConfig+0x39c>
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	40021000 	.word	0x40021000
 80015b8:	fffeffff 	.word	0xfffeffff
 80015bc:	fffbffff 	.word	0xfffbffff
 80015c0:	40007000 	.word	0x40007000
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d10c      	bne.n	80015e6 <HAL_RCC_OscConfig+0x362>
 80015cc:	4bb6      	ldr	r3, [pc, #728]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 80015ce:	6a1a      	ldr	r2, [r3, #32]
 80015d0:	4bb5      	ldr	r3, [pc, #724]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 80015d2:	2101      	movs	r1, #1
 80015d4:	438a      	bics	r2, r1
 80015d6:	621a      	str	r2, [r3, #32]
 80015d8:	4bb3      	ldr	r3, [pc, #716]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 80015da:	6a1a      	ldr	r2, [r3, #32]
 80015dc:	4bb2      	ldr	r3, [pc, #712]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 80015de:	2104      	movs	r1, #4
 80015e0:	438a      	bics	r2, r1
 80015e2:	621a      	str	r2, [r3, #32]
 80015e4:	e01c      	b.n	8001620 <HAL_RCC_OscConfig+0x39c>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	2b05      	cmp	r3, #5
 80015ec:	d10c      	bne.n	8001608 <HAL_RCC_OscConfig+0x384>
 80015ee:	4bae      	ldr	r3, [pc, #696]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 80015f0:	6a1a      	ldr	r2, [r3, #32]
 80015f2:	4bad      	ldr	r3, [pc, #692]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 80015f4:	2104      	movs	r1, #4
 80015f6:	430a      	orrs	r2, r1
 80015f8:	621a      	str	r2, [r3, #32]
 80015fa:	4bab      	ldr	r3, [pc, #684]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 80015fc:	6a1a      	ldr	r2, [r3, #32]
 80015fe:	4baa      	ldr	r3, [pc, #680]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 8001600:	2101      	movs	r1, #1
 8001602:	430a      	orrs	r2, r1
 8001604:	621a      	str	r2, [r3, #32]
 8001606:	e00b      	b.n	8001620 <HAL_RCC_OscConfig+0x39c>
 8001608:	4ba7      	ldr	r3, [pc, #668]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 800160a:	6a1a      	ldr	r2, [r3, #32]
 800160c:	4ba6      	ldr	r3, [pc, #664]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 800160e:	2101      	movs	r1, #1
 8001610:	438a      	bics	r2, r1
 8001612:	621a      	str	r2, [r3, #32]
 8001614:	4ba4      	ldr	r3, [pc, #656]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 8001616:	6a1a      	ldr	r2, [r3, #32]
 8001618:	4ba3      	ldr	r3, [pc, #652]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 800161a:	2104      	movs	r1, #4
 800161c:	438a      	bics	r2, r1
 800161e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d014      	beq.n	8001652 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001628:	f7ff fba2 	bl	8000d70 <HAL_GetTick>
 800162c:	0003      	movs	r3, r0
 800162e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001630:	e009      	b.n	8001646 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001632:	f7ff fb9d 	bl	8000d70 <HAL_GetTick>
 8001636:	0002      	movs	r2, r0
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	4a9b      	ldr	r2, [pc, #620]	; (80018ac <HAL_RCC_OscConfig+0x628>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e12b      	b.n	800189e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001646:	4b98      	ldr	r3, [pc, #608]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 8001648:	6a1b      	ldr	r3, [r3, #32]
 800164a:	2202      	movs	r2, #2
 800164c:	4013      	ands	r3, r2
 800164e:	d0f0      	beq.n	8001632 <HAL_RCC_OscConfig+0x3ae>
 8001650:	e013      	b.n	800167a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001652:	f7ff fb8d 	bl	8000d70 <HAL_GetTick>
 8001656:	0003      	movs	r3, r0
 8001658:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800165a:	e009      	b.n	8001670 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800165c:	f7ff fb88 	bl	8000d70 <HAL_GetTick>
 8001660:	0002      	movs	r2, r0
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	4a91      	ldr	r2, [pc, #580]	; (80018ac <HAL_RCC_OscConfig+0x628>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e116      	b.n	800189e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001670:	4b8d      	ldr	r3, [pc, #564]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	2202      	movs	r2, #2
 8001676:	4013      	ands	r3, r2
 8001678:	d1f0      	bne.n	800165c <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800167a:	231f      	movs	r3, #31
 800167c:	18fb      	adds	r3, r7, r3
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d105      	bne.n	8001690 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001684:	4b88      	ldr	r3, [pc, #544]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 8001686:	69da      	ldr	r2, [r3, #28]
 8001688:	4b87      	ldr	r3, [pc, #540]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 800168a:	4989      	ldr	r1, [pc, #548]	; (80018b0 <HAL_RCC_OscConfig+0x62c>)
 800168c:	400a      	ands	r2, r1
 800168e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2210      	movs	r2, #16
 8001696:	4013      	ands	r3, r2
 8001698:	d063      	beq.n	8001762 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d12a      	bne.n	80016f8 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80016a2:	4b81      	ldr	r3, [pc, #516]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 80016a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016a6:	4b80      	ldr	r3, [pc, #512]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 80016a8:	2104      	movs	r1, #4
 80016aa:	430a      	orrs	r2, r1
 80016ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80016ae:	4b7e      	ldr	r3, [pc, #504]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 80016b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016b2:	4b7d      	ldr	r3, [pc, #500]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 80016b4:	2101      	movs	r1, #1
 80016b6:	430a      	orrs	r2, r1
 80016b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ba:	f7ff fb59 	bl	8000d70 <HAL_GetTick>
 80016be:	0003      	movs	r3, r0
 80016c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80016c4:	f7ff fb54 	bl	8000d70 <HAL_GetTick>
 80016c8:	0002      	movs	r2, r0
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e0e3      	b.n	800189e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80016d6:	4b74      	ldr	r3, [pc, #464]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 80016d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016da:	2202      	movs	r2, #2
 80016dc:	4013      	ands	r3, r2
 80016de:	d0f1      	beq.n	80016c4 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80016e0:	4b71      	ldr	r3, [pc, #452]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 80016e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016e4:	22f8      	movs	r2, #248	; 0xf8
 80016e6:	4393      	bics	r3, r2
 80016e8:	0019      	movs	r1, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	00da      	lsls	r2, r3, #3
 80016f0:	4b6d      	ldr	r3, [pc, #436]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 80016f2:	430a      	orrs	r2, r1
 80016f4:	635a      	str	r2, [r3, #52]	; 0x34
 80016f6:	e034      	b.n	8001762 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	695b      	ldr	r3, [r3, #20]
 80016fc:	3305      	adds	r3, #5
 80016fe:	d111      	bne.n	8001724 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001700:	4b69      	ldr	r3, [pc, #420]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 8001702:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001704:	4b68      	ldr	r3, [pc, #416]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 8001706:	2104      	movs	r1, #4
 8001708:	438a      	bics	r2, r1
 800170a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800170c:	4b66      	ldr	r3, [pc, #408]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 800170e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001710:	22f8      	movs	r2, #248	; 0xf8
 8001712:	4393      	bics	r3, r2
 8001714:	0019      	movs	r1, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	00da      	lsls	r2, r3, #3
 800171c:	4b62      	ldr	r3, [pc, #392]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 800171e:	430a      	orrs	r2, r1
 8001720:	635a      	str	r2, [r3, #52]	; 0x34
 8001722:	e01e      	b.n	8001762 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001724:	4b60      	ldr	r3, [pc, #384]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 8001726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001728:	4b5f      	ldr	r3, [pc, #380]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 800172a:	2104      	movs	r1, #4
 800172c:	430a      	orrs	r2, r1
 800172e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001730:	4b5d      	ldr	r3, [pc, #372]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 8001732:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001734:	4b5c      	ldr	r3, [pc, #368]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 8001736:	2101      	movs	r1, #1
 8001738:	438a      	bics	r2, r1
 800173a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173c:	f7ff fb18 	bl	8000d70 <HAL_GetTick>
 8001740:	0003      	movs	r3, r0
 8001742:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001746:	f7ff fb13 	bl	8000d70 <HAL_GetTick>
 800174a:	0002      	movs	r2, r0
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e0a2      	b.n	800189e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001758:	4b53      	ldr	r3, [pc, #332]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 800175a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800175c:	2202      	movs	r2, #2
 800175e:	4013      	ands	r3, r2
 8001760:	d1f1      	bne.n	8001746 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a1b      	ldr	r3, [r3, #32]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d100      	bne.n	800176c <HAL_RCC_OscConfig+0x4e8>
 800176a:	e097      	b.n	800189c <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800176c:	4b4e      	ldr	r3, [pc, #312]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	220c      	movs	r2, #12
 8001772:	4013      	ands	r3, r2
 8001774:	2b08      	cmp	r3, #8
 8001776:	d100      	bne.n	800177a <HAL_RCC_OscConfig+0x4f6>
 8001778:	e06b      	b.n	8001852 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a1b      	ldr	r3, [r3, #32]
 800177e:	2b02      	cmp	r3, #2
 8001780:	d14c      	bne.n	800181c <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001782:	4b49      	ldr	r3, [pc, #292]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	4b48      	ldr	r3, [pc, #288]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 8001788:	494a      	ldr	r1, [pc, #296]	; (80018b4 <HAL_RCC_OscConfig+0x630>)
 800178a:	400a      	ands	r2, r1
 800178c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178e:	f7ff faef 	bl	8000d70 <HAL_GetTick>
 8001792:	0003      	movs	r3, r0
 8001794:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001798:	f7ff faea 	bl	8000d70 <HAL_GetTick>
 800179c:	0002      	movs	r2, r0
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e079      	b.n	800189e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017aa:	4b3f      	ldr	r3, [pc, #252]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	2380      	movs	r3, #128	; 0x80
 80017b0:	049b      	lsls	r3, r3, #18
 80017b2:	4013      	ands	r3, r2
 80017b4:	d1f0      	bne.n	8001798 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017b6:	4b3c      	ldr	r3, [pc, #240]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 80017b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ba:	220f      	movs	r2, #15
 80017bc:	4393      	bics	r3, r2
 80017be:	0019      	movs	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017c4:	4b38      	ldr	r3, [pc, #224]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 80017c6:	430a      	orrs	r2, r1
 80017c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80017ca:	4b37      	ldr	r3, [pc, #220]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	4a3a      	ldr	r2, [pc, #232]	; (80018b8 <HAL_RCC_OscConfig+0x634>)
 80017d0:	4013      	ands	r3, r2
 80017d2:	0019      	movs	r1, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017dc:	431a      	orrs	r2, r3
 80017de:	4b32      	ldr	r3, [pc, #200]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 80017e0:	430a      	orrs	r2, r1
 80017e2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017e4:	4b30      	ldr	r3, [pc, #192]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b2f      	ldr	r3, [pc, #188]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 80017ea:	2180      	movs	r1, #128	; 0x80
 80017ec:	0449      	lsls	r1, r1, #17
 80017ee:	430a      	orrs	r2, r1
 80017f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f2:	f7ff fabd 	bl	8000d70 <HAL_GetTick>
 80017f6:	0003      	movs	r3, r0
 80017f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017fc:	f7ff fab8 	bl	8000d70 <HAL_GetTick>
 8001800:	0002      	movs	r2, r0
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e047      	b.n	800189e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800180e:	4b26      	ldr	r3, [pc, #152]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	2380      	movs	r3, #128	; 0x80
 8001814:	049b      	lsls	r3, r3, #18
 8001816:	4013      	ands	r3, r2
 8001818:	d0f0      	beq.n	80017fc <HAL_RCC_OscConfig+0x578>
 800181a:	e03f      	b.n	800189c <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800181c:	4b22      	ldr	r3, [pc, #136]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b21      	ldr	r3, [pc, #132]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 8001822:	4924      	ldr	r1, [pc, #144]	; (80018b4 <HAL_RCC_OscConfig+0x630>)
 8001824:	400a      	ands	r2, r1
 8001826:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7ff faa2 	bl	8000d70 <HAL_GetTick>
 800182c:	0003      	movs	r3, r0
 800182e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001832:	f7ff fa9d 	bl	8000d70 <HAL_GetTick>
 8001836:	0002      	movs	r2, r0
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e02c      	b.n	800189e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001844:	4b18      	ldr	r3, [pc, #96]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	2380      	movs	r3, #128	; 0x80
 800184a:	049b      	lsls	r3, r3, #18
 800184c:	4013      	ands	r3, r2
 800184e:	d1f0      	bne.n	8001832 <HAL_RCC_OscConfig+0x5ae>
 8001850:	e024      	b.n	800189c <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d101      	bne.n	800185e <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e01f      	b.n	800189e <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800185e:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001864:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <HAL_RCC_OscConfig+0x624>)
 8001866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001868:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	2380      	movs	r3, #128	; 0x80
 800186e:	025b      	lsls	r3, r3, #9
 8001870:	401a      	ands	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001876:	429a      	cmp	r2, r3
 8001878:	d10e      	bne.n	8001898 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	220f      	movs	r2, #15
 800187e:	401a      	ands	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001884:	429a      	cmp	r2, r3
 8001886:	d107      	bne.n	8001898 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	23f0      	movs	r3, #240	; 0xf0
 800188c:	039b      	lsls	r3, r3, #14
 800188e:	401a      	ands	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001894:	429a      	cmp	r2, r3
 8001896:	d001      	beq.n	800189c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e000      	b.n	800189e <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	0018      	movs	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	b008      	add	sp, #32
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	40021000 	.word	0x40021000
 80018ac:	00001388 	.word	0x00001388
 80018b0:	efffffff 	.word	0xefffffff
 80018b4:	feffffff 	.word	0xfeffffff
 80018b8:	ffc2ffff 	.word	0xffc2ffff

080018bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e0b3      	b.n	8001a38 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018d0:	4b5b      	ldr	r3, [pc, #364]	; (8001a40 <HAL_RCC_ClockConfig+0x184>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2201      	movs	r2, #1
 80018d6:	4013      	ands	r3, r2
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d911      	bls.n	8001902 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018de:	4b58      	ldr	r3, [pc, #352]	; (8001a40 <HAL_RCC_ClockConfig+0x184>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2201      	movs	r2, #1
 80018e4:	4393      	bics	r3, r2
 80018e6:	0019      	movs	r1, r3
 80018e8:	4b55      	ldr	r3, [pc, #340]	; (8001a40 <HAL_RCC_ClockConfig+0x184>)
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f0:	4b53      	ldr	r3, [pc, #332]	; (8001a40 <HAL_RCC_ClockConfig+0x184>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2201      	movs	r2, #1
 80018f6:	4013      	ands	r3, r2
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d001      	beq.n	8001902 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e09a      	b.n	8001a38 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2202      	movs	r2, #2
 8001908:	4013      	ands	r3, r2
 800190a:	d015      	beq.n	8001938 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2204      	movs	r2, #4
 8001912:	4013      	ands	r3, r2
 8001914:	d006      	beq.n	8001924 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001916:	4b4b      	ldr	r3, [pc, #300]	; (8001a44 <HAL_RCC_ClockConfig+0x188>)
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	4b4a      	ldr	r3, [pc, #296]	; (8001a44 <HAL_RCC_ClockConfig+0x188>)
 800191c:	21e0      	movs	r1, #224	; 0xe0
 800191e:	00c9      	lsls	r1, r1, #3
 8001920:	430a      	orrs	r2, r1
 8001922:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001924:	4b47      	ldr	r3, [pc, #284]	; (8001a44 <HAL_RCC_ClockConfig+0x188>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	22f0      	movs	r2, #240	; 0xf0
 800192a:	4393      	bics	r3, r2
 800192c:	0019      	movs	r1, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689a      	ldr	r2, [r3, #8]
 8001932:	4b44      	ldr	r3, [pc, #272]	; (8001a44 <HAL_RCC_ClockConfig+0x188>)
 8001934:	430a      	orrs	r2, r1
 8001936:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2201      	movs	r2, #1
 800193e:	4013      	ands	r3, r2
 8001940:	d040      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d107      	bne.n	800195a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194a:	4b3e      	ldr	r3, [pc, #248]	; (8001a44 <HAL_RCC_ClockConfig+0x188>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	2380      	movs	r3, #128	; 0x80
 8001950:	029b      	lsls	r3, r3, #10
 8001952:	4013      	ands	r3, r2
 8001954:	d114      	bne.n	8001980 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e06e      	b.n	8001a38 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b02      	cmp	r3, #2
 8001960:	d107      	bne.n	8001972 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001962:	4b38      	ldr	r3, [pc, #224]	; (8001a44 <HAL_RCC_ClockConfig+0x188>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	2380      	movs	r3, #128	; 0x80
 8001968:	049b      	lsls	r3, r3, #18
 800196a:	4013      	ands	r3, r2
 800196c:	d108      	bne.n	8001980 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e062      	b.n	8001a38 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001972:	4b34      	ldr	r3, [pc, #208]	; (8001a44 <HAL_RCC_ClockConfig+0x188>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2202      	movs	r2, #2
 8001978:	4013      	ands	r3, r2
 800197a:	d101      	bne.n	8001980 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e05b      	b.n	8001a38 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001980:	4b30      	ldr	r3, [pc, #192]	; (8001a44 <HAL_RCC_ClockConfig+0x188>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2203      	movs	r2, #3
 8001986:	4393      	bics	r3, r2
 8001988:	0019      	movs	r1, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	4b2d      	ldr	r3, [pc, #180]	; (8001a44 <HAL_RCC_ClockConfig+0x188>)
 8001990:	430a      	orrs	r2, r1
 8001992:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001994:	f7ff f9ec 	bl	8000d70 <HAL_GetTick>
 8001998:	0003      	movs	r3, r0
 800199a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199c:	e009      	b.n	80019b2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800199e:	f7ff f9e7 	bl	8000d70 <HAL_GetTick>
 80019a2:	0002      	movs	r2, r0
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	4a27      	ldr	r2, [pc, #156]	; (8001a48 <HAL_RCC_ClockConfig+0x18c>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e042      	b.n	8001a38 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b2:	4b24      	ldr	r3, [pc, #144]	; (8001a44 <HAL_RCC_ClockConfig+0x188>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	220c      	movs	r2, #12
 80019b8:	401a      	ands	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d1ec      	bne.n	800199e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019c4:	4b1e      	ldr	r3, [pc, #120]	; (8001a40 <HAL_RCC_ClockConfig+0x184>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2201      	movs	r2, #1
 80019ca:	4013      	ands	r3, r2
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d211      	bcs.n	80019f6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d2:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <HAL_RCC_ClockConfig+0x184>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2201      	movs	r2, #1
 80019d8:	4393      	bics	r3, r2
 80019da:	0019      	movs	r1, r3
 80019dc:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <HAL_RCC_ClockConfig+0x184>)
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	430a      	orrs	r2, r1
 80019e2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e4:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <HAL_RCC_ClockConfig+0x184>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2201      	movs	r2, #1
 80019ea:	4013      	ands	r3, r2
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d001      	beq.n	80019f6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e020      	b.n	8001a38 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2204      	movs	r2, #4
 80019fc:	4013      	ands	r3, r2
 80019fe:	d009      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a00:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <HAL_RCC_ClockConfig+0x188>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	4a11      	ldr	r2, [pc, #68]	; (8001a4c <HAL_RCC_ClockConfig+0x190>)
 8001a06:	4013      	ands	r3, r2
 8001a08:	0019      	movs	r1, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68da      	ldr	r2, [r3, #12]
 8001a0e:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <HAL_RCC_ClockConfig+0x188>)
 8001a10:	430a      	orrs	r2, r1
 8001a12:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001a14:	f000 f820 	bl	8001a58 <HAL_RCC_GetSysClockFreq>
 8001a18:	0001      	movs	r1, r0
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <HAL_RCC_ClockConfig+0x188>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	091b      	lsrs	r3, r3, #4
 8001a20:	220f      	movs	r2, #15
 8001a22:	4013      	ands	r3, r2
 8001a24:	4a0a      	ldr	r2, [pc, #40]	; (8001a50 <HAL_RCC_ClockConfig+0x194>)
 8001a26:	5cd3      	ldrb	r3, [r2, r3]
 8001a28:	000a      	movs	r2, r1
 8001a2a:	40da      	lsrs	r2, r3
 8001a2c:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <HAL_RCC_ClockConfig+0x198>)
 8001a2e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a30:	2000      	movs	r0, #0
 8001a32:	f7ff f957 	bl	8000ce4 <HAL_InitTick>
  
  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	0018      	movs	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	b004      	add	sp, #16
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40022000 	.word	0x40022000
 8001a44:	40021000 	.word	0x40021000
 8001a48:	00001388 	.word	0x00001388
 8001a4c:	fffff8ff 	.word	0xfffff8ff
 8001a50:	08001eb0 	.word	0x08001eb0
 8001a54:	20000000 	.word	0x20000000

08001a58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a58:	b590      	push	{r4, r7, lr}
 8001a5a:	b08f      	sub	sp, #60	; 0x3c
 8001a5c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001a5e:	2314      	movs	r3, #20
 8001a60:	18fb      	adds	r3, r7, r3
 8001a62:	4a2b      	ldr	r2, [pc, #172]	; (8001b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a64:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001a66:	c313      	stmia	r3!, {r0, r1, r4}
 8001a68:	6812      	ldr	r2, [r2, #0]
 8001a6a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001a6c:	1d3b      	adds	r3, r7, #4
 8001a6e:	4a29      	ldr	r2, [pc, #164]	; (8001b14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a70:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001a72:	c313      	stmia	r3!, {r0, r1, r4}
 8001a74:	6812      	ldr	r2, [r2, #0]
 8001a76:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a80:	2300      	movs	r3, #0
 8001a82:	637b      	str	r3, [r7, #52]	; 0x34
 8001a84:	2300      	movs	r3, #0
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001a8c:	4b22      	ldr	r3, [pc, #136]	; (8001b18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a94:	220c      	movs	r2, #12
 8001a96:	4013      	ands	r3, r2
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	d002      	beq.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x4a>
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	d003      	beq.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x50>
 8001aa0:	e02d      	b.n	8001afe <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001aa2:	4b1e      	ldr	r3, [pc, #120]	; (8001b1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001aa4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001aa6:	e02d      	b.n	8001b04 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aaa:	0c9b      	lsrs	r3, r3, #18
 8001aac:	220f      	movs	r2, #15
 8001aae:	4013      	ands	r3, r2
 8001ab0:	2214      	movs	r2, #20
 8001ab2:	18ba      	adds	r2, r7, r2
 8001ab4:	5cd3      	ldrb	r3, [r2, r3]
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001ab8:	4b17      	ldr	r3, [pc, #92]	; (8001b18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001abc:	220f      	movs	r2, #15
 8001abe:	4013      	ands	r3, r2
 8001ac0:	1d3a      	adds	r2, r7, #4
 8001ac2:	5cd3      	ldrb	r3, [r2, r3]
 8001ac4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001ac6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ac8:	2380      	movs	r3, #128	; 0x80
 8001aca:	025b      	lsls	r3, r3, #9
 8001acc:	4013      	ands	r3, r2
 8001ace:	d009      	beq.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ad0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ad2:	4812      	ldr	r0, [pc, #72]	; (8001b1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ad4:	f7fe fb18 	bl	8000108 <__udivsi3>
 8001ad8:	0003      	movs	r3, r0
 8001ada:	001a      	movs	r2, r3
 8001adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ade:	4353      	muls	r3, r2
 8001ae0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ae2:	e009      	b.n	8001af8 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001ae4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ae6:	000a      	movs	r2, r1
 8001ae8:	0152      	lsls	r2, r2, #5
 8001aea:	1a52      	subs	r2, r2, r1
 8001aec:	0193      	lsls	r3, r2, #6
 8001aee:	1a9b      	subs	r3, r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	185b      	adds	r3, r3, r1
 8001af4:	021b      	lsls	r3, r3, #8
 8001af6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001afa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001afc:	e002      	b.n	8001b04 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001afe:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b00:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b02:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001b06:	0018      	movs	r0, r3
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	b00f      	add	sp, #60	; 0x3c
 8001b0c:	bd90      	pop	{r4, r7, pc}
 8001b0e:	46c0      	nop			; (mov r8, r8)
 8001b10:	08001e30 	.word	0x08001e30
 8001b14:	08001e40 	.word	0x08001e40
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	007a1200 	.word	0x007a1200

08001b20 <_ZdlPvj>:
 8001b20:	b510      	push	{r4, lr}
 8001b22:	f000 f819 	bl	8001b58 <_ZdlPv>
 8001b26:	bd10      	pop	{r4, pc}

08001b28 <_Znwj>:
 8001b28:	b510      	push	{r4, lr}
 8001b2a:	1e04      	subs	r4, r0, #0
 8001b2c:	d100      	bne.n	8001b30 <_Znwj+0x8>
 8001b2e:	3401      	adds	r4, #1
 8001b30:	0020      	movs	r0, r4
 8001b32:	f000 f847 	bl	8001bc4 <malloc>
 8001b36:	2800      	cmp	r0, #0
 8001b38:	d107      	bne.n	8001b4a <_Znwj+0x22>
 8001b3a:	f000 f807 	bl	8001b4c <_ZSt15get_new_handlerv>
 8001b3e:	2800      	cmp	r0, #0
 8001b40:	d101      	bne.n	8001b46 <_Znwj+0x1e>
 8001b42:	f000 f80d 	bl	8001b60 <abort>
 8001b46:	4780      	blx	r0
 8001b48:	e7f2      	b.n	8001b30 <_Znwj+0x8>
 8001b4a:	bd10      	pop	{r4, pc}

08001b4c <_ZSt15get_new_handlerv>:
 8001b4c:	4b01      	ldr	r3, [pc, #4]	; (8001b54 <_ZSt15get_new_handlerv+0x8>)
 8001b4e:	6818      	ldr	r0, [r3, #0]
 8001b50:	4770      	bx	lr
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	20000090 	.word	0x20000090

08001b58 <_ZdlPv>:
 8001b58:	b510      	push	{r4, lr}
 8001b5a:	f000 f83d 	bl	8001bd8 <free>
 8001b5e:	bd10      	pop	{r4, pc}

08001b60 <abort>:
 8001b60:	b510      	push	{r4, lr}
 8001b62:	2006      	movs	r0, #6
 8001b64:	f000 f92e 	bl	8001dc4 <raise>
 8001b68:	2001      	movs	r0, #1
 8001b6a:	f7ff f83e 	bl	8000bea <_exit>
	...

08001b70 <__errno>:
 8001b70:	4b01      	ldr	r3, [pc, #4]	; (8001b78 <__errno+0x8>)
 8001b72:	6818      	ldr	r0, [r3, #0]
 8001b74:	4770      	bx	lr
 8001b76:	46c0      	nop			; (mov r8, r8)
 8001b78:	2000000c 	.word	0x2000000c

08001b7c <__libc_init_array>:
 8001b7c:	b570      	push	{r4, r5, r6, lr}
 8001b7e:	2600      	movs	r6, #0
 8001b80:	4d0c      	ldr	r5, [pc, #48]	; (8001bb4 <__libc_init_array+0x38>)
 8001b82:	4c0d      	ldr	r4, [pc, #52]	; (8001bb8 <__libc_init_array+0x3c>)
 8001b84:	1b64      	subs	r4, r4, r5
 8001b86:	10a4      	asrs	r4, r4, #2
 8001b88:	42a6      	cmp	r6, r4
 8001b8a:	d109      	bne.n	8001ba0 <__libc_init_array+0x24>
 8001b8c:	2600      	movs	r6, #0
 8001b8e:	f000 f93b 	bl	8001e08 <_init>
 8001b92:	4d0a      	ldr	r5, [pc, #40]	; (8001bbc <__libc_init_array+0x40>)
 8001b94:	4c0a      	ldr	r4, [pc, #40]	; (8001bc0 <__libc_init_array+0x44>)
 8001b96:	1b64      	subs	r4, r4, r5
 8001b98:	10a4      	asrs	r4, r4, #2
 8001b9a:	42a6      	cmp	r6, r4
 8001b9c:	d105      	bne.n	8001baa <__libc_init_array+0x2e>
 8001b9e:	bd70      	pop	{r4, r5, r6, pc}
 8001ba0:	00b3      	lsls	r3, r6, #2
 8001ba2:	58eb      	ldr	r3, [r5, r3]
 8001ba4:	4798      	blx	r3
 8001ba6:	3601      	adds	r6, #1
 8001ba8:	e7ee      	b.n	8001b88 <__libc_init_array+0xc>
 8001baa:	00b3      	lsls	r3, r6, #2
 8001bac:	58eb      	ldr	r3, [r5, r3]
 8001bae:	4798      	blx	r3
 8001bb0:	3601      	adds	r6, #1
 8001bb2:	e7f2      	b.n	8001b9a <__libc_init_array+0x1e>
 8001bb4:	08001ec0 	.word	0x08001ec0
 8001bb8:	08001ec0 	.word	0x08001ec0
 8001bbc:	08001ec0 	.word	0x08001ec0
 8001bc0:	08001ec4 	.word	0x08001ec4

08001bc4 <malloc>:
 8001bc4:	b510      	push	{r4, lr}
 8001bc6:	4b03      	ldr	r3, [pc, #12]	; (8001bd4 <malloc+0x10>)
 8001bc8:	0001      	movs	r1, r0
 8001bca:	6818      	ldr	r0, [r3, #0]
 8001bcc:	f000 f860 	bl	8001c90 <_malloc_r>
 8001bd0:	bd10      	pop	{r4, pc}
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	2000000c 	.word	0x2000000c

08001bd8 <free>:
 8001bd8:	b510      	push	{r4, lr}
 8001bda:	4b03      	ldr	r3, [pc, #12]	; (8001be8 <free+0x10>)
 8001bdc:	0001      	movs	r1, r0
 8001bde:	6818      	ldr	r0, [r3, #0]
 8001be0:	f000 f80c 	bl	8001bfc <_free_r>
 8001be4:	bd10      	pop	{r4, pc}
 8001be6:	46c0      	nop			; (mov r8, r8)
 8001be8:	2000000c 	.word	0x2000000c

08001bec <memset>:
 8001bec:	0003      	movs	r3, r0
 8001bee:	1812      	adds	r2, r2, r0
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d100      	bne.n	8001bf6 <memset+0xa>
 8001bf4:	4770      	bx	lr
 8001bf6:	7019      	strb	r1, [r3, #0]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	e7f9      	b.n	8001bf0 <memset+0x4>

08001bfc <_free_r>:
 8001bfc:	b570      	push	{r4, r5, r6, lr}
 8001bfe:	0005      	movs	r5, r0
 8001c00:	2900      	cmp	r1, #0
 8001c02:	d010      	beq.n	8001c26 <_free_r+0x2a>
 8001c04:	1f0c      	subs	r4, r1, #4
 8001c06:	6823      	ldr	r3, [r4, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	da00      	bge.n	8001c0e <_free_r+0x12>
 8001c0c:	18e4      	adds	r4, r4, r3
 8001c0e:	0028      	movs	r0, r5
 8001c10:	f000 f8f8 	bl	8001e04 <__malloc_lock>
 8001c14:	4a1d      	ldr	r2, [pc, #116]	; (8001c8c <_free_r+0x90>)
 8001c16:	6813      	ldr	r3, [r2, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d105      	bne.n	8001c28 <_free_r+0x2c>
 8001c1c:	6063      	str	r3, [r4, #4]
 8001c1e:	6014      	str	r4, [r2, #0]
 8001c20:	0028      	movs	r0, r5
 8001c22:	f000 f8f0 	bl	8001e06 <__malloc_unlock>
 8001c26:	bd70      	pop	{r4, r5, r6, pc}
 8001c28:	42a3      	cmp	r3, r4
 8001c2a:	d909      	bls.n	8001c40 <_free_r+0x44>
 8001c2c:	6821      	ldr	r1, [r4, #0]
 8001c2e:	1860      	adds	r0, r4, r1
 8001c30:	4283      	cmp	r3, r0
 8001c32:	d1f3      	bne.n	8001c1c <_free_r+0x20>
 8001c34:	6818      	ldr	r0, [r3, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	1841      	adds	r1, r0, r1
 8001c3a:	6021      	str	r1, [r4, #0]
 8001c3c:	e7ee      	b.n	8001c1c <_free_r+0x20>
 8001c3e:	0013      	movs	r3, r2
 8001c40:	685a      	ldr	r2, [r3, #4]
 8001c42:	2a00      	cmp	r2, #0
 8001c44:	d001      	beq.n	8001c4a <_free_r+0x4e>
 8001c46:	42a2      	cmp	r2, r4
 8001c48:	d9f9      	bls.n	8001c3e <_free_r+0x42>
 8001c4a:	6819      	ldr	r1, [r3, #0]
 8001c4c:	1858      	adds	r0, r3, r1
 8001c4e:	42a0      	cmp	r0, r4
 8001c50:	d10b      	bne.n	8001c6a <_free_r+0x6e>
 8001c52:	6820      	ldr	r0, [r4, #0]
 8001c54:	1809      	adds	r1, r1, r0
 8001c56:	1858      	adds	r0, r3, r1
 8001c58:	6019      	str	r1, [r3, #0]
 8001c5a:	4282      	cmp	r2, r0
 8001c5c:	d1e0      	bne.n	8001c20 <_free_r+0x24>
 8001c5e:	6810      	ldr	r0, [r2, #0]
 8001c60:	6852      	ldr	r2, [r2, #4]
 8001c62:	1841      	adds	r1, r0, r1
 8001c64:	6019      	str	r1, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	e7da      	b.n	8001c20 <_free_r+0x24>
 8001c6a:	42a0      	cmp	r0, r4
 8001c6c:	d902      	bls.n	8001c74 <_free_r+0x78>
 8001c6e:	230c      	movs	r3, #12
 8001c70:	602b      	str	r3, [r5, #0]
 8001c72:	e7d5      	b.n	8001c20 <_free_r+0x24>
 8001c74:	6821      	ldr	r1, [r4, #0]
 8001c76:	1860      	adds	r0, r4, r1
 8001c78:	4282      	cmp	r2, r0
 8001c7a:	d103      	bne.n	8001c84 <_free_r+0x88>
 8001c7c:	6810      	ldr	r0, [r2, #0]
 8001c7e:	6852      	ldr	r2, [r2, #4]
 8001c80:	1841      	adds	r1, r0, r1
 8001c82:	6021      	str	r1, [r4, #0]
 8001c84:	6062      	str	r2, [r4, #4]
 8001c86:	605c      	str	r4, [r3, #4]
 8001c88:	e7ca      	b.n	8001c20 <_free_r+0x24>
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	20000094 	.word	0x20000094

08001c90 <_malloc_r>:
 8001c90:	2303      	movs	r3, #3
 8001c92:	b570      	push	{r4, r5, r6, lr}
 8001c94:	1ccd      	adds	r5, r1, #3
 8001c96:	439d      	bics	r5, r3
 8001c98:	3508      	adds	r5, #8
 8001c9a:	0006      	movs	r6, r0
 8001c9c:	2d0c      	cmp	r5, #12
 8001c9e:	d21e      	bcs.n	8001cde <_malloc_r+0x4e>
 8001ca0:	250c      	movs	r5, #12
 8001ca2:	42a9      	cmp	r1, r5
 8001ca4:	d81d      	bhi.n	8001ce2 <_malloc_r+0x52>
 8001ca6:	0030      	movs	r0, r6
 8001ca8:	f000 f8ac 	bl	8001e04 <__malloc_lock>
 8001cac:	4a25      	ldr	r2, [pc, #148]	; (8001d44 <_malloc_r+0xb4>)
 8001cae:	6814      	ldr	r4, [r2, #0]
 8001cb0:	0021      	movs	r1, r4
 8001cb2:	2900      	cmp	r1, #0
 8001cb4:	d119      	bne.n	8001cea <_malloc_r+0x5a>
 8001cb6:	4c24      	ldr	r4, [pc, #144]	; (8001d48 <_malloc_r+0xb8>)
 8001cb8:	6823      	ldr	r3, [r4, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d103      	bne.n	8001cc6 <_malloc_r+0x36>
 8001cbe:	0030      	movs	r0, r6
 8001cc0:	f000 f844 	bl	8001d4c <_sbrk_r>
 8001cc4:	6020      	str	r0, [r4, #0]
 8001cc6:	0029      	movs	r1, r5
 8001cc8:	0030      	movs	r0, r6
 8001cca:	f000 f83f 	bl	8001d4c <_sbrk_r>
 8001cce:	1c43      	adds	r3, r0, #1
 8001cd0:	d12b      	bne.n	8001d2a <_malloc_r+0x9a>
 8001cd2:	230c      	movs	r3, #12
 8001cd4:	0030      	movs	r0, r6
 8001cd6:	6033      	str	r3, [r6, #0]
 8001cd8:	f000 f895 	bl	8001e06 <__malloc_unlock>
 8001cdc:	e003      	b.n	8001ce6 <_malloc_r+0x56>
 8001cde:	2d00      	cmp	r5, #0
 8001ce0:	dadf      	bge.n	8001ca2 <_malloc_r+0x12>
 8001ce2:	230c      	movs	r3, #12
 8001ce4:	6033      	str	r3, [r6, #0]
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	bd70      	pop	{r4, r5, r6, pc}
 8001cea:	680b      	ldr	r3, [r1, #0]
 8001cec:	1b5b      	subs	r3, r3, r5
 8001cee:	d419      	bmi.n	8001d24 <_malloc_r+0x94>
 8001cf0:	2b0b      	cmp	r3, #11
 8001cf2:	d903      	bls.n	8001cfc <_malloc_r+0x6c>
 8001cf4:	600b      	str	r3, [r1, #0]
 8001cf6:	18cc      	adds	r4, r1, r3
 8001cf8:	6025      	str	r5, [r4, #0]
 8001cfa:	e003      	b.n	8001d04 <_malloc_r+0x74>
 8001cfc:	684b      	ldr	r3, [r1, #4]
 8001cfe:	428c      	cmp	r4, r1
 8001d00:	d10d      	bne.n	8001d1e <_malloc_r+0x8e>
 8001d02:	6013      	str	r3, [r2, #0]
 8001d04:	0030      	movs	r0, r6
 8001d06:	f000 f87e 	bl	8001e06 <__malloc_unlock>
 8001d0a:	0020      	movs	r0, r4
 8001d0c:	2207      	movs	r2, #7
 8001d0e:	300b      	adds	r0, #11
 8001d10:	1d23      	adds	r3, r4, #4
 8001d12:	4390      	bics	r0, r2
 8001d14:	1ac3      	subs	r3, r0, r3
 8001d16:	d0e7      	beq.n	8001ce8 <_malloc_r+0x58>
 8001d18:	425a      	negs	r2, r3
 8001d1a:	50e2      	str	r2, [r4, r3]
 8001d1c:	e7e4      	b.n	8001ce8 <_malloc_r+0x58>
 8001d1e:	6063      	str	r3, [r4, #4]
 8001d20:	000c      	movs	r4, r1
 8001d22:	e7ef      	b.n	8001d04 <_malloc_r+0x74>
 8001d24:	000c      	movs	r4, r1
 8001d26:	6849      	ldr	r1, [r1, #4]
 8001d28:	e7c3      	b.n	8001cb2 <_malloc_r+0x22>
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	1cc4      	adds	r4, r0, #3
 8001d2e:	439c      	bics	r4, r3
 8001d30:	42a0      	cmp	r0, r4
 8001d32:	d0e1      	beq.n	8001cf8 <_malloc_r+0x68>
 8001d34:	1a21      	subs	r1, r4, r0
 8001d36:	0030      	movs	r0, r6
 8001d38:	f000 f808 	bl	8001d4c <_sbrk_r>
 8001d3c:	1c43      	adds	r3, r0, #1
 8001d3e:	d1db      	bne.n	8001cf8 <_malloc_r+0x68>
 8001d40:	e7c7      	b.n	8001cd2 <_malloc_r+0x42>
 8001d42:	46c0      	nop			; (mov r8, r8)
 8001d44:	20000094 	.word	0x20000094
 8001d48:	20000098 	.word	0x20000098

08001d4c <_sbrk_r>:
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	b570      	push	{r4, r5, r6, lr}
 8001d50:	4c06      	ldr	r4, [pc, #24]	; (8001d6c <_sbrk_r+0x20>)
 8001d52:	0005      	movs	r5, r0
 8001d54:	0008      	movs	r0, r1
 8001d56:	6023      	str	r3, [r4, #0]
 8001d58:	f7fe ff54 	bl	8000c04 <_sbrk>
 8001d5c:	1c43      	adds	r3, r0, #1
 8001d5e:	d103      	bne.n	8001d68 <_sbrk_r+0x1c>
 8001d60:	6823      	ldr	r3, [r4, #0]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d000      	beq.n	8001d68 <_sbrk_r+0x1c>
 8001d66:	602b      	str	r3, [r5, #0]
 8001d68:	bd70      	pop	{r4, r5, r6, pc}
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	200000a0 	.word	0x200000a0

08001d70 <_raise_r>:
 8001d70:	b570      	push	{r4, r5, r6, lr}
 8001d72:	0004      	movs	r4, r0
 8001d74:	000d      	movs	r5, r1
 8001d76:	291f      	cmp	r1, #31
 8001d78:	d904      	bls.n	8001d84 <_raise_r+0x14>
 8001d7a:	2316      	movs	r3, #22
 8001d7c:	6003      	str	r3, [r0, #0]
 8001d7e:	2001      	movs	r0, #1
 8001d80:	4240      	negs	r0, r0
 8001d82:	bd70      	pop	{r4, r5, r6, pc}
 8001d84:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d004      	beq.n	8001d94 <_raise_r+0x24>
 8001d8a:	008a      	lsls	r2, r1, #2
 8001d8c:	189b      	adds	r3, r3, r2
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	2a00      	cmp	r2, #0
 8001d92:	d108      	bne.n	8001da6 <_raise_r+0x36>
 8001d94:	0020      	movs	r0, r4
 8001d96:	f000 f831 	bl	8001dfc <_getpid_r>
 8001d9a:	002a      	movs	r2, r5
 8001d9c:	0001      	movs	r1, r0
 8001d9e:	0020      	movs	r0, r4
 8001da0:	f000 f81a 	bl	8001dd8 <_kill_r>
 8001da4:	e7ed      	b.n	8001d82 <_raise_r+0x12>
 8001da6:	2000      	movs	r0, #0
 8001da8:	2a01      	cmp	r2, #1
 8001daa:	d0ea      	beq.n	8001d82 <_raise_r+0x12>
 8001dac:	1c51      	adds	r1, r2, #1
 8001dae:	d103      	bne.n	8001db8 <_raise_r+0x48>
 8001db0:	2316      	movs	r3, #22
 8001db2:	3001      	adds	r0, #1
 8001db4:	6023      	str	r3, [r4, #0]
 8001db6:	e7e4      	b.n	8001d82 <_raise_r+0x12>
 8001db8:	2400      	movs	r4, #0
 8001dba:	0028      	movs	r0, r5
 8001dbc:	601c      	str	r4, [r3, #0]
 8001dbe:	4790      	blx	r2
 8001dc0:	0020      	movs	r0, r4
 8001dc2:	e7de      	b.n	8001d82 <_raise_r+0x12>

08001dc4 <raise>:
 8001dc4:	b510      	push	{r4, lr}
 8001dc6:	4b03      	ldr	r3, [pc, #12]	; (8001dd4 <raise+0x10>)
 8001dc8:	0001      	movs	r1, r0
 8001dca:	6818      	ldr	r0, [r3, #0]
 8001dcc:	f7ff ffd0 	bl	8001d70 <_raise_r>
 8001dd0:	bd10      	pop	{r4, pc}
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	2000000c 	.word	0x2000000c

08001dd8 <_kill_r>:
 8001dd8:	2300      	movs	r3, #0
 8001dda:	b570      	push	{r4, r5, r6, lr}
 8001ddc:	4c06      	ldr	r4, [pc, #24]	; (8001df8 <_kill_r+0x20>)
 8001dde:	0005      	movs	r5, r0
 8001de0:	0008      	movs	r0, r1
 8001de2:	0011      	movs	r1, r2
 8001de4:	6023      	str	r3, [r4, #0]
 8001de6:	f7fe fef0 	bl	8000bca <_kill>
 8001dea:	1c43      	adds	r3, r0, #1
 8001dec:	d103      	bne.n	8001df6 <_kill_r+0x1e>
 8001dee:	6823      	ldr	r3, [r4, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d000      	beq.n	8001df6 <_kill_r+0x1e>
 8001df4:	602b      	str	r3, [r5, #0]
 8001df6:	bd70      	pop	{r4, r5, r6, pc}
 8001df8:	200000a0 	.word	0x200000a0

08001dfc <_getpid_r>:
 8001dfc:	b510      	push	{r4, lr}
 8001dfe:	f7fe fede 	bl	8000bbe <_getpid>
 8001e02:	bd10      	pop	{r4, pc}

08001e04 <__malloc_lock>:
 8001e04:	4770      	bx	lr

08001e06 <__malloc_unlock>:
 8001e06:	4770      	bx	lr

08001e08 <_init>:
 8001e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e0a:	46c0      	nop			; (mov r8, r8)
 8001e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e0e:	bc08      	pop	{r3}
 8001e10:	469e      	mov	lr, r3
 8001e12:	4770      	bx	lr

08001e14 <_fini>:
 8001e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e1a:	bc08      	pop	{r3}
 8001e1c:	469e      	mov	lr, r3
 8001e1e:	4770      	bx	lr
